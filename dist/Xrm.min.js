var Xrm=function(t){"use strict";t=t&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t;const e=("object"==typeof process?"https://elegastsandbox.crm4.dynamics.com":"")+"/api/data/v9.0",r="object"==typeof location&&location.origin,o=/[-a-zA-Z0-9]*?\.(crm[0-9]*?\.dynamics\.com|crm\.microsoftdynamics\.us)/,i=()=>!o.test(location.href),a=function(t){let e={};return async function(){let r=JSON.stringify(arguments);return e[r]=e[r]||t.apply(this,arguments),e[r]}},n=a(async()=>{let t=await fetch("/tools/systemcustomization/systemCustomization.aspx?pid=05&web=true");return t.length>0?t.text().then(t=>t.match(/var ORG_UNIQUE_NAME = '([-a-zA-Z0-9]*)';/)[1]):""}),s=r=>o=>a=>async s=>{let l="",c=o&&JSON.stringify(o);return i()&&(l=await n()),t.getAuth()&&(s||(s={}),s.Authorization="Bearer "+t.getAuth()),"$batch"===a&&(c=o),fetch(`${l?"/"+l:l}${e}/${a}`,{headers:{...s},method:r,body:c})},l=s("GET")(),c=(m="then",(...t)=>t.reduce((t,e)=>r=>e(r)[m](t)));var m;const u=t=>t.json(),p=(t,e=[])=>l(`RetrieveEntity(EntityFilters=Microsoft.Dynamics.CRM.EntityFilters'Attributes',LogicalName = '${t}',MetadataId=00000000-0000-0000-0000-000000000000,RetrieveAsIfPublished=false)`)({}),d=a((t,e=[])=>c(u,p)(t,e)),y=async(t,e,r="")=>{let o=await d(t);return(await l(`${o.EntityMetadata.LogicalCollectionName}(${e})${r||""}`)()).json()},g=s("POST"),X=s("PATCH"),C=s("DELETE")(),S={createRecord:async(t,e)=>{let r=await d(t),o=await g(e)("/"+r.EntityMetadata.LogicalCollectionName)({"content-type":"application/json",Prefer:"return=representation"}),i=await o.json();return Promise.resolve({entityType:t,id:i[r.EntityMetadata.PrimaryIdAttribute]})},deleteRecord:async(t,e)=>{let r=await d(t);await C(`/${r.EntityMetadata.LogicalCollectionName}(${e})`)();return Promise.resolve({entityType:t,id:e})},updateRecord:async(t,e,r)=>{let o=await d(t);return await X(r)(`/${o.EntityMetadata.LogicalCollectionName}(${e})`)({"content-type":"application/json"}),Promise.resolve({entityType:t,id:e})},retrieveRecord:y,retrieveMultipleRecords:(t,e="",r="")=>c(u,((t="",e="")=>async({EntityMetadata:r})=>l(`${function(t){if(t){let e="s";return"s"===t.charAt(t.length-1)&&(e="es"),"savedquery"===t&&(t="savedquerie"),t+e}return t}(r.LogicalName)}${t||""}`)(e?{prefer:'odata.include-annotations="*",odata.maxpagesize='+e}:{}))(e,r),d)(t),executeMultiple:async t=>{const r=Date.now();try{let o=await(async(t,r)=>{let o=[];return r.forEach(r=>{let i="";o.push("--batch_"+t),o.push("Content-type: application/http"),o.push("Content-Transfer-Encoding:binary"),r.id&&(i="("+r.id+")"),o.push(""),o.push(r.method.toUpperCase()+" "+e+"/"+r.entity+i+" HTTP/1.1"),o.push("MSCRM.SuppressDuplicateDetection: true"),o.push("If-match: *"),o.push("AutoDisassociate: true"),o.push("Content-Type: application/json"),o.push('Prefer: odata.include-annotations="*"'),o.push("Clienthost: Browser"),o.push(""),o.push(JSON.stringify(r.data))}),o.push("--batch_"+t+"--"),Promise.resolve(o.join("\r\n"))})(r,t),i=await g(o)("$batch")({Accept:"application/json","content-type":"multipart/mixed;boundary=batch_"+r});return Promise.resolve(i)}catch(t){return Promise.reject(t)}},online:{execute:t=>{let e=t.getMetadata().operationName;return g(t)(e)({"content-type":"application/json"})}}},h=async()=>({uniqueName:await n()}),b=a(async()=>(await l("/WhoAmI")()).json()),E=a(y),P=(t,e)=>r=>e(t(r)),A=(...t)=>t.reduce(P),f=t=>e=>r=>r.replace(t,e),v=A(f(/\{|\}/gi)("")),T=async()=>{let t=await b(),e=await E("systemuser",t.UserId,"?$expand=systemuserroles_association($select=name)&$select=systemuserid,fullname");return{userId:`{${v(t.UserId)}}`,userName:e.fullname,securityRoles:e.systemuserroles_association.map(t=>t.roleid)}},I=()=>r,R=A(f(/^\?/)("")),w=t=>e=>e.split(t),N=async()=>{let t=(e="appid",A(R,w("&"),(r=w("="),t=>t.map(r)),((t,e)=>r=>r.reduce(t,e))((t,e)=>(t[e[0]]=e[1],t),{}))(location.search)[e]||"");var e,r;return(t&&await E("appmodule",t,"?$select=name")).name||""},D={AUTH_KEY:null,ActionCollectionBase:()=>{},AlertDialogStrings:()=>{},ArrayEx:()=>{},AttributeFormat:()=>{},AttributeType:()=>{},BeginSecureSessionResponseCode:()=>{},BusinessProcessFlowInstanceState:()=>{},BusinessProcessFlowInstanceStatus:()=>{},BusinessRuleNotificationBase:()=>{},ChartPaneMode:()=>{},ClientName:()=>{},ClientState:()=>{},ClientStates:()=>{},Collection:()=>{},ComponentModel:()=>{},ConfirmDialogStrings:()=>{},Constants:()=>{},ControlType:()=>{},CountRecords:(t,e=[])=>l(`RetrieveTotalRecordCount(EntityNames=['${t}'])`)({}),DataLoadEventArgs:()=>{},DataLoadState:()=>{},DateFormattingInfo:()=>{},DelegateItterator:()=>{},Description:()=>{},Device:()=>{},Diagnostics:()=>{},Dialog:()=>{},DialogOptions:()=>{},Encoding:()=>{},EntityFormOptions:()=>{},EntityListPageInput:()=>{},EntityMetadata:()=>{},EntityRelationshipRoleType:()=>{},EntityRelationshipType:()=>{},ErrorDialogOptions:()=>{},ErrorResponse:()=>{},ExecutionContext:()=>{},Flag:()=>{},FormDataAttributePrivilege:()=>{},FormDataAttributePrivileges:()=>{},FormFactor:()=>{},FormNotificationOptions:()=>{},FormSaveAction:()=>{},FormType:()=>{},Gen:()=>{},GetAttributes:(t,e=[])=>l(`EntityDefinitions(LogicalName='${t}')/Attributes/`)({}),GridType:()=>{},IBusinessRuleNotificationProvider:()=>{},IsMockXrm:()=>!0,IXrmCollectionItem:()=>{},Interfaces:()=>{},Internal:()=>{},JavaScriptConsoleTraceListener:()=>{},KBSearchResult:()=>{},LocalizedLabel:()=>{},LookupObject:()=>{},LookupOptions:()=>{},LookupStyle:()=>{},MetricsStopwatch:()=>{},Mobile:()=>{},Navigation:{openForm:async(t,e={})=>{let o=r+"/main.aspx?pagetype=entityrecord",i="_blank";t.entityName&&(o+="&etn="+t.entityName),t.entityId&&(o+="&id="+t.entityId),t.formId&&(o+="&formid="+t.formId),t.openInNewWindow||(i=null),window.open(o,i)}},NotificationLevel:()=>{},NumberEx:()=>{},Objects:()=>{},Offline:()=>{},OfflineErrorResponse:()=>{},OpenFileMode:()=>{},OpenFormSuccessResponse:()=>{},OptionSetItem:()=>{},OrganizationServiceProxyBridge:()=>{},Page:()=>{},PageBridge:()=>{},PageContextBridge:()=>{},PageEx:()=>{},PageInput:()=>{},PageType:()=>{},Panel:()=>{},ProcessActionSuccessResponse:()=>{},ProcessResponse:()=>{},ProcessState:()=>{},ProcessStatus:()=>{},RelationshipReference:()=>{},RequiredLevel:()=>{},SaveErrorResponse:()=>{},SaveEventArgs:()=>{},SaveMode:()=>{},SaveOptions:()=>{},SaveSuccessResponse:()=>{},ScopedServiceDirectory:()=>{},Sdk:()=>{},Services:()=>{},Soap:()=>{},StepProgress:()=>{},StepType:()=>{},StringBuilderTraceListener:()=>{},StringEx:()=>{},SubmitMode:()=>{},TabDisplayState:()=>{},TabItem:()=>{},TabSection:()=>{},TaskFlowOptions:()=>{},TaskIterrator:()=>{},Tracing:()=>{},UI:()=>{},Utility:{closeProgressIndicator:()=>{},getAllowedStatusTransitions:()=>{},getEntityMetadata:d,getGlobalContext:async()=>{let t=await Promise.all([h(),T()]);return{organizationSettings:t[0],userSettings:t[1],getClientUrl:I,isOnPremises:i,getCurrentAppName:N}},getLearningPathAttributeName:()=>{},getPageContext:()=>{},getResourceString:()=>{},invokeProcessAction:()=>{},lookObjects:()=>{},refreshParentGrid:()=>{},showProgressIndicator:()=>{}},WebApi:S,WindowOptions:()=>{},XrmBusinessProcessFlow:()=>{},XrmChart:()=>{},XrmCollection:()=>{},XrmCollectionBase:()=>{},XrmCollectionDictionary:()=>{},XrmControl:()=>{},XrmControlACI:()=>{},XrmControlAutoLookup:()=>{},XrmControlBase:()=>{},XrmControlButton:()=>{},XrmControlDateTime:()=>{},XrmControlEmailEngagementActionsControl:()=>{},XrmControlEmailRecipientActivity:()=>{},XrmControlFormSelector:()=>{},XrmControlGrid:()=>{},XrmControlIFrame:()=>{},XrmControlLookup:()=>{},XrmControlOptionSet:()=>{},XrmControlQuickForm:()=>{},XrmControlRoutedGrid:()=>{},XrmControlSearchWidget:()=>{},XrmControlSilverlight:()=>{},XrmControlSubGrid:()=>{},XrmControlText:()=>{},XrmControlTimer:()=>{},XrmControlWebResource:()=>{},XrmControls:()=>{},XrmDataControl:()=>{},XrmDialog:()=>{},XrmEncoding:()=>{},XrmEntities:()=>{},XrmEntity:()=>{},XrmEntityAttribute:()=>{},XrmEntityAttributeBoolean:()=>{},XrmEntityAttributeDateTime:()=>{},XrmEntityAttributeLookup:()=>{},XrmEntityAttributeNumber:()=>{},XrmEntityAttributeOptionSet:()=>{},XrmEntityAttributeOptionSetBase:()=>{},XrmEntityAttributeString:()=>{},XrmEntityAttributes:()=>{},XrmEntityRelationship:()=>{},XrmFile:()=>{},XrmForm:()=>{},XrmFormData:()=>{},XrmFormSelectorItem:()=>{},XrmFormSelectorItems:()=>{},XrmFormUI:()=>{},XrmGlobalContext:()=>{},XrmGridData:()=>{},XrmGridFilter:()=>{},XrmGridRow:()=>{},XrmGridRows:()=>{},XrmInternal:()=>{},XrmNavigation:()=>{},XrmNavigationItem:()=>{},XrmNavigationItems:()=>{},XrmNavigations:()=>{},XrmOffline:()=>{},XrmOpenFileOption:()=>{},XrmOrganizationSettings:()=>{},XrmPageContextClient:()=>{},XrmPanel:()=>{},XrmPerformance:()=>{},XrmProcessControlData:()=>{},XrmProcessControlUI:()=>{},XrmProcessStage:()=>{},XrmProcessStep:()=>{},XrmQuickForms:()=>{},XrmRelatedEntities:()=>{},XrmSdkMessages:()=>{},XrmServiceDirectory:()=>{},XrmTab:()=>{},XrmTabNavigator:()=>{},XrmTabNavigatorGroup:()=>{},XrmTabNavigators:()=>{},XrmTabSection:()=>{},XrmTabSections:()=>{},XrmTabs:()=>{},XrmTaskProcess:()=>{},XrmTrace:()=>{},XrmUserSettings:()=>{},XrmUtility:()=>{},XrmViewSelector:()=>{},getName:()=>"Xrm",setAuth:function(t){globalThis.AUTH_KEY=t},getAuth:()=>globalThis.AUTH_KEY};return module.exports={xrm:D},D}(xrm$1);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

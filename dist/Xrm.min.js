var Xrm=function(){"use strict";const e=("production"!==process.env.NODE_ENV?"https://elegastsandbox.crm4.dynamics.com":"")+"/api/data/v9.0",t="object"==typeof location&&location.origin,r=/[-a-zA-Z0-9]*?\.(crm[0-9]*?\.dynamics\.com|crm\.microsoftdynamics\.us)/,n=function(e){let t={};return async function(){let r=JSON.stringify(arguments);return t[r]=t[r]||e.apply(this,arguments),t[r]}},o=n(async()=>{let e=await fetch("/tools/systemcustomization/systemCustomization.aspx?pid=05&web=true");return e.length>0?e.text().then(e=>e.match(/var ORG_UNIQUE_NAME = '([-a-zA-Z0-9]*)';/)[1]):""}),i=async()=>({uniqueName:await o()}),a=n(async()=>(await No("/WhoAmI")()).json()),s=n(Po),c=(e,t)=>r=>t(e(r)),u=(...e)=>e.reduce(c),d=e=>t=>r=>r.replace(e,t),l=u(d(/\{|\}/gi)("")),h=async()=>{let e=await a(),t=await s("systemuser",e.UserId,"?$expand=systemuserroles_association($select=name)&$select=systemuserid,fullname");return{userId:`{${l(e.UserId)}}`,userName:t.fullname,securityRoles:t.systemuserroles_association.map(e=>e.roleid)}},p=()=>t,g=u(d(/^\?/)("")),f=e=>t=>t.split(e),m=async()=>{let e=(t="appid",u(g,f("&"),(r=f("="),e=>e.map(r)),((e,t)=>r=>r.reduce(e,t))((e,t)=>(e[t[0]]=t[1],e),{}))(location.search)[t]||"");var t,r;return(e&&await s("appmodule",e,"?$select=name")).name||""},y=()=>!r.test(location.href),v=(E="then",(...e)=>e.reduce((e,t)=>r=>t(r)[E](e)));var E;const C=e=>e.json(),w=(e,t=[])=>No(`RetrieveEntity(EntityFilters=Microsoft.Dynamics.CRM.EntityFilters'Attributes',LogicalName = '${e}',MetadataId=00000000-0000-0000-0000-000000000000,RetrieveAsIfPublished=false)`)({}),S=n((e,t=[])=>v(C,w)(e,t)),T={closeProgressIndicator:()=>{},getAllowedStatusTransitions:()=>{},getEntityMetadata:S,getGlobalContext:async()=>{let e=await Promise.all([i(),h()]);return{organizationSettings:e[0],userSettings:e[1],getClientUrl:p,isOnPremises:y,getCurrentAppName:m}},getLearningPathAttributeName:()=>{},getPageContext:()=>{},getResourceString:()=>{},invokeProcessAction:()=>{},lookObjects:()=>{},refreshParentGrid:()=>{},showProgressIndicator:()=>{}},A={openForm:async(e,r={})=>{let n=t+"/main.aspx?pagetype=entityrecord",o="_blank";e.entityName&&(n+="&etn="+e.entityName),e.entityId&&(n+="&id="+e.entityId),e.formId&&(n+="&formid="+e.formId),e.openInNewWindow||(o=null),window.open(n,o)}},I=(e,t=[])=>No(`EntityDefinitions(LogicalName='${e}')/Attributes/`)({}),_=(e,t=[])=>No(`RetrieveTotalRecordCount(EntityNames=['${e}'])`)({})
/*! @azure/msal-browser v2.22.1 2022-03-07 */
/*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */;var b=function(e,t){return(b=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)};function R(e,t){function r(){this.constructor=e}b(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var O=function(){return(O=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function k(e,t,r,n){return new(r||(r=Promise))((function(o,i){function a(e){try{c(n.next(e))}catch(e){i(e)}}function s(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}c((n=n.apply(e,t||[])).next())}))}function N(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}function P(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)a.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return a}function U(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(P(arguments[t]));return e}
/*! @azure/msal-common v6.1.0 2022-02-08 */
/*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */var M=function(e,t){return(M=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)};function D(e,t){function r(){this.constructor=e}M(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var L=function(){return(L=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function H(e,t,r,n){return new(r||(r=Promise))((function(o,i){function a(e){try{c(n.next(e))}catch(e){i(e)}}function s(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}c((n=n.apply(e,t||[])).next())}))}function q(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}function F(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var n=Array(e),o=0;for(t=0;t<r;t++)for(var i=arguments[t],a=0,s=i.length;a<s;a++,o++)n[o]=i[a];return n}
/*! @azure/msal-common v6.1.0 2022-02-08 */var K,x,B,G,X,j={LIBRARY_NAME:"MSAL.JS",SKU:"msal.js.common",CACHE_PREFIX:"msal",DEFAULT_AUTHORITY:"https://login.microsoftonline.com/common/",DEFAULT_AUTHORITY_HOST:"login.microsoftonline.com",DEFAULT_COMMON_TENANT:"common",ADFS:"adfs",AAD_INSTANCE_DISCOVERY_ENDPT:"https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=",RESOURCE_DELIM:"|",NO_ACCOUNT:"NO_ACCOUNT",CLAIMS:"claims",CONSUMER_UTID:"9188040d-6c67-4c5b-b112-36a304b66dad",OPENID_SCOPE:"openid",PROFILE_SCOPE:"profile",OFFLINE_ACCESS_SCOPE:"offline_access",EMAIL_SCOPE:"email",CODE_RESPONSE_TYPE:"code",CODE_GRANT_TYPE:"authorization_code",RT_GRANT_TYPE:"refresh_token",FRAGMENT_RESPONSE_MODE:"fragment",S256_CODE_CHALLENGE_METHOD:"S256",URL_FORM_CONTENT_TYPE:"application/x-www-form-urlencoded;charset=utf-8",AUTHORIZATION_PENDING:"authorization_pending",NOT_DEFINED:"not_defined",EMPTY_STRING:"",FORWARD_SLASH:"/",IMDS_ENDPOINT:"http://169.254.169.254/metadata/instance/compute/location",IMDS_VERSION:"2020-06-01",IMDS_TIMEOUT:2e3,AZURE_REGION_AUTO_DISCOVER_FLAG:"TryAutoDetect",REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX:"login.microsoft.com",KNOWN_PUBLIC_CLOUDS:["login.microsoftonline.com","login.windows.net","login.microsoft.com","sts.windows.net"]},z=[j.OPENID_SCOPE,j.PROFILE_SCOPE,j.OFFLINE_ACCESS_SCOPE],W=F(z,[j.EMAIL_SCOPE]);!function(e){e.CONTENT_TYPE="Content-Type",e.RETRY_AFTER="Retry-After",e.CCS_HEADER="X-AnchorMailbox",e.WWWAuthenticate="WWW-Authenticate",e.AuthenticationInfo="Authentication-Info"}(K||(K={})),function(e){e.ID_TOKEN="idtoken",e.CLIENT_INFO="client.info",e.ADAL_ID_TOKEN="adal.idtoken",e.ERROR="error",e.ERROR_DESC="error.description",e.ACTIVE_ACCOUNT="active-account"}(x||(x={})),function(e){e.COMMON="common",e.ORGANIZATIONS="organizations",e.CONSUMERS="consumers"}(B||(B={})),function(e){e.CLIENT_ID="client_id",e.REDIRECT_URI="redirect_uri",e.RESPONSE_TYPE="response_type",e.RESPONSE_MODE="response_mode",e.GRANT_TYPE="grant_type",e.CLAIMS="claims",e.SCOPE="scope",e.ERROR="error",e.ERROR_DESCRIPTION="error_description",e.ACCESS_TOKEN="access_token",e.ID_TOKEN="id_token",e.REFRESH_TOKEN="refresh_token",e.EXPIRES_IN="expires_in",e.STATE="state",e.NONCE="nonce",e.PROMPT="prompt",e.SESSION_STATE="session_state",e.CLIENT_INFO="client_info",e.CODE="code",e.CODE_CHALLENGE="code_challenge",e.CODE_CHALLENGE_METHOD="code_challenge_method",e.CODE_VERIFIER="code_verifier",e.CLIENT_REQUEST_ID="client-request-id",e.X_CLIENT_SKU="x-client-SKU",e.X_CLIENT_VER="x-client-VER",e.X_CLIENT_OS="x-client-OS",e.X_CLIENT_CPU="x-client-CPU",e.X_CLIENT_CURR_TELEM="x-client-current-telemetry",e.X_CLIENT_LAST_TELEM="x-client-last-telemetry",e.X_MS_LIB_CAPABILITY="x-ms-lib-capability",e.POST_LOGOUT_URI="post_logout_redirect_uri",e.ID_TOKEN_HINT="id_token_hint",e.DEVICE_CODE="device_code",e.CLIENT_SECRET="client_secret",e.CLIENT_ASSERTION="client_assertion",e.CLIENT_ASSERTION_TYPE="client_assertion_type",e.TOKEN_TYPE="token_type",e.REQ_CNF="req_cnf",e.OBO_ASSERTION="assertion",e.REQUESTED_TOKEN_USE="requested_token_use",e.ON_BEHALF_OF="on_behalf_of",e.FOCI="foci",e.CCS_HEADER="X-AnchorMailbox",e.RETURN_SPA_CODE="return_spa_code",e.LOGOUT_HINT="logout_hint"}(G||(G={})),function(e){e.ACCESS_TOKEN="access_token",e.XMS_CC="xms_cc"}(X||(X={}));var Y,Q={LOGIN:"login",SELECT_ACCOUNT:"select_account",CONSENT:"consent",NONE:"none",CREATE:"create"};!function(e){e.ACCOUNT="account",e.SID="sid",e.LOGIN_HINT="login_hint",e.ID_TOKEN="id_token",e.DOMAIN_HINT="domain_hint",e.ORGANIZATIONS="organizations",e.CONSUMERS="consumers",e.ACCOUNT_ID="accountIdentifier",e.HOMEACCOUNT_ID="homeAccountIdentifier"}(Y||(Y={}));var J,V,$,Z,ee,te,re,ne={PLAIN:"plain",S256:"S256"};!function(e){e.QUERY="query",e.FRAGMENT="fragment",e.FORM_POST="form_post"}(J||(J={})),function(e){e.IMPLICIT_GRANT="implicit",e.AUTHORIZATION_CODE_GRANT="authorization_code",e.CLIENT_CREDENTIALS_GRANT="client_credentials",e.RESOURCE_OWNER_PASSWORD_GRANT="password",e.REFRESH_TOKEN_GRANT="refresh_token",e.DEVICE_CODE_GRANT="device_code",e.JWT_BEARER="urn:ietf:params:oauth:grant-type:jwt-bearer"}(V||(V={})),function(e){e.MSSTS_ACCOUNT_TYPE="MSSTS",e.ADFS_ACCOUNT_TYPE="ADFS",e.MSAV1_ACCOUNT_TYPE="MSA",e.GENERIC_ACCOUNT_TYPE="Generic"}($||($={})),function(e){e.CACHE_KEY_SEPARATOR="-",e.CLIENT_INFO_SEPARATOR="."}(Z||(Z={})),function(e){e.ID_TOKEN="IdToken",e.ACCESS_TOKEN="AccessToken",e.ACCESS_TOKEN_WITH_AUTH_SCHEME="AccessToken_With_AuthScheme",e.REFRESH_TOKEN="RefreshToken"}(ee||(ee={})),function(e){e.ACCOUNT="Account",e.CREDENTIAL="Credential",e.ID_TOKEN="IdToken",e.ACCESS_TOKEN="AccessToken",e.REFRESH_TOKEN="RefreshToken",e.APP_METADATA="AppMetadata",e.TEMPORARY="TempCache",e.TELEMETRY="Telemetry",e.UNDEFINED="Undefined",e.THROTTLING="Throttling"}(te||(te={})),function(e){e[e.ADFS=1001]="ADFS",e[e.MSA=1002]="MSA",e[e.MSSTS=1003]="MSSTS",e[e.GENERIC=1004]="GENERIC",e[e.ACCESS_TOKEN=2001]="ACCESS_TOKEN",e[e.REFRESH_TOKEN=2002]="REFRESH_TOKEN",e[e.ID_TOKEN=2003]="ID_TOKEN",e[e.APP_METADATA=3001]="APP_METADATA",e[e.UNDEFINED=9999]="UNDEFINED"}(re||(re={}));var oe,ie="authority-metadata",ae=86400;!function(e){e.CONFIG="config",e.CACHE="cache",e.NETWORK="network"}(oe||(oe={}));var se,ce={SCHEMA_VERSION:5,MAX_CUR_HEADER_BYTES:80,MAX_LAST_HEADER_BYTES:330,MAX_CACHED_ERRORS:50,CACHE_KEY:"server-telemetry",CATEGORY_SEPARATOR:"|",VALUE_SEPARATOR:",",OVERFLOW_TRUE:"1",OVERFLOW_FALSE:"0",UNKNOWN_ERROR:"unknown_error"};!function(e){e.BEARER="Bearer",e.POP="pop",e.SSH="ssh-cert"}(se||(se={}));var ue,de,le,he,pe,ge=60,fe=3600,me="throttling",ye="retry-after, h429",ve="invalid_grant",Ee="client_mismatch";!function(e){e.username="username",e.password="password"}(ue||(ue={})),function(e){e[e.httpSuccess=200]="httpSuccess",e[e.httpBadRequest=400]="httpBadRequest"}(de||(de={})),function(e){e.FAILED_AUTO_DETECTION="1",e.INTERNAL_CACHE="2",e.ENVIRONMENT_VARIABLE="3",e.IMDS="4"}(le||(le={})),function(e){e.CONFIGURED_MATCHES_DETECTED="1",e.CONFIGURED_NO_AUTO_DETECTION="2",e.CONFIGURED_NOT_DETECTED="3",e.AUTO_DETECTION_REQUESTED_SUCCESSFUL="4",e.AUTO_DETECTION_REQUESTED_FAILED="5"}(he||(he={})),function(e){e.NO_CACHE_HIT="0",e.FORCE_REFRESH="1",e.NO_CACHED_ACCESS_TOKEN="2",e.CACHED_ACCESS_TOKEN_EXPIRED="3",e.REFRESH_CACHED_ACCESS_TOKEN="4"}(pe||(pe={}));
/*! @azure/msal-common v6.1.0 2022-02-08 */
var Ce,we={code:"unexpected_error",desc:"Unexpected error in authentication."},Se=function(e){function t(r,n,o){var i=this,a=n?r+": "+n:r;return i=e.call(this,a)||this,Object.setPrototypeOf(i,t.prototype),i.errorCode=r||j.EMPTY_STRING,i.errorMessage=n||"",i.subError=o||"",i.name="AuthError",i}return D(t,e),t.prototype.setCorrelationId=function(e){this.correlationId=e},t.createUnexpectedError=function(e){return new t(we.code,we.desc+": "+e)},t}(Error),Te={createNewGuid:function(){throw Se.createUnexpectedError("Crypto interface - createNewGuid() has not been implemented")},base64Decode:function(){throw Se.createUnexpectedError("Crypto interface - base64Decode() has not been implemented")},base64Encode:function(){throw Se.createUnexpectedError("Crypto interface - base64Encode() has not been implemented")},generatePkceCodes:function(){return H(this,void 0,void 0,(function(){return q(this,(function(e){throw"Crypto interface - generatePkceCodes() has not been implemented",Se.createUnexpectedError("Crypto interface - generatePkceCodes() has not been implemented")}))}))},getPublicKeyThumbprint:function(){return H(this,void 0,void 0,(function(){return q(this,(function(e){throw"Crypto interface - getPublicKeyThumbprint() has not been implemented",Se.createUnexpectedError("Crypto interface - getPublicKeyThumbprint() has not been implemented")}))}))},removeTokenBindingKey:function(){return H(this,void 0,void 0,(function(){return q(this,(function(e){throw"Crypto interface - removeTokenBindingKey() has not been implemented",Se.createUnexpectedError("Crypto interface - removeTokenBindingKey() has not been implemented")}))}))},clearKeystore:function(){return H(this,void 0,void 0,(function(){return q(this,(function(e){throw"Crypto interface - clearKeystore() has not been implemented",Se.createUnexpectedError("Crypto interface - clearKeystore() has not been implemented")}))}))},signJwt:function(){return H(this,void 0,void 0,(function(){return q(this,(function(e){throw"Crypto interface - signJwt() has not been implemented",Se.createUnexpectedError("Crypto interface - signJwt() has not been implemented")}))}))},hashString:function(){return H(this,void 0,void 0,(function(){return q(this,(function(e){throw"Crypto interface - hashString() has not been implemented",Se.createUnexpectedError("Crypto interface - hashString() has not been implemented")}))}))}},Ae={code:"client_info_decoding_error",desc:"The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause."},Ie={code:"client_info_empty_error",desc:"The client info was empty. Please review the trace to determine the root cause."},_e={code:"token_parsing_error",desc:"Token cannot be parsed. Please review stack trace to determine root cause."},be={code:"null_or_empty_token",desc:"The token is null or empty. Please review the trace to determine the root cause."},Re={code:"endpoints_resolution_error",desc:"Error: could not resolve endpoints. Please check network and try again."},Oe={code:"network_error",desc:"Network request failed. Please check network trace to determine root cause."},ke={code:"openid_config_error",desc:"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints."},Ne={code:"hash_not_deserialized",desc:"The hash parameters could not be deserialized. Please review the trace to determine the root cause."},Pe={code:"invalid_state",desc:"State was not the expected format. Please check the logs to determine whether the request was sent using ProtocolUtils.setRequestState()."},Ue={code:"state_mismatch",desc:"State mismatch error. Please check your network. Continued requests may cause cache overflow."},Me={code:"state_not_found",desc:"State not found"},De={code:"nonce_mismatch",desc:"Nonce mismatch error. This may be caused by a race condition in concurrent requests."},Le={code:"nonce_not_found",desc:"nonce not found"},He={code:"multiple_matching_tokens",desc:"The cache contains multiple tokens satisfying the requirements. Call AcquireToken again providing more requirements such as authority or account."},qe={code:"multiple_matching_accounts",desc:"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account"},Fe={code:"multiple_matching_appMetadata",desc:"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata"},Ke={code:"request_cannot_be_made",desc:"Token request cannot be made without authorization code or refresh token."},xe={code:"cannot_append_empty_scope",desc:"Cannot append null or empty scope to ScopeSet. Please check the stack trace for more info."},Be={code:"cannot_remove_empty_scope",desc:"Cannot remove null or empty scope from ScopeSet. Please check the stack trace for more info."},Ge={code:"cannot_append_scopeset",desc:"Cannot append ScopeSet due to error."},Xe={code:"empty_input_scopeset",desc:"Empty input ScopeSet cannot be processed."},je={code:"device_code_polling_cancelled",desc:"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true."},ze={code:"device_code_expired",desc:"Device code is expired."},We={code:"device_code_unknown_error",desc:"Device code stopped polling for unknown reasons."},Ye={code:"no_account_in_silent_request",desc:"Please pass an account object, silent flow is not supported without account information"},Qe={code:"invalid_cache_record",desc:"Cache record object was null or undefined."},Je={code:"invalid_cache_environment",desc:"Invalid environment when attempting to create cache entry"},Ve={code:"no_account_found",desc:"No account found in cache for given key."},$e={code:"no cache plugin set on CacheManager",desc:"ICachePlugin needs to be set before using readFromStorage or writeFromStorage"},Ze={code:"no_crypto_object",desc:"No crypto object detected. This is required for the following operation: "},et={code:"invalid_cache_type",desc:"Invalid cache type"},tt={code:"unexpected_account_type",desc:"Unexpected account type."},rt={code:"unexpected_credential_type",desc:"Unexpected credential type."},nt={code:"invalid_assertion",desc:"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515"},ot={code:"invalid_client_credential",desc:"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential"},it={code:"token_refresh_required",desc:"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired."},at={code:"user_timeout_reached",desc:"User defined timeout for device code polling reached"},st={code:"token_claims_cnf_required_for_signedjwt",desc:"Cannot generate a POP jwt if the token_claims are not populated"},ct={code:"authorization_code_missing_from_server_response",desc:"Server response does not contain an authorization code to proceed"},ut={code:"binding_key_not_removed",desc:"Could not remove the credential's binding key from storage."},dt={code:"end_session_endpoint_not_supported",desc:"Provided authority does not support logout."},lt=function(e){function t(r,n){var o=e.call(this,r,n)||this;return o.name="ClientAuthError",Object.setPrototypeOf(o,t.prototype),o}return D(t,e),t.createClientInfoDecodingError=function(e){return new t(Ae.code,Ae.desc+" Failed with error: "+e)},t.createClientInfoEmptyError=function(){return new t(Ie.code,""+Ie.desc)},t.createTokenParsingError=function(e){return new t(_e.code,_e.desc+" Failed with error: "+e)},t.createTokenNullOrEmptyError=function(e){return new t(be.code,be.desc+" Raw Token Value: "+e)},t.createEndpointDiscoveryIncompleteError=function(e){return new t(Re.code,Re.desc+" Detail: "+e)},t.createNetworkError=function(e,r){return new t(Oe.code,Oe.desc+" | Fetch client threw: "+r+" | Attempted to reach: "+e.split("?")[0])},t.createUnableToGetOpenidConfigError=function(e){return new t(ke.code,ke.desc+" Attempted to retrieve endpoints from: "+e)},t.createHashNotDeserializedError=function(e){return new t(Ne.code,Ne.desc+" Given Object: "+e)},t.createInvalidStateError=function(e,r){return new t(Pe.code,Pe.desc+" Invalid State: "+e+", Root Err: "+r)},t.createStateMismatchError=function(){return new t(Ue.code,Ue.desc)},t.createStateNotFoundError=function(e){return new t(Me.code,Me.desc+":  "+e)},t.createNonceMismatchError=function(){return new t(De.code,De.desc)},t.createNonceNotFoundError=function(e){return new t(Le.code,Le.desc+":  "+e)},t.createMultipleMatchingTokensInCacheError=function(){return new t(He.code,He.desc+".")},t.createMultipleMatchingAccountsInCacheError=function(){return new t(qe.code,qe.desc)},t.createMultipleMatchingAppMetadataInCacheError=function(){return new t(Fe.code,Fe.desc)},t.createTokenRequestCannotBeMadeError=function(){return new t(Ke.code,Ke.desc)},t.createAppendEmptyScopeToSetError=function(e){return new t(xe.code,xe.desc+" Given Scope: "+e)},t.createRemoveEmptyScopeFromSetError=function(e){return new t(Be.code,Be.desc+" Given Scope: "+e)},t.createAppendScopeSetError=function(e){return new t(Ge.code,Ge.desc+" Detail Error: "+e)},t.createEmptyInputScopeSetError=function(){return new t(Xe.code,""+Xe.desc)},t.createDeviceCodeCancelledError=function(){return new t(je.code,""+je.desc)},t.createDeviceCodeExpiredError=function(){return new t(ze.code,""+ze.desc)},t.createDeviceCodeUnknownError=function(){return new t(We.code,""+We.desc)},t.createNoAccountInSilentRequestError=function(){return new t(Ye.code,""+Ye.desc)},t.createNullOrUndefinedCacheRecord=function(){return new t(Qe.code,Qe.desc)},t.createInvalidCacheEnvironmentError=function(){return new t(Je.code,Je.desc)},t.createNoAccountFoundError=function(){return new t(Ve.code,Ve.desc)},t.createCachePluginError=function(){return new t($e.code,""+$e.desc)},t.createNoCryptoObjectError=function(e){return new t(Ze.code,""+Ze.desc+e)},t.createInvalidCacheTypeError=function(){return new t(et.code,""+et.desc)},t.createUnexpectedAccountTypeError=function(){return new t(tt.code,""+tt.desc)},t.createUnexpectedCredentialTypeError=function(){return new t(rt.code,""+rt.desc)},t.createInvalidAssertionError=function(){return new t(nt.code,""+nt.desc)},t.createInvalidCredentialError=function(){return new t(ot.code,""+ot.desc)},t.createRefreshRequiredError=function(){return new t(it.code,it.desc)},t.createUserTimeoutReachedError=function(){return new t(at.code,at.desc)},t.createTokenClaimsRequiredError=function(){return new t(st.code,st.desc)},t.createNoAuthCodeInServerResponseError=function(){return new t(ct.code,ct.desc)},t.createBindingKeyNotRemovedError=function(){return new t(ut.code,ut.desc)},t.createLogoutNotSupportedError=function(){return new t(dt.code,dt.desc)},t}(Se),ht=function(){function e(){}return e.decodeAuthToken=function(t){if(e.isEmpty(t))throw lt.createTokenNullOrEmptyError(t);var r=/^([^\.\s]*)\.([^\.\s]+)\.([^\.\s]*)$/.exec(t);if(!r||r.length<4)throw lt.createTokenParsingError("Given token is malformed: "+JSON.stringify(t));return{header:r[1],JWSPayload:r[2],JWSSig:r[3]}},e.isEmpty=function(e){return void 0===e||!e||0===e.length},e.isEmptyObj=function(t){if(t&&!e.isEmpty(t))try{var r=JSON.parse(t);return 0===Object.keys(r).length}catch(e){}return!0},e.startsWith=function(e,t){return 0===e.indexOf(t)},e.endsWith=function(e,t){return e.length>=t.length&&e.lastIndexOf(t)===e.length-t.length},e.queryStringToObject=function(e){var t={},r=e.split("&"),n=function(e){return decodeURIComponent(e.replace(/\+/g," "))};return r.forEach((function(e){if(e.trim()){var r=e.split(/=(.+)/g,2),o=r[0],i=r[1];o&&i&&(t[n(o)]=n(i))}})),t},e.trimArrayEntries=function(e){return e.map((function(e){return e.trim()}))},e.removeEmptyStringsFromArray=function(t){return t.filter((function(t){return!e.isEmpty(t)}))},e.jsonParseHelper=function(e){try{return JSON.parse(e)}catch(e){return null}},e.matchPattern=function(e,t){return new RegExp(e.replace(/\\/g,"\\\\").replace(/\*/g,"[^ ]*").replace(/\?/g,"\\?")).test(t)},e}();!function(e){e[e.Error=0]="Error",e[e.Warning=1]="Warning",e[e.Info=2]="Info",e[e.Verbose=3]="Verbose",e[e.Trace=4]="Trace"}(Ce||(Ce={}));var pt,gt=function(){function e(e,t,r){this.level=Ce.Info;this.localCallback=e.loggerCallback||function(){},this.piiLoggingEnabled=e.piiLoggingEnabled||!1,this.level="number"==typeof e.logLevel?e.logLevel:Ce.Info,this.correlationId=e.correlationId||"",this.packageName=t||j.EMPTY_STRING,this.packageVersion=r||j.EMPTY_STRING}return e.prototype.clone=function(t,r,n){return new e({loggerCallback:this.localCallback,piiLoggingEnabled:this.piiLoggingEnabled,logLevel:this.level,correlationId:n||this.correlationId},t,r)},e.prototype.logMessage=function(e,t){if(!(t.logLevel>this.level||!this.piiLoggingEnabled&&t.containsPii)){var r=(new Date).toUTCString(),n=(ht.isEmpty(t.correlationId)?ht.isEmpty(this.correlationId)?"["+r+"]":"["+r+"] : ["+this.correlationId+"]":"["+r+"] : ["+t.correlationId+"]")+" : "+this.packageName+"@"+this.packageVersion+" : "+Ce[t.logLevel]+" - "+e;this.executeCallback(t.logLevel,n,t.containsPii||!1)}},e.prototype.executeCallback=function(e,t,r){this.localCallback&&this.localCallback(e,t,r)},e.prototype.error=function(e,t){this.logMessage(e,{logLevel:Ce.Error,containsPii:!1,correlationId:t||""})},e.prototype.errorPii=function(e,t){this.logMessage(e,{logLevel:Ce.Error,containsPii:!0,correlationId:t||""})},e.prototype.warning=function(e,t){this.logMessage(e,{logLevel:Ce.Warning,containsPii:!1,correlationId:t||""})},e.prototype.warningPii=function(e,t){this.logMessage(e,{logLevel:Ce.Warning,containsPii:!0,correlationId:t||""})},e.prototype.info=function(e,t){this.logMessage(e,{logLevel:Ce.Info,containsPii:!1,correlationId:t||""})},e.prototype.infoPii=function(e,t){this.logMessage(e,{logLevel:Ce.Info,containsPii:!0,correlationId:t||""})},e.prototype.verbose=function(e,t){this.logMessage(e,{logLevel:Ce.Verbose,containsPii:!1,correlationId:t||""})},e.prototype.verbosePii=function(e,t){this.logMessage(e,{logLevel:Ce.Verbose,containsPii:!0,correlationId:t||""})},e.prototype.trace=function(e,t){this.logMessage(e,{logLevel:Ce.Trace,containsPii:!1,correlationId:t||""})},e.prototype.tracePii=function(e,t){this.logMessage(e,{logLevel:Ce.Trace,containsPii:!0,correlationId:t||""})},e.prototype.isPiiLoggingEnabled=function(){return this.piiLoggingEnabled||!1},e}();
/*! @azure/msal-common v6.1.0 2022-02-08 */!function(e){e[e.None=0]="None",e.AzurePublic="https://login.microsoftonline.com",e.AzureChina="https://login.chinacloudapi.cn",e.AzureGermany="https://login.microsoftonline.de",e.AzureUsGovernment="https://login.microsoftonline.us"}(pt||(pt={}));
/*! @azure/msal-common v6.1.0 2022-02-08 */
var ft,mt=function(){function e(){}return e.prototype.generateAccountId=function(){return e.generateAccountIdForCacheKey(this.homeAccountId,this.environment)},e.prototype.generateCredentialId=function(){return e.generateCredentialIdForCacheKey(this.credentialType,this.clientId,this.realm,this.familyId)},e.prototype.generateTarget=function(){return e.generateTargetForCacheKey(this.target)},e.prototype.generateCredentialKey=function(){return e.generateCredentialCacheKey(this.homeAccountId,this.environment,this.credentialType,this.clientId,this.realm,this.target,this.familyId,this.tokenType,this.requestedClaimsHash)},e.prototype.generateType=function(){switch(this.credentialType){case ee.ID_TOKEN:return re.ID_TOKEN;case ee.ACCESS_TOKEN:case ee.ACCESS_TOKEN_WITH_AUTH_SCHEME:return re.ACCESS_TOKEN;case ee.REFRESH_TOKEN:return re.REFRESH_TOKEN;default:throw lt.createUnexpectedCredentialTypeError()}},e.getCredentialType=function(e){return-1!==e.indexOf(ee.ACCESS_TOKEN.toLowerCase())?-1!==e.indexOf(ee.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase())?ee.ACCESS_TOKEN_WITH_AUTH_SCHEME:ee.ACCESS_TOKEN:-1!==e.indexOf(ee.ID_TOKEN.toLowerCase())?ee.ID_TOKEN:-1!==e.indexOf(ee.REFRESH_TOKEN.toLowerCase())?ee.REFRESH_TOKEN:j.NOT_DEFINED},e.generateCredentialCacheKey=function(e,t,r,n,o,i,a,s,c){return[this.generateAccountIdForCacheKey(e,t),this.generateCredentialIdForCacheKey(r,n,o,a),this.generateTargetForCacheKey(i),this.generateClaimsHashForCacheKey(c),this.generateSchemeForCacheKey(s)].join(Z.CACHE_KEY_SEPARATOR).toLowerCase()},e.generateAccountIdForCacheKey=function(e,t){return[e,t].join(Z.CACHE_KEY_SEPARATOR).toLowerCase()},e.generateCredentialIdForCacheKey=function(e,t,r,n){return[e,e===ee.REFRESH_TOKEN&&n||t,r||""].join(Z.CACHE_KEY_SEPARATOR).toLowerCase()},e.generateTargetForCacheKey=function(e){return(e||"").toLowerCase()},e.generateClaimsHashForCacheKey=function(e){return(e||"").toLowerCase()},e.generateSchemeForCacheKey=function(e){return e&&e.toLowerCase()!==se.BEARER.toLowerCase()?e.toLowerCase():""},e}(),yt={code:"redirect_uri_empty",desc:"A redirect URI is required for all calls, and none has been set."},vt={code:"post_logout_uri_empty",desc:"A post logout redirect has not been set."},Et={code:"claims_request_parsing_error",desc:"Could not parse the given claims request object."},Ct={code:"authority_uri_insecure",desc:"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options"},wt={code:"url_parse_error",desc:"URL could not be parsed into appropriate segments."},St={code:"empty_url_error",desc:"URL was empty or null."},Tt={code:"empty_input_scopes_error",desc:"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token."},At={code:"clientid_input_scopes_error",desc:"Client ID can only be provided as a single scope."},It={code:"invalid_prompt_value",desc:"Supported prompt values are 'login', 'select_account', 'consent', 'create' and 'none'.  Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest"},_t={code:"invalid_claims",desc:"Given claims parameter must be a stringified JSON object."},bt={code:"token_request_empty",desc:"Token request was empty and not found in cache."},Rt={code:"logout_request_empty",desc:"The logout request was null or undefined."},Ot={code:"invalid_code_challenge_method",desc:'code_challenge_method passed is invalid. Valid values are "plain" and "S256".'},kt={code:"pkce_params_missing",desc:"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request"},Nt={code:"invalid_cloud_discovery_metadata",desc:"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields"},Pt={code:"invalid_authority_metadata",desc:"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields."},Ut={code:"untrusted_authority",desc:"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter."},Mt={code:"invalid_azure_cloud_instance",desc:"Invalid AzureCloudInstance provided. Please refer MSAL JS docs: aks.ms/msaljs/azure_cloud_instance for valid values"},Dt={code:"missing_ssh_jwk",desc:"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme."},Lt={code:"missing_ssh_kid",desc:"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme."},Ht={code:"missing_nonce_authentication_header",desc:"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce."},qt={code:"invalid_authentication_header",desc:"Invalid authentication header provided"},Ft=function(e){function t(r,n){var o=e.call(this,r,n)||this;return o.name="ClientConfigurationError",Object.setPrototypeOf(o,t.prototype),o}return D(t,e),t.createRedirectUriEmptyError=function(){return new t(yt.code,yt.desc)},t.createPostLogoutRedirectUriEmptyError=function(){return new t(vt.code,vt.desc)},t.createClaimsRequestParsingError=function(e){return new t(Et.code,Et.desc+" Given value: "+e)},t.createInsecureAuthorityUriError=function(e){return new t(Ct.code,Ct.desc+" Given URI: "+e)},t.createUrlParseError=function(e){return new t(wt.code,wt.desc+" Given Error: "+e)},t.createUrlEmptyError=function(){return new t(St.code,St.desc)},t.createEmptyScopesArrayError=function(){return new t(Tt.code,""+Tt.desc)},t.createClientIdSingleScopeError=function(e){return new t(At.code,At.desc+" Given Scopes: "+e)},t.createInvalidPromptError=function(e){return new t(It.code,It.desc+" Given value: "+e)},t.createInvalidClaimsRequestError=function(){return new t(_t.code,_t.desc)},t.createEmptyLogoutRequestError=function(){return new t(Rt.code,Rt.desc)},t.createEmptyTokenRequestError=function(){return new t(bt.code,bt.desc)},t.createInvalidCodeChallengeMethodError=function(){return new t(Ot.code,Ot.desc)},t.createInvalidCodeChallengeParamsError=function(){return new t(kt.code,kt.desc)},t.createInvalidCloudDiscoveryMetadataError=function(){return new t(Nt.code,Nt.desc)},t.createInvalidAuthorityMetadataError=function(){return new t(Pt.code,Pt.desc)},t.createUntrustedAuthorityError=function(){return new t(Ut.code,Ut.desc)},t.createInvalidAzureCloudInstanceError=function(){return new t(Mt.code,Mt.desc)},t.createMissingSshJwkError=function(){return new t(Dt.code,Dt.desc)},t.createMissingSshKidError=function(){return new t(Lt.code,Lt.desc)},t.createMissingNonceAuthenticationHeadersError=function(){return new t(Ht.code,Ht.desc)},t.createInvalidAuthenticationHeaderError=function(e,r){return new t(qt.code,qt.desc+". Invalid header: "+e+". Details: "+r)},t}(lt),Kt=function(){function e(e){var t=this,r=e?ht.trimArrayEntries(F(e)):[],n=r?ht.removeEmptyStringsFromArray(r):[];this.validateInputScopes(n),this.scopes=new Set,n.forEach((function(e){return t.scopes.add(e)}))}return e.fromString=function(t){return new e((t||"").split(" "))},e.prototype.validateInputScopes=function(e){if(!e||e.length<1)throw Ft.createEmptyScopesArrayError()},e.prototype.containsScope=function(t){var r=new e(this.printScopesLowerCase().split(" "));return!ht.isEmpty(t)&&r.scopes.has(t.toLowerCase())},e.prototype.containsScopeSet=function(e){var t=this;return!(!e||e.scopes.size<=0)&&(this.scopes.size>=e.scopes.size&&e.asArray().every((function(e){return t.containsScope(e)})))},e.prototype.containsOnlyOIDCScopes=function(){var e=this,t=0;return W.forEach((function(r){e.containsScope(r)&&(t+=1)})),this.scopes.size===t},e.prototype.appendScope=function(e){ht.isEmpty(e)||this.scopes.add(e.trim())},e.prototype.appendScopes=function(e){var t=this;try{e.forEach((function(e){return t.appendScope(e)}))}catch(e){throw lt.createAppendScopeSetError(e)}},e.prototype.removeScope=function(e){if(ht.isEmpty(e))throw lt.createRemoveEmptyScopeFromSetError(e);this.scopes.delete(e.trim())},e.prototype.removeOIDCScopes=function(){var e=this;W.forEach((function(t){e.scopes.delete(t)}))},e.prototype.unionScopeSets=function(e){if(!e)throw lt.createEmptyInputScopeSetError();var t=new Set;return e.scopes.forEach((function(e){return t.add(e.toLowerCase())})),this.scopes.forEach((function(e){return t.add(e.toLowerCase())})),t},e.prototype.intersectingScopeSets=function(e){if(!e)throw lt.createEmptyInputScopeSetError();e.containsOnlyOIDCScopes()||e.removeOIDCScopes();var t=this.unionScopeSets(e),r=e.getScopeCount(),n=this.getScopeCount();return t.size<n+r},e.prototype.getScopeCount=function(){return this.scopes.size},e.prototype.asArray=function(){var e=[];return this.scopes.forEach((function(t){return e.push(t)})),e},e.prototype.printScopes=function(){return this.scopes?this.asArray().join(" "):""},e.prototype.printScopesLowerCase=function(){return this.printScopes().toLowerCase()},e}();
/*! @azure/msal-common v6.1.0 2022-02-08 */
/*! @azure/msal-common v6.1.0 2022-02-08 */
function xt(e,t){if(ht.isEmpty(e))throw lt.createClientInfoEmptyError();try{var r=t.base64Decode(e);return JSON.parse(r)}catch(e){throw lt.createClientInfoDecodingError(e)}}function Bt(e){if(ht.isEmpty(e))throw lt.createClientInfoDecodingError("Home account ID was empty.");var t=e.split(Z.CLIENT_INFO_SEPARATOR,2);return{uid:t[0],utid:t.length<2?j.EMPTY_STRING:t[1]}}
/*! @azure/msal-common v6.1.0 2022-02-08 */!function(e){e[e.Default=0]="Default",e[e.Adfs=1]="Adfs"}(ft||(ft={}));
/*! @azure/msal-common v6.1.0 2022-02-08 */
var Gt=function(){function e(){}return e.prototype.generateAccountId=function(){return[this.homeAccountId,this.environment].join(Z.CACHE_KEY_SEPARATOR).toLowerCase()},e.prototype.generateAccountKey=function(){return e.generateAccountCacheKey({homeAccountId:this.homeAccountId,environment:this.environment,tenantId:this.realm,username:this.username,localAccountId:this.localAccountId})},e.prototype.generateType=function(){switch(this.authorityType){case $.ADFS_ACCOUNT_TYPE:return re.ADFS;case $.MSAV1_ACCOUNT_TYPE:return re.MSA;case $.MSSTS_ACCOUNT_TYPE:return re.MSSTS;case $.GENERIC_ACCOUNT_TYPE:return re.GENERIC;default:throw lt.createUnexpectedAccountTypeError()}},e.prototype.getAccountInfo=function(){return{homeAccountId:this.homeAccountId,environment:this.environment,tenantId:this.realm,username:this.username,localAccountId:this.localAccountId,name:this.name,idTokenClaims:this.idTokenClaims}},e.generateAccountCacheKey=function(e){return[e.homeAccountId,e.environment||"",e.tenantId||""].join(Z.CACHE_KEY_SEPARATOR).toLowerCase()},e.createAccount=function(t,r,n,o,i,a,s,c){var u,d,l,h,p,g,f=new e;f.authorityType=$.MSSTS_ACCOUNT_TYPE,f.clientInfo=t,f.homeAccountId=r;var m=c||o&&o.getPreferredCache();if(!m)throw lt.createInvalidCacheEnvironmentError();return f.environment=m,f.realm=(null===(u=null==n?void 0:n.claims)||void 0===u?void 0:u.tid)||"",f.oboAssertion=i,n&&(f.idTokenClaims=n.claims,f.localAccountId=(null===(d=null==n?void 0:n.claims)||void 0===d?void 0:d.oid)||(null===(l=null==n?void 0:n.claims)||void 0===l?void 0:l.sub)||"",f.username=(null===(h=null==n?void 0:n.claims)||void 0===h?void 0:h.preferred_username)||((null===(p=null==n?void 0:n.claims)||void 0===p?void 0:p.emails)?n.claims.emails[0]:""),f.name=null===(g=null==n?void 0:n.claims)||void 0===g?void 0:g.name),f.cloudGraphHostName=a,f.msGraphHost=s,f},e.createGenericAccount=function(t,r,n,o,i,a,s){var c,u,d,l,h=new e;h.authorityType=n&&n.authorityType===ft.Adfs?$.ADFS_ACCOUNT_TYPE:$.GENERIC_ACCOUNT_TYPE,h.homeAccountId=t,h.realm="",h.oboAssertion=o;var p=s||n&&n.getPreferredCache();if(!p)throw lt.createInvalidCacheEnvironmentError();return r&&(h.localAccountId=(null===(c=null==r?void 0:r.claims)||void 0===c?void 0:c.oid)||(null===(u=null==r?void 0:r.claims)||void 0===u?void 0:u.sub)||"",h.username=(null===(d=null==r?void 0:r.claims)||void 0===d?void 0:d.upn)||"",h.name=(null===(l=null==r?void 0:r.claims)||void 0===l?void 0:l.name)||"",h.idTokenClaims=null==r?void 0:r.claims),h.environment=p,h.cloudGraphHostName=i,h.msGraphHost=a,h},e.generateHomeAccountId=function(e,t,r,n,o){var i,a=(null===(i=null==o?void 0:o.claims)||void 0===i?void 0:i.sub)?o.claims.sub:j.EMPTY_STRING;if(t===ft.Adfs)return a;if(e)try{var s=xt(e,n);if(!ht.isEmpty(s.uid)&&!ht.isEmpty(s.utid))return""+s.uid+Z.CLIENT_INFO_SEPARATOR+s.utid}catch(e){}return r.verbose("No client info in response"),a},e.isAccountEntity=function(e){return!!e&&(e.hasOwnProperty("homeAccountId")&&e.hasOwnProperty("environment")&&e.hasOwnProperty("realm")&&e.hasOwnProperty("localAccountId")&&e.hasOwnProperty("username")&&e.hasOwnProperty("authorityType"))},e.accountInfoIsEqual=function(e,t,r){if(!e||!t)return!1;var n=!0;if(r){var o=e.idTokenClaims||{},i=t.idTokenClaims||{};n=o.iat===i.iat&&o.nonce===i.nonce}return e.homeAccountId===t.homeAccountId&&e.localAccountId===t.localAccountId&&e.username===t.username&&e.tenantId===t.tenantId&&e.environment===t.environment&&n},e}(),Xt=function(){function e(t,r){if(ht.isEmpty(t))throw lt.createTokenNullOrEmptyError(t);this.rawToken=t,this.claims=e.extractTokenClaims(t,r)}return e.extractTokenClaims=function(e,t){var r=ht.decodeAuthToken(e);try{var n=r.JWSPayload,o=t.base64Decode(n);return JSON.parse(o)}catch(e){throw lt.createTokenParsingError(e)}},e}(),jt=function(){function e(e,t){this.clientId=e,this.cryptoImpl=t}return e.prototype.getAllAccounts=function(){var t=this,r=this.getAccountsFilteredBy(),n=Object.keys(r).map((function(e){return r[e]}));return n.length<1?[]:n.map((function(r){var n=e.toObject(new Gt,r).getAccountInfo(),o=t.readIdTokenFromCache(t.clientId,n);return o&&!n.idTokenClaims&&(n.idTokenClaims=new Xt(o.secret,t.cryptoImpl).claims),n}))},e.prototype.saveCacheRecord=function(e){return H(this,void 0,void 0,(function(){return q(this,(function(t){switch(t.label){case 0:if(!e)throw lt.createNullOrUndefinedCacheRecord();return e.account&&this.setAccount(e.account),e.idToken&&this.setIdTokenCredential(e.idToken),e.accessToken?[4,this.saveAccessToken(e.accessToken)]:[3,2];case 1:t.sent(),t.label=2;case 2:return e.refreshToken&&this.setRefreshTokenCredential(e.refreshToken),e.appMetadata&&this.setAppMetadata(e.appMetadata),[2]}}))}))},e.prototype.saveAccessToken=function(e){return H(this,void 0,void 0,(function(){var t,r,n,o,i=this;return q(this,(function(a){switch(a.label){case 0:return t=this.getCredentialsFilteredBy({clientId:e.clientId,credentialType:e.credentialType,environment:e.environment,homeAccountId:e.homeAccountId,realm:e.realm,tokenType:e.tokenType,requestedClaimsHash:e.requestedClaimsHash}),r=Kt.fromString(e.target),(n=Object.keys(t.accessTokens).map((function(e){return t.accessTokens[e]})))?(o=[],n.forEach((function(e){Kt.fromString(e.target).intersectingScopeSets(r)&&o.push(i.removeCredential(e))})),[4,Promise.all(o)]):[3,2];case 1:a.sent(),a.label=2;case 2:return this.setAccessTokenCredential(e),[2]}}))}))},e.prototype.getAccountsFilteredBy=function(e){return this.getAccountsFilteredByInternal(e?e.homeAccountId:"",e?e.environment:"",e?e.realm:"")},e.prototype.getAccountsFilteredByInternal=function(e,t,r){var n=this,o=this.getKeys(),i={};return o.forEach((function(o){var a=n.getAccount(o);a&&(e&&!n.matchHomeAccountId(a,e)||t&&!n.matchEnvironment(a,t)||r&&!n.matchRealm(a,r)||(i[o]=a))})),i},e.prototype.getCredentialsFilteredBy=function(e){return this.getCredentialsFilteredByInternal(e.homeAccountId,e.environment,e.credentialType,e.clientId,e.familyId,e.realm,e.target,e.oboAssertion,e.tokenType,e.keyId,e.requestedClaimsHash)},e.prototype.getCredentialsFilteredByInternal=function(e,t,r,n,o,i,a,s,c,u,d){var l=this,h=this.getKeys(),p={idTokens:{},accessTokens:{},refreshTokens:{}};return h.forEach((function(h){var g=mt.getCredentialType(h);if(g!==j.NOT_DEFINED){var f=l.getSpecificCredential(h,g);if(f&&(!s||l.matchOboAssertion(f,s))&&(!e||l.matchHomeAccountId(f,e))&&(!t||l.matchEnvironment(f,t))&&(!i||l.matchRealm(f,i))&&(!r||l.matchCredentialType(f,r))&&(!n||l.matchClientId(f,n))&&(!o||l.matchFamilyId(f,o))&&(!a||l.matchTarget(f,a))&&(!d&&!f.requestedClaimsHash||f.requestedClaimsHash===d)){if(r===ee.ACCESS_TOKEN_WITH_AUTH_SCHEME){if(c&&!l.matchTokenType(f,c))return;if(c===se.SSH&&u&&!l.matchKeyId(f,u))return}var m=l.updateCredentialCacheKey(h,f);switch(g){case ee.ID_TOKEN:p.idTokens[m]=f;break;case ee.ACCESS_TOKEN:case ee.ACCESS_TOKEN_WITH_AUTH_SCHEME:p.accessTokens[m]=f;break;case ee.REFRESH_TOKEN:p.refreshTokens[m]=f}}}})),p},e.prototype.getAppMetadataFilteredBy=function(e){return this.getAppMetadataFilteredByInternal(e.environment,e.clientId)},e.prototype.getAppMetadataFilteredByInternal=function(e,t){var r=this,n=this.getKeys(),o={};return n.forEach((function(n){if(r.isAppMetadata(n)){var i=r.getAppMetadata(n);i&&(e&&!r.matchEnvironment(i,e)||t&&!r.matchClientId(i,t)||(o[n]=i))}})),o},e.prototype.getAuthorityMetadataByAlias=function(e){var t=this,r=this.getAuthorityMetadataKeys(),n=null;return r.forEach((function(r){if(t.isAuthorityMetadata(r)&&-1!==r.indexOf(t.clientId)){var o=t.getAuthorityMetadata(r);o&&-1!==o.aliases.indexOf(e)&&(n=o)}})),n},e.prototype.removeAllAccounts=function(){return H(this,void 0,void 0,(function(){var e,t,r=this;return q(this,(function(n){switch(n.label){case 0:return e=this.getKeys(),t=[],e.forEach((function(e){r.getAccount(e)&&t.push(r.removeAccount(e))})),[4,Promise.all(t)];case 1:return n.sent(),[2,!0]}}))}))},e.prototype.removeAccount=function(e){return H(this,void 0,void 0,(function(){var t;return q(this,(function(r){switch(r.label){case 0:if(!(t=this.getAccount(e)))throw lt.createNoAccountFoundError();return[4,this.removeAccountContext(t)];case 1:return[2,r.sent()&&this.removeItem(e,te.ACCOUNT)]}}))}))},e.prototype.removeAccountContext=function(e){return H(this,void 0,void 0,(function(){var t,r,n,o=this;return q(this,(function(i){switch(i.label){case 0:return t=this.getKeys(),r=e.generateAccountId(),n=[],t.forEach((function(e){var t=mt.getCredentialType(e);if(t!==j.NOT_DEFINED){var i=o.getSpecificCredential(e,t);i&&r===i.generateAccountId()&&n.push(o.removeCredential(i))}})),[4,Promise.all(n)];case 1:return i.sent(),[2,!0]}}))}))},e.prototype.removeCredential=function(e){return H(this,void 0,void 0,(function(){var t,r;return q(this,(function(n){switch(n.label){case 0:if(t=e.generateCredentialKey(),e.credentialType.toLowerCase()!==ee.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase())return[3,4];if(e.tokenType!==se.POP)return[3,4];if(!(r=e.keyId))return[3,4];n.label=1;case 1:return n.trys.push([1,3,,4]),[4,this.cryptoImpl.removeTokenBindingKey(r)];case 2:return n.sent(),[3,4];case 3:throw n.sent(),lt.createBindingKeyNotRemovedError();case 4:return[2,this.removeItem(t,te.CREDENTIAL)]}}))}))},e.prototype.removeAppMetadata=function(){var e=this;return this.getKeys().forEach((function(t){e.isAppMetadata(t)&&e.removeItem(t,te.APP_METADATA)})),!0},e.prototype.readCacheRecord=function(e,t,r,n){var o=this.readAccountFromCache(e),i=this.readIdTokenFromCache(t,e),a=this.readAccessTokenFromCache(t,e,r),s=this.readRefreshTokenFromCache(t,e,!1),c=this.readAppMetadataFromCache(n,t);return o&&i&&(o.idTokenClaims=new Xt(i.secret,this.cryptoImpl).claims),{account:o,idToken:i,accessToken:a,refreshToken:s,appMetadata:c}},e.prototype.readAccountFromCache=function(e){var t=Gt.generateAccountCacheKey(e);return this.getAccount(t)},e.prototype.readIdTokenFromCache=function(e,t){var r={homeAccountId:t.homeAccountId,environment:t.environment,credentialType:ee.ID_TOKEN,clientId:e,realm:t.tenantId},n=this.getCredentialsFilteredBy(r),o=Object.keys(n.idTokens).map((function(e){return n.idTokens[e]})),i=o.length;if(i<1)return null;if(i>1)throw lt.createMultipleMatchingTokensInCacheError();return o[0]},e.prototype.readAccessTokenFromCache=function(e,t,r){var n=new Kt(r.scopes||[]),o=r.authenticationScheme||se.BEARER,i=o&&o.toLowerCase()!==se.BEARER.toLowerCase()?ee.ACCESS_TOKEN_WITH_AUTH_SCHEME:ee.ACCESS_TOKEN,a={homeAccountId:t.homeAccountId,environment:t.environment,credentialType:i,clientId:e,realm:t.tenantId,target:n.printScopesLowerCase(),tokenType:o,keyId:r.sshKid,requestedClaimsHash:r.requestedClaimsHash},s=this.getCredentialsFilteredBy(a),c=Object.keys(s.accessTokens).map((function(e){return s.accessTokens[e]})),u=c.length;if(u<1)return null;if(u>1)throw lt.createMultipleMatchingTokensInCacheError();return c[0]},e.prototype.readRefreshTokenFromCache=function(e,t,r){var n=r?"1":void 0,o={homeAccountId:t.homeAccountId,environment:t.environment,credentialType:ee.REFRESH_TOKEN,clientId:e,familyId:n},i=this.getCredentialsFilteredBy(o),a=Object.keys(i.refreshTokens).map((function(e){return i.refreshTokens[e]}));return a.length<1?null:a[0]},e.prototype.readAppMetadataFromCache=function(e,t){var r={environment:e,clientId:t},n=this.getAppMetadataFilteredBy(r),o=Object.keys(n).map((function(e){return n[e]})),i=o.length;if(i<1)return null;if(i>1)throw lt.createMultipleMatchingAppMetadataInCacheError();return o[0]},e.prototype.isAppMetadataFOCI=function(e,t){var r=this.readAppMetadataFromCache(e,t);return!(!r||"1"!==r.familyId)},e.prototype.matchHomeAccountId=function(e,t){return!(!e.homeAccountId||t!==e.homeAccountId)},e.prototype.matchOboAssertion=function(e,t){return!(!e.oboAssertion||t!==e.oboAssertion)},e.prototype.matchEnvironment=function(e,t){var r=this.getAuthorityMetadataByAlias(t);return!!(r&&r.aliases.indexOf(e.environment)>-1)},e.prototype.matchCredentialType=function(e,t){return e.credentialType&&t.toLowerCase()===e.credentialType.toLowerCase()},e.prototype.matchClientId=function(e,t){return!(!e.clientId||t!==e.clientId)},e.prototype.matchFamilyId=function(e,t){return!(!e.familyId||t!==e.familyId)},e.prototype.matchRealm=function(e,t){return!(!e.realm||t!==e.realm)},e.prototype.matchTarget=function(e,t){if(e.credentialType!==ee.ACCESS_TOKEN&&e.credentialType!==ee.ACCESS_TOKEN_WITH_AUTH_SCHEME||!e.target)return!1;var r=Kt.fromString(e.target),n=Kt.fromString(t);return n.containsOnlyOIDCScopes()?n.removeScope(j.OFFLINE_ACCESS_SCOPE):n.removeOIDCScopes(),r.containsScopeSet(n)},e.prototype.matchTokenType=function(e,t){return!(!e.tokenType||e.tokenType!==t)},e.prototype.matchKeyId=function(e,t){return!(!e.keyId||e.keyId!==t)},e.prototype.isAppMetadata=function(e){return-1!==e.indexOf("appmetadata")},e.prototype.isAuthorityMetadata=function(e){return-1!==e.indexOf(ie)},e.prototype.generateAuthorityMetadataCacheKey=function(e){return ie+"-"+this.clientId+"-"+e},e.prototype.getSpecificCredential=function(e,t){switch(t){case ee.ID_TOKEN:return this.getIdTokenCredential(e);case ee.ACCESS_TOKEN:case ee.ACCESS_TOKEN_WITH_AUTH_SCHEME:return this.getAccessTokenCredential(e);case ee.REFRESH_TOKEN:return this.getRefreshTokenCredential(e);default:return null}},e.toObject=function(e,t){for(var r in t)e[r]=t[r];return e},e}(),zt=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return D(t,e),t.prototype.setAccount=function(){throw Se.createUnexpectedError("Storage interface - setAccount() has not been implemented for the cacheStorage interface.")},t.prototype.getAccount=function(){throw Se.createUnexpectedError("Storage interface - getAccount() has not been implemented for the cacheStorage interface.")},t.prototype.setIdTokenCredential=function(){throw Se.createUnexpectedError("Storage interface - setIdTokenCredential() has not been implemented for the cacheStorage interface.")},t.prototype.getIdTokenCredential=function(){throw Se.createUnexpectedError("Storage interface - getIdTokenCredential() has not been implemented for the cacheStorage interface.")},t.prototype.setAccessTokenCredential=function(){throw Se.createUnexpectedError("Storage interface - setAccessTokenCredential() has not been implemented for the cacheStorage interface.")},t.prototype.getAccessTokenCredential=function(){throw Se.createUnexpectedError("Storage interface - getAccessTokenCredential() has not been implemented for the cacheStorage interface.")},t.prototype.setRefreshTokenCredential=function(){throw Se.createUnexpectedError("Storage interface - setRefreshTokenCredential() has not been implemented for the cacheStorage interface.")},t.prototype.getRefreshTokenCredential=function(){throw Se.createUnexpectedError("Storage interface - getRefreshTokenCredential() has not been implemented for the cacheStorage interface.")},t.prototype.setAppMetadata=function(){throw Se.createUnexpectedError("Storage interface - setAppMetadata() has not been implemented for the cacheStorage interface.")},t.prototype.getAppMetadata=function(){throw Se.createUnexpectedError("Storage interface - getAppMetadata() has not been implemented for the cacheStorage interface.")},t.prototype.setServerTelemetry=function(){throw Se.createUnexpectedError("Storage interface - setServerTelemetry() has not been implemented for the cacheStorage interface.")},t.prototype.getServerTelemetry=function(){throw Se.createUnexpectedError("Storage interface - getServerTelemetry() has not been implemented for the cacheStorage interface.")},t.prototype.setAuthorityMetadata=function(){throw Se.createUnexpectedError("Storage interface - setAuthorityMetadata() has not been implemented for the cacheStorage interface.")},t.prototype.getAuthorityMetadata=function(){throw Se.createUnexpectedError("Storage interface - getAuthorityMetadata() has not been implemented for the cacheStorage interface.")},t.prototype.getAuthorityMetadataKeys=function(){throw Se.createUnexpectedError("Storage interface - getAuthorityMetadataKeys() has not been implemented for the cacheStorage interface.")},t.prototype.setThrottlingCache=function(){throw Se.createUnexpectedError("Storage interface - setThrottlingCache() has not been implemented for the cacheStorage interface.")},t.prototype.getThrottlingCache=function(){throw Se.createUnexpectedError("Storage interface - getThrottlingCache() has not been implemented for the cacheStorage interface.")},t.prototype.removeItem=function(){throw Se.createUnexpectedError("Storage interface - removeItem() has not been implemented for the cacheStorage interface.")},t.prototype.containsKey=function(){throw Se.createUnexpectedError("Storage interface - containsKey() has not been implemented for the cacheStorage interface.")},t.prototype.getKeys=function(){throw Se.createUnexpectedError("Storage interface - getKeys() has not been implemented for the cacheStorage interface.")},t.prototype.clear=function(){return H(this,void 0,void 0,(function(){return q(this,(function(e){throw"Storage interface - clear() has not been implemented for the cacheStorage interface.",Se.createUnexpectedError("Storage interface - clear() has not been implemented for the cacheStorage interface.")}))}))},t.prototype.updateCredentialCacheKey=function(){throw Se.createUnexpectedError("Storage interface - updateCredentialCacheKey() has not been implemented for the cacheStorage interface.")},t}(jt),Wt={tokenRenewalOffsetSeconds:300,preventCorsPreflight:!1,proxyUrl:""},Yt={loggerCallback:function(){},piiLoggingEnabled:!1,logLevel:Ce.Info,correlationId:""},Qt={sendGetRequestAsync:function(){return H(this,void 0,void 0,(function(){return q(this,(function(e){throw"Network interface - sendGetRequestAsync() has not been implemented",Se.createUnexpectedError("Network interface - sendGetRequestAsync() has not been implemented")}))}))},sendPostRequestAsync:function(){return H(this,void 0,void 0,(function(){return q(this,(function(e){throw"Network interface - sendPostRequestAsync() has not been implemented",Se.createUnexpectedError("Network interface - sendPostRequestAsync() has not been implemented")}))}))}},Jt={sku:j.SKU,version:"6.1.0",cpu:"",os:""},Vt={clientSecret:"",clientAssertion:void 0},$t={azureCloudInstance:pt.None,tenant:""+j.DEFAULT_COMMON_TENANT};
/*! @azure/msal-common v6.1.0 2022-02-08 */
/*! @azure/msal-common v6.1.0 2022-02-08 */
var Zt,er=function(e){function t(r,n,o){var i=e.call(this,r,n,o)||this;return i.name="ServerError",Object.setPrototypeOf(i,t.prototype),i}return D(t,e),t}(Se),tr=function(){function e(){}return e.generateThrottlingStorageKey=function(e){return me+"."+JSON.stringify(e)},e.preProcess=function(t,r){var n,o=e.generateThrottlingStorageKey(r),i=t.getThrottlingCache(o);if(i){if(i.throttleTime<Date.now())return void t.removeItem(o,te.THROTTLING);throw new er((null===(n=i.errorCodes)||void 0===n?void 0:n.join(" "))||j.EMPTY_STRING,i.errorMessage,i.subError)}},e.postProcess=function(t,r,n){if(e.checkResponseStatus(n)||e.checkResponseForRetryAfter(n)){var o={throttleTime:e.calculateThrottleTime(parseInt(n.headers[K.RETRY_AFTER])),error:n.body.error,errorCodes:n.body.error_codes,errorMessage:n.body.error_description,subError:n.body.suberror};t.setThrottlingCache(e.generateThrottlingStorageKey(r),o)}},e.checkResponseStatus=function(e){return 429===e.status||e.status>=500&&e.status<600},e.checkResponseForRetryAfter=function(e){return!!e.headers&&(e.headers.hasOwnProperty(K.RETRY_AFTER)&&(e.status<200||e.status>=300))},e.calculateThrottleTime=function(e){var t=e<=0?0:e,r=Date.now()/1e3;return Math.floor(1e3*Math.min(r+(t||ge),r+fe))},e.removeThrottle=function(e,t,r,n){var o={clientId:t,authority:r.authority,scopes:r.scopes,homeAccountIdentifier:n,claims:r.claims,authenticationScheme:r.authenticationScheme,resourceRequestMethod:r.resourceRequestMethod,resourceRequestUri:r.resourceRequestUri,shrClaims:r.shrClaims,sshKid:r.sshKid},i=this.generateThrottlingStorageKey(o);return e.removeItem(i,te.THROTTLING)},e}(),rr=function(){function e(e,t){this.networkClient=e,this.cacheManager=t}return e.prototype.sendPostRequest=function(e,t,r){return H(this,void 0,void 0,(function(){var n,o;return q(this,(function(i){switch(i.label){case 0:tr.preProcess(this.cacheManager,e),i.label=1;case 1:return i.trys.push([1,3,,4]),[4,this.networkClient.sendPostRequestAsync(t,r)];case 2:return n=i.sent(),[3,4];case 3:throw(o=i.sent())instanceof Se?o:lt.createNetworkError(t,o);case 4:return tr.postProcess(this.cacheManager,e,n),[2,n]}}))}))},e}();
/*! @azure/msal-common v6.1.0 2022-02-08 */!function(e){e.HOME_ACCOUNT_ID="home_account_id",e.UPN="UPN"}(Zt||(Zt={}));
/*! @azure/msal-common v6.1.0 2022-02-08 */
var nr,or=function(){function e(e){var t,r,n,o,i,a,s,c,u,d,l,h,p,g;this.config=(n=(t=e).authOptions,o=t.systemOptions,i=t.loggerOptions,a=t.storageInterface,s=t.networkInterface,c=t.cryptoInterface,u=t.clientCredentials,d=t.libraryInfo,l=t.serverTelemetryManager,h=t.persistencePlugin,p=t.serializableCache,g=L(L({},Yt),i),{authOptions:(r=n,L({clientCapabilities:[],azureCloudOptions:$t},r)),systemOptions:L(L({},Wt),o),loggerOptions:g,storageInterface:a||new zt(n.clientId,Te),networkInterface:s||Qt,cryptoInterface:c||Te,clientCredentials:u||Vt,libraryInfo:L(L({},Jt),d),serverTelemetryManager:l||null,persistencePlugin:h||null,serializableCache:p||null}),this.logger=new gt(this.config.loggerOptions,"@azure/msal-common","6.1.0"),this.cryptoUtils=this.config.cryptoInterface,this.cacheManager=this.config.storageInterface,this.networkClient=this.config.networkInterface,this.networkManager=new rr(this.networkClient,this.cacheManager),this.serverTelemetryManager=this.config.serverTelemetryManager,this.authority=this.config.authOptions.authority}return e.prototype.createTokenRequestHeaders=function(e){var t={};if(t[K.CONTENT_TYPE]=j.URL_FORM_CONTENT_TYPE,!this.config.systemOptions.preventCorsPreflight&&e)switch(e.type){case Zt.HOME_ACCOUNT_ID:try{var r=Bt(e.credential);t[K.CCS_HEADER]="Oid:"+r.uid+"@"+r.utid}catch(e){this.logger.verbose("Could not parse home account ID for CCS Header: "+e)}break;case Zt.UPN:t[K.CCS_HEADER]="UPN: "+e.credential}return t},e.prototype.executePostToTokenEndpoint=function(e,t,r,n){return H(this,void 0,void 0,(function(){var o;return q(this,(function(i){switch(i.label){case 0:return[4,this.networkManager.sendPostRequest(n,e,{body:t,headers:r,proxyUrl:this.config.systemOptions.proxyUrl})];case 1:return o=i.sent(),this.config.serverTelemetryManager&&o.status<500&&429!==o.status&&this.config.serverTelemetryManager.clearTelemetryCache(),[2,o]}}))}))},e.prototype.updateAuthority=function(e){if(!e.discoveryComplete())throw lt.createEndpointDiscoveryIncompleteError("Updated authority has not completed endpoint discovery.");this.authority=e},e}(),ir=function(){function e(){}return e.validateRedirectUri=function(e){if(ht.isEmpty(e))throw Ft.createRedirectUriEmptyError()},e.validatePrompt=function(e){var t=[];for(var r in Q)t.push(Q[r]);if(t.indexOf(e)<0)throw Ft.createInvalidPromptError(e)},e.validateClaims=function(e){try{JSON.parse(e)}catch(e){throw Ft.createInvalidClaimsRequestError()}},e.validateCodeChallengeParams=function(e,t){if(ht.isEmpty(e)||ht.isEmpty(t))throw Ft.createInvalidCodeChallengeParamsError();this.validateCodeChallengeMethod(t)},e.validateCodeChallengeMethod=function(e){if([ne.PLAIN,ne.S256].indexOf(e)<0)throw Ft.createInvalidCodeChallengeMethodError()},e.sanitizeEQParams=function(e,t){return e?(t.forEach((function(t,r){e[r]&&delete e[r]})),e):{}},e}(),ar=function(){function e(){this.parameters=new Map}return e.prototype.addResponseTypeCode=function(){this.parameters.set(G.RESPONSE_TYPE,encodeURIComponent(j.CODE_RESPONSE_TYPE))},e.prototype.addResponseMode=function(e){this.parameters.set(G.RESPONSE_MODE,encodeURIComponent(e||J.QUERY))},e.prototype.addScopes=function(e,t){void 0===t&&(t=!0);var r=t?F(e||[],z):e||[],n=new Kt(r);this.parameters.set(G.SCOPE,encodeURIComponent(n.printScopes()))},e.prototype.addClientId=function(e){this.parameters.set(G.CLIENT_ID,encodeURIComponent(e))},e.prototype.addRedirectUri=function(e){ir.validateRedirectUri(e),this.parameters.set(G.REDIRECT_URI,encodeURIComponent(e))},e.prototype.addPostLogoutRedirectUri=function(e){ir.validateRedirectUri(e),this.parameters.set(G.POST_LOGOUT_URI,encodeURIComponent(e))},e.prototype.addIdTokenHint=function(e){this.parameters.set(G.ID_TOKEN_HINT,encodeURIComponent(e))},e.prototype.addDomainHint=function(e){this.parameters.set(Y.DOMAIN_HINT,encodeURIComponent(e))},e.prototype.addLoginHint=function(e){this.parameters.set(Y.LOGIN_HINT,encodeURIComponent(e))},e.prototype.addCcsUpn=function(e){this.parameters.set(K.CCS_HEADER,encodeURIComponent("UPN:"+e))},e.prototype.addCcsOid=function(e){this.parameters.set(K.CCS_HEADER,encodeURIComponent("Oid:"+e.uid+"@"+e.utid))},e.prototype.addSid=function(e){this.parameters.set(Y.SID,encodeURIComponent(e))},e.prototype.addClaims=function(e,t){var r=this.addClientCapabilitiesToClaims(e,t);ir.validateClaims(r),this.parameters.set(G.CLAIMS,encodeURIComponent(r))},e.prototype.addCorrelationId=function(e){this.parameters.set(G.CLIENT_REQUEST_ID,encodeURIComponent(e))},e.prototype.addLibraryInfo=function(e){this.parameters.set(G.X_CLIENT_SKU,e.sku),this.parameters.set(G.X_CLIENT_VER,e.version),this.parameters.set(G.X_CLIENT_OS,e.os),this.parameters.set(G.X_CLIENT_CPU,e.cpu)},e.prototype.addPrompt=function(e){ir.validatePrompt(e),this.parameters.set(""+G.PROMPT,encodeURIComponent(e))},e.prototype.addState=function(e){ht.isEmpty(e)||this.parameters.set(G.STATE,encodeURIComponent(e))},e.prototype.addNonce=function(e){this.parameters.set(G.NONCE,encodeURIComponent(e))},e.prototype.addCodeChallengeParams=function(e,t){if(ir.validateCodeChallengeParams(e,t),!e||!t)throw Ft.createInvalidCodeChallengeParamsError();this.parameters.set(G.CODE_CHALLENGE,encodeURIComponent(e)),this.parameters.set(G.CODE_CHALLENGE_METHOD,encodeURIComponent(t))},e.prototype.addAuthorizationCode=function(e){this.parameters.set(G.CODE,encodeURIComponent(e))},e.prototype.addDeviceCode=function(e){this.parameters.set(G.DEVICE_CODE,encodeURIComponent(e))},e.prototype.addRefreshToken=function(e){this.parameters.set(G.REFRESH_TOKEN,encodeURIComponent(e))},e.prototype.addCodeVerifier=function(e){this.parameters.set(G.CODE_VERIFIER,encodeURIComponent(e))},e.prototype.addClientSecret=function(e){this.parameters.set(G.CLIENT_SECRET,encodeURIComponent(e))},e.prototype.addClientAssertion=function(e){this.parameters.set(G.CLIENT_ASSERTION,encodeURIComponent(e))},e.prototype.addClientAssertionType=function(e){this.parameters.set(G.CLIENT_ASSERTION_TYPE,encodeURIComponent(e))},e.prototype.addOboAssertion=function(e){this.parameters.set(G.OBO_ASSERTION,encodeURIComponent(e))},e.prototype.addRequestTokenUse=function(e){this.parameters.set(G.REQUESTED_TOKEN_USE,encodeURIComponent(e))},e.prototype.addGrantType=function(e){this.parameters.set(G.GRANT_TYPE,encodeURIComponent(e))},e.prototype.addClientInfo=function(){this.parameters.set("client_info","1")},e.prototype.addExtraQueryParameters=function(e){var t=this;ir.sanitizeEQParams(e,this.parameters),Object.keys(e).forEach((function(r){t.parameters.set(r,e[r])}))},e.prototype.addClientCapabilitiesToClaims=function(e,t){var r;if(e)try{r=JSON.parse(e)}catch(e){throw Ft.createInvalidClaimsRequestError()}else r={};return t&&t.length>0&&(r.hasOwnProperty(X.ACCESS_TOKEN)||(r[X.ACCESS_TOKEN]={}),r[X.ACCESS_TOKEN][X.XMS_CC]={values:t}),JSON.stringify(r)},e.prototype.addUsername=function(e){this.parameters.set(ue.username,e)},e.prototype.addPassword=function(e){this.parameters.set(ue.password,e)},e.prototype.addPopToken=function(e){ht.isEmpty(e)||(this.parameters.set(G.TOKEN_TYPE,se.POP),this.parameters.set(G.REQ_CNF,encodeURIComponent(e)))},e.prototype.addSshJwk=function(e){ht.isEmpty(e)||(this.parameters.set(G.TOKEN_TYPE,se.SSH),this.parameters.set(G.REQ_CNF,encodeURIComponent(e)))},e.prototype.addServerTelemetry=function(e){this.parameters.set(G.X_CLIENT_CURR_TELEM,e.generateCurrentRequestHeaderValue()),this.parameters.set(G.X_CLIENT_LAST_TELEM,e.generateLastRequestHeaderValue())},e.prototype.addThrottling=function(){this.parameters.set(G.X_MS_LIB_CAPABILITY,ye)},e.prototype.addLogoutHint=function(e){this.parameters.set(G.LOGOUT_HINT,encodeURIComponent(e))},e.prototype.createQueryString=function(){var e=new Array;return this.parameters.forEach((function(t,r){e.push(r+"="+t)})),e.join("&")},e}(),sr=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return D(t,e),t.createIdTokenEntity=function(e,r,n,o,i,a){var s=new t;return s.credentialType=ee.ID_TOKEN,s.homeAccountId=e,s.environment=r,s.clientId=o,s.secret=n,s.realm=i,s.oboAssertion=a,s},t.isIdTokenEntity=function(e){return!!e&&(e.hasOwnProperty("homeAccountId")&&e.hasOwnProperty("environment")&&e.hasOwnProperty("credentialType")&&e.hasOwnProperty("realm")&&e.hasOwnProperty("clientId")&&e.hasOwnProperty("secret")&&e.credentialType===ee.ID_TOKEN)},t}(mt),cr=function(){function e(){}return e.nowSeconds=function(){return Math.round((new Date).getTime()/1e3)},e.isTokenExpired=function(t,r){var n=Number(t)||0;return e.nowSeconds()+r>n},e.wasClockTurnedBack=function(t){return Number(t)>e.nowSeconds()},e.delay=function(e,t){return new Promise((function(r){return setTimeout((function(){return r(t)}),e)}))},e}(),ur=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return D(t,e),t.createAccessTokenEntity=function(e,r,n,o,i,a,s,c,u,d,l,h,p,g,f){var m,y,v=new t;v.homeAccountId=e,v.credentialType=ee.ACCESS_TOKEN,v.secret=n;var E=cr.nowSeconds();if(v.cachedAt=E.toString(),v.expiresOn=s.toString(),v.extendedExpiresOn=c.toString(),d&&(v.refreshOn=d.toString()),v.environment=r,v.clientId=o,v.realm=i,v.target=a,v.oboAssertion=h,v.tokenType=ht.isEmpty(l)?se.BEARER:l,g&&(v.requestedClaims=g,v.requestedClaimsHash=f),(null===(m=v.tokenType)||void 0===m?void 0:m.toLowerCase())!==se.BEARER.toLowerCase())switch(v.credentialType=ee.ACCESS_TOKEN_WITH_AUTH_SCHEME,v.tokenType){case se.POP:var C=Xt.extractTokenClaims(n,u);if(!(null===(y=null==C?void 0:C.cnf)||void 0===y?void 0:y.kid))throw lt.createTokenClaimsRequiredError();v.keyId=C.cnf.kid;break;case se.SSH:v.keyId=p}return v},t.isAccessTokenEntity=function(e){return!!e&&(e.hasOwnProperty("homeAccountId")&&e.hasOwnProperty("environment")&&e.hasOwnProperty("credentialType")&&e.hasOwnProperty("realm")&&e.hasOwnProperty("clientId")&&e.hasOwnProperty("secret")&&e.hasOwnProperty("target")&&(e.credentialType===ee.ACCESS_TOKEN||e.credentialType===ee.ACCESS_TOKEN_WITH_AUTH_SCHEME))},t}(mt),dr=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return D(t,e),t.createRefreshTokenEntity=function(e,r,n,o,i,a){var s=new t;return s.clientId=o,s.credentialType=ee.REFRESH_TOKEN,s.environment=r,s.homeAccountId=e,s.secret=n,s.oboAssertion=a,i&&(s.familyId=i),s},t.isRefreshTokenEntity=function(e){return!!e&&(e.hasOwnProperty("homeAccountId")&&e.hasOwnProperty("environment")&&e.hasOwnProperty("credentialType")&&e.hasOwnProperty("clientId")&&e.hasOwnProperty("secret")&&e.credentialType===ee.REFRESH_TOKEN)},t}(mt),lr=["interaction_required","consent_required","login_required"],hr=["message_only","additional_action","basic_action","user_password_expired","consent_required"],pr={code:"no_tokens_found",desc:"No refresh token found in the cache. Please sign-in."},gr=function(e){function t(r,n,o){var i=e.call(this,r,n,o)||this;return i.name="InteractionRequiredAuthError",Object.setPrototypeOf(i,t.prototype),i}return D(t,e),t.isInteractionRequiredError=function(e,t,r){var n=!!e&&lr.indexOf(e)>-1,o=!!r&&hr.indexOf(r)>-1,i=!!t&&lr.some((function(e){return t.indexOf(e)>-1}));return n||i||o},t.createNoTokensFoundError=function(){return new t(pr.code,pr.desc)},t}(Se),fr=function(e,t,r,n,o){this.account=e||null,this.idToken=t||null,this.accessToken=r||null,this.refreshToken=n||null,this.appMetadata=o||null},mr=function(){function e(){}return e.setRequestState=function(t,r,n){var o=e.generateLibraryState(t,n);return ht.isEmpty(r)?o:""+o+j.RESOURCE_DELIM+r},e.generateLibraryState=function(e,t){if(!e)throw lt.createNoCryptoObjectError("generateLibraryState");var r={id:e.createNewGuid()};t&&(r.meta=t);var n=JSON.stringify(r);return e.base64Encode(n)},e.parseRequestState=function(e,t){if(!e)throw lt.createNoCryptoObjectError("parseRequestState");if(ht.isEmpty(t))throw lt.createInvalidStateError(t,"Null, undefined or empty state");try{var r=t.split(j.RESOURCE_DELIM),n=r[0],o=r.length>1?r.slice(1).join(j.RESOURCE_DELIM):"",i=e.base64Decode(n),a=JSON.parse(i);return{userRequestState:ht.isEmpty(o)?"":o,libraryState:a}}catch(e){throw lt.createInvalidStateError(t,e)}},e}(),yr=function(){function e(t){if(this._urlString=t,ht.isEmpty(this._urlString))throw Ft.createUrlEmptyError();ht.isEmpty(this.getHash())&&(this._urlString=e.canonicalizeUri(t))}return Object.defineProperty(e.prototype,"urlString",{get:function(){return this._urlString},enumerable:!1,configurable:!0}),e.canonicalizeUri=function(e){if(e){var t=e.toLowerCase();return ht.endsWith(t,"?")?t=t.slice(0,-1):ht.endsWith(t,"?/")&&(t=t.slice(0,-2)),ht.endsWith(t,"/")||(t+="/"),t}return e},e.prototype.validateAsUri=function(){var e;try{e=this.getUrlComponents()}catch(e){throw Ft.createUrlParseError(e)}if(!e.HostNameAndPort||!e.PathSegments)throw Ft.createUrlParseError("Given url string: "+this.urlString);if(!e.Protocol||"https:"!==e.Protocol.toLowerCase())throw Ft.createInsecureAuthorityUriError(this.urlString)},e.appendQueryString=function(e,t){return ht.isEmpty(t)?e:e.indexOf("?")<0?e+"?"+t:e+"&"+t},e.removeHashFromUrl=function(t){return e.canonicalizeUri(t.split("#")[0])},e.prototype.replaceTenantPath=function(t){var r=this.getUrlComponents(),n=r.PathSegments;return!t||0===n.length||n[0]!==B.COMMON&&n[0]!==B.ORGANIZATIONS||(n[0]=t),e.constructAuthorityUriFromObject(r)},e.prototype.getHash=function(){return e.parseHash(this.urlString)},e.prototype.getUrlComponents=function(){var e=RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?"),t=this.urlString.match(e);if(!t)throw Ft.createUrlParseError("Given url string: "+this.urlString);var r={Protocol:t[1],HostNameAndPort:t[4],AbsolutePath:t[5],QueryString:t[7]},n=r.AbsolutePath.split("/");return n=n.filter((function(e){return e&&e.length>0})),r.PathSegments=n,!ht.isEmpty(r.QueryString)&&r.QueryString.endsWith("/")&&(r.QueryString=r.QueryString.substring(0,r.QueryString.length-1)),r},e.getDomainFromUrl=function(e){var t=RegExp("^([^:/?#]+://)?([^/?#]*)"),r=e.match(t);if(!r)throw Ft.createUrlParseError("Given url string: "+e);return r[2]},e.getAbsoluteUrl=function(t,r){if(t[0]===j.FORWARD_SLASH){var n=new e(r).getUrlComponents();return n.Protocol+"//"+n.HostNameAndPort+t}return t},e.parseHash=function(e){var t=e.indexOf("#"),r=e.indexOf("#/");return r>-1?e.substring(r+2):t>-1?e.substring(t+1):""},e.constructAuthorityUriFromObject=function(t){return new e(t.Protocol+"//"+t.HostNameAndPort+"/"+t.PathSegments.join("/"))},e.getDeserializedHash=function(t){if(ht.isEmpty(t))return{};var r=e.parseHash(t),n=ht.queryStringToObject(ht.isEmpty(r)?t:r);if(!n)throw lt.createHashNotDeserializedError(JSON.stringify(n));return n},e.hashContainsKnownProperties=function(t){if(ht.isEmpty(t)||t.indexOf("=")<0)return!1;var r=e.getDeserializedHash(t);return!!(r.code||r.error_description||r.error||r.state)},e}();
/*! @azure/msal-common v6.1.0 2022-02-08 */!function(e){e.SW="sw",e.UHW="uhw"}(nr||(nr={}));var vr,Er=function(){function e(e){this.cryptoUtils=e}return e.prototype.generateCnf=function(e){return H(this,void 0,void 0,(function(){var t;return q(this,(function(r){switch(r.label){case 0:return[4,this.generateKid(e)];case 1:return t=r.sent(),[2,this.cryptoUtils.base64Encode(JSON.stringify(t))]}}))}))},e.prototype.generateKid=function(e){return H(this,void 0,void 0,(function(){return q(this,(function(t){switch(t.label){case 0:return[4,this.cryptoUtils.getPublicKeyThumbprint(e)];case 1:return[2,{kid:t.sent(),xms_ksl:nr.SW}]}}))}))},e.prototype.signPopToken=function(e,t){var r;return H(this,void 0,void 0,(function(){var n;return q(this,(function(o){if(n=Xt.extractTokenClaims(e,this.cryptoUtils),!(null===(r=null==n?void 0:n.cnf)||void 0===r?void 0:r.kid))throw lt.createTokenClaimsRequiredError();return[2,this.signPayload(e,n.cnf.kid,t)]}))}))},e.prototype.signPayload=function(e,t,r,n){return H(this,void 0,void 0,(function(){var o,i,a,s,c,u;return q(this,(function(d){switch(d.label){case 0:return o=r.resourceRequestMethod,i=r.resourceRequestUri,a=r.shrClaims,s=r.shrNonce,c=i?new yr(i):void 0,u=null==c?void 0:c.getUrlComponents(),[4,this.cryptoUtils.signJwt(L({at:e,ts:cr.nowSeconds(),m:null==o?void 0:o.toUpperCase(),u:null==u?void 0:u.HostNameAndPort,nonce:s||this.cryptoUtils.createNewGuid(),p:null==u?void 0:u.AbsolutePath,q:(null==u?void 0:u.QueryString)?[[],u.QueryString]:void 0,client_claims:a||void 0},n),t)];case 1:return[2,d.sent()]}}))}))},e}(),Cr=function(){function e(){}return e.prototype.generateAppMetadataKey=function(){return e.generateAppMetadataCacheKey(this.environment,this.clientId)},e.generateAppMetadataCacheKey=function(e,t){return["appmetadata",e,t].join(Z.CACHE_KEY_SEPARATOR).toLowerCase()},e.createAppMetadataEntity=function(t,r,n){var o=new e;return o.clientId=t,o.environment=r,n&&(o.familyId=n),o},e.isAppMetadataEntity=function(e,t){return!!t&&(0===e.indexOf("appmetadata")&&t.hasOwnProperty("clientId")&&t.hasOwnProperty("environment"))},e}(),wr=function(){function e(e,t){this.cache=e,this.hasChanged=t}return Object.defineProperty(e.prototype,"cacheHasChanged",{get:function(){return this.hasChanged},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"tokenCache",{get:function(){return this.cache},enumerable:!1,configurable:!0}),e}(),Sr=function(){function e(e,t,r,n,o,i){this.clientId=e,this.cacheStorage=t,this.cryptoObj=r,this.logger=n,this.serializableCache=o,this.persistencePlugin=i}return e.prototype.validateServerAuthorizationCodeResponse=function(e,t,r){if(!e.state||!t)throw e.state?lt.createStateNotFoundError("Cached State"):lt.createStateNotFoundError("Server State");if(decodeURIComponent(e.state)!==decodeURIComponent(t))throw lt.createStateMismatchError();if(e.error||e.error_description||e.suberror){if(gr.isInteractionRequiredError(e.error,e.error_description,e.suberror))throw new gr(e.error||j.EMPTY_STRING,e.error_description,e.suberror);throw new er(e.error||j.EMPTY_STRING,e.error_description,e.suberror)}e.client_info&&xt(e.client_info,r)},e.prototype.validateTokenResponse=function(e){if(e.error||e.error_description||e.suberror){if(gr.isInteractionRequiredError(e.error,e.error_description,e.suberror))throw new gr(e.error,e.error_description,e.suberror);var t=e.error_codes+" - ["+e.timestamp+"]: "+e.error_description+" - Correlation ID: "+e.correlation_id+" - Trace ID: "+e.trace_id;throw new er(e.error,t,e.suberror)}},e.prototype.handleServerTokenResponse=function(t,r,n,o,i,a,s){return H(this,void 0,void 0,(function(){var c,u,d,l,h;return q(this,(function(p){switch(p.label){case 0:if(t.id_token&&(c=new Xt(t.id_token||j.EMPTY_STRING,this.cryptoObj),i&&!ht.isEmpty(i.nonce)&&c.claims.nonce!==i.nonce))throw lt.createNonceMismatchError();this.homeAccountIdentifier=Gt.generateHomeAccountId(t.client_info||j.EMPTY_STRING,r.authorityType,this.logger,this.cryptoObj,c),i&&i.state&&(u=mr.parseRequestState(this.cryptoObj,i.state)),t.key_id=t.key_id||o.sshKid||void 0,d=this.generateCacheRecord(t,r,n,o,c,a,i),p.label=1;case 1:return p.trys.push([1,,5,8]),this.persistencePlugin&&this.serializableCache?(this.logger.verbose("Persistence enabled, calling beforeCacheAccess"),l=new wr(this.serializableCache,!0),[4,this.persistencePlugin.beforeCacheAccess(l)]):[3,3];case 2:p.sent(),p.label=3;case 3:return!s||!d.account||(h=d.account.generateAccountKey(),this.cacheStorage.getAccount(h))?[4,this.cacheStorage.saveCacheRecord(d)]:(this.logger.warning("Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache"),[2,e.generateAuthenticationResult(this.cryptoObj,r,d,!1,o,c,u)]);case 4:return p.sent(),[3,8];case 5:return this.persistencePlugin&&this.serializableCache&&l?(this.logger.verbose("Persistence enabled, calling afterCacheAccess"),[4,this.persistencePlugin.afterCacheAccess(l)]):[3,7];case 6:p.sent(),p.label=7;case 7:return[7];case 8:return[2,e.generateAuthenticationResult(this.cryptoObj,r,d,!1,o,c,u,t.spa_code)]}}))}))},e.prototype.generateCacheRecord=function(e,t,r,n,o,i,a){var s,c,u=t.getPreferredCache();if(ht.isEmpty(u))throw lt.createInvalidCacheEnvironmentError();!ht.isEmpty(e.id_token)&&o&&(s=sr.createIdTokenEntity(this.homeAccountIdentifier,u,e.id_token||j.EMPTY_STRING,this.clientId,o.claims.tid||j.EMPTY_STRING,i),c=this.generateAccountEntity(e,o,t,i,a));var d=null;if(!ht.isEmpty(e.access_token)){var l=e.scope?Kt.fromString(e.scope):new Kt(n.scopes||[]),h=("string"==typeof e.expires_in?parseInt(e.expires_in,10):e.expires_in)||0,p=("string"==typeof e.ext_expires_in?parseInt(e.ext_expires_in,10):e.ext_expires_in)||0,g=("string"==typeof e.refresh_in?parseInt(e.refresh_in,10):e.refresh_in)||void 0,f=r+h,m=f+p,y=g&&g>0?r+g:void 0;d=ur.createAccessTokenEntity(this.homeAccountIdentifier,u,e.access_token||j.EMPTY_STRING,this.clientId,o?o.claims.tid||j.EMPTY_STRING:t.tenant,l.printScopes(),f,m,this.cryptoObj,y,e.token_type,i,e.key_id,n.claims,n.requestedClaimsHash)}var v=null;ht.isEmpty(e.refresh_token)||(v=dr.createRefreshTokenEntity(this.homeAccountIdentifier,u,e.refresh_token||j.EMPTY_STRING,this.clientId,e.foci,i));var E=null;return ht.isEmpty(e.foci)||(E=Cr.createAppMetadataEntity(this.clientId,u,e.foci)),new fr(c,s,d,v,E)},e.prototype.generateAccountEntity=function(e,t,r,n,o){var i=r.authorityType,a=o?o.cloud_graph_host_name:"",s=o?o.msgraph_host:"";if(i===ft.Adfs)return this.logger.verbose("Authority type is ADFS, creating ADFS account"),Gt.createGenericAccount(this.homeAccountIdentifier,t,r,n,a,s);if(ht.isEmpty(e.client_info)&&"AAD"===r.protocolMode)throw lt.createClientInfoEmptyError();return e.client_info?Gt.createAccount(e.client_info,this.homeAccountIdentifier,t,r,n,a,s):Gt.createGenericAccount(this.homeAccountIdentifier,t,r,n,a,s)},e.generateAuthenticationResult=function(e,t,r,n,o,i,a,s){var c,u,d;return H(this,void 0,void 0,(function(){var l,h,p,g,f,m,y;return q(this,(function(v){switch(v.label){case 0:return l="",h=[],p=null,f=j.EMPTY_STRING,r.accessToken?r.accessToken.tokenType!==se.POP?[3,2]:[4,new Er(e).signPopToken(r.accessToken.secret,o)]:[3,4];case 1:return l=v.sent(),[3,3];case 2:l=r.accessToken.secret,v.label=3;case 3:h=Kt.fromString(r.accessToken.target).asArray(),p=new Date(1e3*Number(r.accessToken.expiresOn)),g=new Date(1e3*Number(r.accessToken.extendedExpiresOn)),v.label=4;case 4:return r.appMetadata&&(f="1"===r.appMetadata.familyId?"1":j.EMPTY_STRING),m=(null==i?void 0:i.claims.oid)||(null==i?void 0:i.claims.sub)||j.EMPTY_STRING,y=(null==i?void 0:i.claims.tid)||j.EMPTY_STRING,[2,{authority:t.canonicalAuthority,uniqueId:m,tenantId:y,scopes:h,account:r.account?r.account.getAccountInfo():null,idToken:i?i.rawToken:j.EMPTY_STRING,idTokenClaims:i?i.claims:{},accessToken:l,fromCache:n,expiresOn:p,correlationId:o.correlationId,extExpiresOn:g,familyId:f,tokenType:(null===(c=r.accessToken)||void 0===c?void 0:c.tokenType)||j.EMPTY_STRING,state:a?a.userRequestState:j.EMPTY_STRING,cloudGraphHostName:(null===(u=r.account)||void 0===u?void 0:u.cloudGraphHostName)||j.EMPTY_STRING,msGraphHost:(null===(d=r.account)||void 0===d?void 0:d.msGraphHost)||j.EMPTY_STRING,code:s}]}}))}))},e}(),Tr=function(e){function t(t){var r=e.call(this,t)||this;return r.includeRedirectUri=!0,r}return D(t,e),t.prototype.getAuthCodeUrl=function(e){return H(this,void 0,void 0,(function(){var t;return q(this,(function(r){return t=this.createAuthCodeUrlQueryString(e),[2,yr.appendQueryString(this.authority.authorizationEndpoint,t)]}))}))},t.prototype.acquireToken=function(e,t){return H(this,void 0,void 0,(function(){var r,n,o;return q(this,(function(i){switch(i.label){case 0:if(this.logger.info("in acquireToken call"),!e||ht.isEmpty(e.code))throw lt.createTokenRequestCannotBeMadeError();return r=cr.nowSeconds(),[4,this.executeTokenRequest(this.authority,e)];case 1:return n=i.sent(),(o=new Sr(this.config.authOptions.clientId,this.cacheManager,this.cryptoUtils,this.logger,this.config.serializableCache,this.config.persistencePlugin)).validateTokenResponse(n.body),[4,o.handleServerTokenResponse(n.body,this.authority,r,e,t)];case 2:return[2,i.sent()]}}))}))},t.prototype.handleFragmentResponse=function(e,t){var r=new Sr(this.config.authOptions.clientId,this.cacheManager,this.cryptoUtils,this.logger,null,null),n=new yr(e),o=yr.getDeserializedHash(n.getHash());if(r.validateServerAuthorizationCodeResponse(o,t,this.cryptoUtils),!o.code)throw lt.createNoAuthCodeInServerResponseError();return L(L({},o),{code:o.code})},t.prototype.getLogoutUri=function(e){if(!e)throw Ft.createEmptyLogoutRequestError();var t=this.createLogoutUrlQueryString(e);return yr.appendQueryString(this.authority.endSessionEndpoint,t)},t.prototype.executeTokenRequest=function(e,t){return H(this,void 0,void 0,(function(){var r,n,o,i,a,s,c;return q(this,(function(u){switch(u.label){case 0:return r={clientId:this.config.authOptions.clientId,authority:e.canonicalAuthority,scopes:t.scopes,claims:t.claims,authenticationScheme:t.authenticationScheme,resourceRequestMethod:t.resourceRequestMethod,resourceRequestUri:t.resourceRequestUri,shrClaims:t.shrClaims,sshKid:t.sshKid},[4,this.createTokenRequestBody(t)];case 1:if(n=u.sent(),o=this.createTokenQueryParameters(t),i=void 0,t.clientInfo)try{a=xt(t.clientInfo,this.cryptoUtils),i={credential:""+a.uid+Z.CLIENT_INFO_SEPARATOR+a.utid,type:Zt.HOME_ACCOUNT_ID}}catch(e){this.logger.verbose("Could not parse client info for CCS Header: "+e)}return s=this.createTokenRequestHeaders(i||t.ccsCredential),c=ht.isEmpty(o)?e.tokenEndpoint:e.tokenEndpoint+"?"+o,[2,this.executePostToTokenEndpoint(c,n,s,r)]}}))}))},t.prototype.createTokenQueryParameters=function(e){var t=new ar;return e.tokenQueryParameters&&t.addExtraQueryParameters(e.tokenQueryParameters),t.createQueryString()},t.prototype.createTokenRequestBody=function(e){return H(this,void 0,void 0,(function(){var t,r,n,o,i,a,s;return q(this,(function(c){switch(c.label){case 0:return(t=new ar).addClientId(this.config.authOptions.clientId),this.includeRedirectUri?t.addRedirectUri(e.redirectUri):ir.validateRedirectUri(e.redirectUri),t.addScopes(e.scopes),t.addAuthorizationCode(e.code),t.addLibraryInfo(this.config.libraryInfo),t.addThrottling(),this.serverTelemetryManager&&t.addServerTelemetry(this.serverTelemetryManager),e.codeVerifier&&t.addCodeVerifier(e.codeVerifier),this.config.clientCredentials.clientSecret&&t.addClientSecret(this.config.clientCredentials.clientSecret),this.config.clientCredentials.clientAssertion&&(r=this.config.clientCredentials.clientAssertion,t.addClientAssertion(r.assertion),t.addClientAssertionType(r.assertionType)),t.addGrantType(V.AUTHORIZATION_CODE_GRANT),t.addClientInfo(),e.authenticationScheme!==se.POP?[3,2]:[4,new Er(this.cryptoUtils).generateCnf(e)];case 1:return n=c.sent(),t.addPopToken(n),[3,3];case 2:if(e.authenticationScheme===se.SSH){if(!e.sshJwk)throw Ft.createMissingSshJwkError();t.addSshJwk(e.sshJwk)}c.label=3;case 3:if(o=e.correlationId||this.config.cryptoInterface.createNewGuid(),t.addCorrelationId(o),(!ht.isEmptyObj(e.claims)||this.config.authOptions.clientCapabilities&&this.config.authOptions.clientCapabilities.length>0)&&t.addClaims(e.claims,this.config.authOptions.clientCapabilities),i=void 0,e.clientInfo)try{a=xt(e.clientInfo,this.cryptoUtils),i={credential:""+a.uid+Z.CLIENT_INFO_SEPARATOR+a.utid,type:Zt.HOME_ACCOUNT_ID}}catch(e){this.logger.verbose("Could not parse client info for CCS Header: "+e)}else i=e.ccsCredential;if(this.config.systemOptions.preventCorsPreflight&&i)switch(i.type){case Zt.HOME_ACCOUNT_ID:try{a=Bt(i.credential),t.addCcsOid(a)}catch(e){this.logger.verbose("Could not parse home account ID for CCS Header: "+e)}break;case Zt.UPN:t.addCcsUpn(i.credential)}return e.tokenBodyParameters&&t.addExtraQueryParameters(e.tokenBodyParameters),!e.enableSpaAuthorizationCode||e.tokenBodyParameters&&e.tokenBodyParameters[G.RETURN_SPA_CODE]||t.addExtraQueryParameters(((s={})[G.RETURN_SPA_CODE]="1",s)),[2,t.createQueryString()]}}))}))},t.prototype.createAuthCodeUrlQueryString=function(e){var t=new ar;t.addClientId(this.config.authOptions.clientId);var r=F(e.scopes||[],e.extraScopesToConsent||[]);t.addScopes(r),t.addRedirectUri(e.redirectUri);var n=e.correlationId||this.config.cryptoInterface.createNewGuid();if(t.addCorrelationId(n),t.addResponseMode(e.responseMode),t.addResponseTypeCode(),t.addLibraryInfo(this.config.libraryInfo),t.addClientInfo(),e.codeChallenge&&e.codeChallengeMethod&&t.addCodeChallengeParams(e.codeChallenge,e.codeChallengeMethod),e.prompt&&t.addPrompt(e.prompt),e.domainHint&&t.addDomainHint(e.domainHint),e.prompt!==Q.SELECT_ACCOUNT)if(e.sid&&e.prompt===Q.NONE)this.logger.verbose("createAuthCodeUrlQueryString: Prompt is none, adding sid from request"),t.addSid(e.sid);else if(e.account){var o=this.extractAccountSid(e.account);if(o&&e.prompt===Q.NONE){this.logger.verbose("createAuthCodeUrlQueryString: Prompt is none, adding sid from account"),t.addSid(o);try{var i=Bt(e.account.homeAccountId);t.addCcsOid(i)}catch(e){this.logger.verbose("Could not parse home account ID for CCS Header: "+e)}}else if(e.loginHint)this.logger.verbose("createAuthCodeUrlQueryString: Adding login_hint from request"),t.addLoginHint(e.loginHint),t.addCcsUpn(e.loginHint);else if(e.account.username){this.logger.verbose("createAuthCodeUrlQueryString: Adding login_hint from account"),t.addLoginHint(e.account.username);try{i=Bt(e.account.homeAccountId);t.addCcsOid(i)}catch(e){this.logger.verbose("Could not parse home account ID for CCS Header: "+e)}}}else e.loginHint&&(this.logger.verbose("createAuthCodeUrlQueryString: No account, adding login_hint from request"),t.addLoginHint(e.loginHint),t.addCcsUpn(e.loginHint));else this.logger.verbose("createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints");return e.nonce&&t.addNonce(e.nonce),e.state&&t.addState(e.state),(!ht.isEmpty(e.claims)||this.config.authOptions.clientCapabilities&&this.config.authOptions.clientCapabilities.length>0)&&t.addClaims(e.claims,this.config.authOptions.clientCapabilities),e.extraQueryParameters&&t.addExtraQueryParameters(e.extraQueryParameters),t.createQueryString()},t.prototype.createLogoutUrlQueryString=function(e){var t=new ar;return e.postLogoutRedirectUri&&t.addPostLogoutRedirectUri(e.postLogoutRedirectUri),e.correlationId&&t.addCorrelationId(e.correlationId),e.idTokenHint&&t.addIdTokenHint(e.idTokenHint),e.state&&t.addState(e.state),e.logoutHint&&t.addLogoutHint(e.logoutHint),e.extraQueryParameters&&t.addExtraQueryParameters(e.extraQueryParameters),t.createQueryString()},t.prototype.extractAccountSid=function(e){return e.idTokenClaims&&e.idTokenClaims.sid||null},t}(or),Ar=function(e){function t(t){return e.call(this,t)||this}return D(t,e),t.prototype.acquireToken=function(e){return H(this,void 0,void 0,(function(){var t,r,n;return q(this,(function(o){switch(o.label){case 0:return t=cr.nowSeconds(),[4,this.executeTokenRequest(e,this.authority)];case 1:return r=o.sent(),(n=new Sr(this.config.authOptions.clientId,this.cacheManager,this.cryptoUtils,this.logger,this.config.serializableCache,this.config.persistencePlugin)).validateTokenResponse(r.body),[2,n.handleServerTokenResponse(r.body,this.authority,t,e,void 0,void 0,!0)]}}))}))},t.prototype.acquireTokenByRefreshToken=function(e){return H(this,void 0,void 0,(function(){var t,r;return q(this,(function(n){if(!e)throw Ft.createEmptyTokenRequestError();if(!e.account)throw lt.createNoAccountInSilentRequestError();if(this.cacheManager.isAppMetadataFOCI(e.account.environment,this.config.authOptions.clientId))try{return[2,this.acquireTokenWithCachedRefreshToken(e,!0)]}catch(n){if(t=n instanceof gr&&n.errorCode===pr.code,r=n instanceof er&&n.errorCode===ve&&n.subError===Ee,t||r)return[2,this.acquireTokenWithCachedRefreshToken(e,!1)];throw n}return[2,this.acquireTokenWithCachedRefreshToken(e,!1)]}))}))},t.prototype.acquireTokenWithCachedRefreshToken=function(e,t){return H(this,void 0,void 0,(function(){var r,n;return q(this,(function(o){if(!(r=this.cacheManager.readRefreshTokenFromCache(this.config.authOptions.clientId,e.account,t)))throw gr.createNoTokensFoundError();return n=L(L({},e),{refreshToken:r.secret,authenticationScheme:e.authenticationScheme||se.BEARER,ccsCredential:{credential:e.account.homeAccountId,type:Zt.HOME_ACCOUNT_ID}}),[2,this.acquireToken(n)]}))}))},t.prototype.executeTokenRequest=function(e,t){return H(this,void 0,void 0,(function(){var r,n,o,i,a;return q(this,(function(s){switch(s.label){case 0:return[4,this.createTokenRequestBody(e)];case 1:return r=s.sent(),n=this.createTokenQueryParameters(e),o=this.createTokenRequestHeaders(e.ccsCredential),i={clientId:this.config.authOptions.clientId,authority:t.canonicalAuthority,scopes:e.scopes,claims:e.claims,authenticationScheme:e.authenticationScheme,resourceRequestMethod:e.resourceRequestMethod,resourceRequestUri:e.resourceRequestUri,shrClaims:e.shrClaims,sshKid:e.sshKid},a=yr.appendQueryString(t.tokenEndpoint,n),[2,this.executePostToTokenEndpoint(a,r,o,i)]}}))}))},t.prototype.createTokenQueryParameters=function(e){var t=new ar;return e.tokenQueryParameters&&t.addExtraQueryParameters(e.tokenQueryParameters),t.createQueryString()},t.prototype.createTokenRequestBody=function(e){return H(this,void 0,void 0,(function(){var t,r,n,o,i;return q(this,(function(a){switch(a.label){case 0:return(t=new ar).addClientId(this.config.authOptions.clientId),t.addScopes(e.scopes),t.addGrantType(V.REFRESH_TOKEN_GRANT),t.addClientInfo(),t.addLibraryInfo(this.config.libraryInfo),t.addThrottling(),this.serverTelemetryManager&&t.addServerTelemetry(this.serverTelemetryManager),r=e.correlationId||this.config.cryptoInterface.createNewGuid(),t.addCorrelationId(r),t.addRefreshToken(e.refreshToken),this.config.clientCredentials.clientSecret&&t.addClientSecret(this.config.clientCredentials.clientSecret),this.config.clientCredentials.clientAssertion&&(n=this.config.clientCredentials.clientAssertion,t.addClientAssertion(n.assertion),t.addClientAssertionType(n.assertionType)),e.authenticationScheme!==se.POP?[3,2]:[4,new Er(this.cryptoUtils).generateCnf(e)];case 1:return o=a.sent(),t.addPopToken(o),[3,3];case 2:if(e.authenticationScheme===se.SSH){if(!e.sshJwk)throw Ft.createMissingSshJwkError();t.addSshJwk(e.sshJwk)}a.label=3;case 3:if((!ht.isEmptyObj(e.claims)||this.config.authOptions.clientCapabilities&&this.config.authOptions.clientCapabilities.length>0)&&t.addClaims(e.claims,this.config.authOptions.clientCapabilities),this.config.systemOptions.preventCorsPreflight&&e.ccsCredential)switch(e.ccsCredential.type){case Zt.HOME_ACCOUNT_ID:try{i=Bt(e.ccsCredential.credential),t.addCcsOid(i)}catch(e){this.logger.verbose("Could not parse home account ID for CCS Header: "+e)}break;case Zt.UPN:t.addCcsUpn(e.ccsCredential.credential)}return[2,t.createQueryString()]}}))}))},t}(or),Ir=function(e){function t(t){return e.call(this,t)||this}return D(t,e),t.prototype.acquireToken=function(e){return H(this,void 0,void 0,(function(){var t;return q(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),[4,this.acquireCachedToken(e)];case 1:return[2,r.sent()];case 2:if((t=r.sent())instanceof lt&&t.errorCode===it.code)return[2,new Ar(this.config).acquireTokenByRefreshToken(e)];throw t;case 3:return[2]}}))}))},t.prototype.acquireCachedToken=function(e){var t,r,n,o;return H(this,void 0,void 0,(function(){var i,a;return q(this,(function(s){switch(s.label){case 0:if(!e)throw Ft.createEmptyTokenRequestError();if(e.forceRefresh)throw null===(t=this.serverTelemetryManager)||void 0===t||t.setCacheOutcome(pe.FORCE_REFRESH),this.logger.info("SilentFlowClient:acquireCachedToken - Skipping cache because forceRefresh is true."),lt.createRefreshRequiredError();if(!e.account)throw lt.createNoAccountInSilentRequestError();if(i=e.authority||this.authority.getPreferredCache(),!(a=this.cacheManager.readCacheRecord(e.account,this.config.authOptions.clientId,e,i)).accessToken)throw null===(r=this.serverTelemetryManager)||void 0===r||r.setCacheOutcome(pe.NO_CACHED_ACCESS_TOKEN),this.logger.info("SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties."),lt.createRefreshRequiredError();if(cr.wasClockTurnedBack(a.accessToken.cachedAt)||cr.isTokenExpired(a.accessToken.expiresOn,this.config.systemOptions.tokenRenewalOffsetSeconds))throw null===(n=this.serverTelemetryManager)||void 0===n||n.setCacheOutcome(pe.CACHED_ACCESS_TOKEN_EXPIRED),this.logger.info("SilentFlowClient:acquireCachedToken - Cached access token is expired or will expire within "+this.config.systemOptions.tokenRenewalOffsetSeconds+" seconds."),lt.createRefreshRequiredError();if(a.accessToken.refreshOn&&cr.isTokenExpired(a.accessToken.refreshOn,0))throw null===(o=this.serverTelemetryManager)||void 0===o||o.setCacheOutcome(pe.REFRESH_CACHED_ACCESS_TOKEN),this.logger.info("SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'."),lt.createRefreshRequiredError();return this.config.serverTelemetryManager&&this.config.serverTelemetryManager.incrementCacheHits(),[4,this.generateResultFromCacheRecord(a,e)];case 1:return[2,s.sent()]}}))}))},t.prototype.generateResultFromCacheRecord=function(e,t){return H(this,void 0,void 0,(function(){var r;return q(this,(function(n){switch(n.label){case 0:return e.idToken&&(r=new Xt(e.idToken.secret,this.config.cryptoInterface)),[4,Sr.generateAuthenticationResult(this.cryptoUtils,this.authority,e,!0,t,r)];case 1:return[2,n.sent()]}}))}))},t}(or);
/*! @azure/msal-common v6.1.0 2022-02-08 */
/*! @azure/msal-common v6.1.0 2022-02-08 */
function _r(e){return e.hasOwnProperty("authorization_endpoint")&&e.hasOwnProperty("token_endpoint")&&e.hasOwnProperty("issuer")}
/*! @azure/msal-common v6.1.0 2022-02-08 */!function(e){e.AAD="AAD",e.OIDC="OIDC"}(vr||(vr={}));
/*! @azure/msal-common v6.1.0 2022-02-08 */
var br=function(){function e(){this.expiresAt=cr.nowSeconds()+ae}return e.prototype.updateCloudDiscoveryMetadata=function(e,t){this.aliases=e.aliases,this.preferred_cache=e.preferred_cache,this.preferred_network=e.preferred_network,this.aliasesFromNetwork=t},e.prototype.updateEndpointMetadata=function(e,t){this.authorization_endpoint=e.authorization_endpoint,this.token_endpoint=e.token_endpoint,this.end_session_endpoint=e.end_session_endpoint,this.issuer=e.issuer,this.endpointsFromNetwork=t},e.prototype.updateCanonicalAuthority=function(e){this.canonical_authority=e},e.prototype.resetExpiresAt=function(){this.expiresAt=cr.nowSeconds()+ae},e.prototype.isExpired=function(){return this.expiresAt<=cr.nowSeconds()},e.isAuthorityMetadataEntity=function(e,t){return!!t&&(0===e.indexOf(ie)&&t.hasOwnProperty("aliases")&&t.hasOwnProperty("preferred_cache")&&t.hasOwnProperty("preferred_network")&&t.hasOwnProperty("canonical_authority")&&t.hasOwnProperty("authorization_endpoint")&&t.hasOwnProperty("token_endpoint")&&t.hasOwnProperty("issuer")&&t.hasOwnProperty("aliasesFromNetwork")&&t.hasOwnProperty("endpointsFromNetwork")&&t.hasOwnProperty("expiresAt"))},e}();
/*! @azure/msal-common v6.1.0 2022-02-08 */
/*! @azure/msal-common v6.1.0 2022-02-08 */
var Rr,Or,kr,Nr,Pr,Ur,Mr,Dr=function(){function e(e){this.networkInterface=e}return e.prototype.detectRegion=function(t,r,n){return H(this,void 0,void 0,(function(){var o,i,a,s,c;return q(this,(function(u){switch(u.label){case 0:if(o=t)return[3,8];i=e.IMDS_OPTIONS,n&&(i.proxyUrl=n),u.label=1;case 1:return u.trys.push([1,6,,7]),[4,this.getRegionFromIMDS(j.IMDS_VERSION,i)];case 2:return(a=u.sent()).status===de.httpSuccess&&(o=a.body,r.region_source=le.IMDS),a.status!==de.httpBadRequest?[3,5]:[4,this.getCurrentVersion(i)];case 3:return(s=u.sent())?[4,this.getRegionFromIMDS(s,i)]:(r.region_source=le.FAILED_AUTO_DETECTION,[2,null]);case 4:(c=u.sent()).status===de.httpSuccess&&(o=c.body,r.region_source=le.IMDS),u.label=5;case 5:return[3,7];case 6:return u.sent(),r.region_source=le.FAILED_AUTO_DETECTION,[2,null];case 7:return[3,9];case 8:r.region_source=le.ENVIRONMENT_VARIABLE,u.label=9;case 9:return o||(r.region_source=le.FAILED_AUTO_DETECTION),[2,o||null]}}))}))},e.prototype.getRegionFromIMDS=function(e,t){return H(this,void 0,void 0,(function(){return q(this,(function(r){return[2,this.networkInterface.sendGetRequestAsync(j.IMDS_ENDPOINT+"?api-version="+e+"&format=text",t,j.IMDS_TIMEOUT)]}))}))},e.prototype.getCurrentVersion=function(e){return H(this,void 0,void 0,(function(){var t;return q(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),[4,this.networkInterface.sendGetRequestAsync(j.IMDS_ENDPOINT+"?format=json",e)];case 1:return(t=r.sent()).status===de.httpBadRequest&&t.body&&t.body["newest-versions"]&&t.body["newest-versions"].length>0?[2,t.body["newest-versions"][0]]:[2,null];case 2:return r.sent(),[2,null];case 3:return[2]}}))}))},e.IMDS_OPTIONS={headers:{Metadata:"true"}},e}(),Lr=function(){function e(e,t,r,n,o){this.canonicalAuthority=e,this._canonicalAuthority.validateAsUri(),this.networkInterface=t,this.cacheManager=r,this.authorityOptions=n,this.regionDiscovery=new Dr(t),this.regionDiscoveryMetadata={region_used:void 0,region_source:void 0,region_outcome:void 0},this.proxyUrl=o||j.EMPTY_STRING}return Object.defineProperty(e.prototype,"authorityType",{get:function(){var e=this.canonicalAuthorityUrlComponents.PathSegments;return e.length&&e[0].toLowerCase()===j.ADFS?ft.Adfs:ft.Default},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"protocolMode",{get:function(){return this.authorityOptions.protocolMode},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"options",{get:function(){return this.authorityOptions},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"canonicalAuthority",{get:function(){return this._canonicalAuthority.urlString},set:function(e){this._canonicalAuthority=new yr(e),this._canonicalAuthority.validateAsUri(),this._canonicalAuthorityUrlComponents=null},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"canonicalAuthorityUrlComponents",{get:function(){return this._canonicalAuthorityUrlComponents||(this._canonicalAuthorityUrlComponents=this._canonicalAuthority.getUrlComponents()),this._canonicalAuthorityUrlComponents},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"hostnameAndPort",{get:function(){return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"tenant",{get:function(){return this.canonicalAuthorityUrlComponents.PathSegments[0]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"authorizationEndpoint",{get:function(){if(this.discoveryComplete()){var e=this.replacePath(this.metadata.authorization_endpoint);return this.replaceTenant(e)}throw lt.createEndpointDiscoveryIncompleteError("Discovery incomplete.")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"tokenEndpoint",{get:function(){if(this.discoveryComplete()){var e=this.replacePath(this.metadata.token_endpoint);return this.replaceTenant(e)}throw lt.createEndpointDiscoveryIncompleteError("Discovery incomplete.")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"deviceCodeEndpoint",{get:function(){if(this.discoveryComplete()){var e=this.replacePath(this.metadata.token_endpoint.replace("/token","/devicecode"));return this.replaceTenant(e)}throw lt.createEndpointDiscoveryIncompleteError("Discovery incomplete.")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"endSessionEndpoint",{get:function(){if(this.discoveryComplete()){if(!this.metadata.end_session_endpoint)throw lt.createLogoutNotSupportedError();var e=this.replacePath(this.metadata.end_session_endpoint);return this.replaceTenant(e)}throw lt.createEndpointDiscoveryIncompleteError("Discovery incomplete.")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"selfSignedJwtAudience",{get:function(){if(this.discoveryComplete()){var e=this.replacePath(this.metadata.issuer);return this.replaceTenant(e)}throw lt.createEndpointDiscoveryIncompleteError("Discovery incomplete.")},enumerable:!1,configurable:!0}),e.prototype.replaceTenant=function(e){return e.replace(/{tenant}|{tenantid}/g,this.tenant)},e.prototype.replacePath=function(e){var t=e,r=new yr(this.metadata.canonical_authority).getUrlComponents().PathSegments;return this.canonicalAuthorityUrlComponents.PathSegments.forEach((function(e,n){var o=r[n];e!==o&&(t=t.replace("/"+o+"/","/"+e+"/"))})),t},Object.defineProperty(e.prototype,"defaultOpenIdConfigurationEndpoint",{get:function(){return this.authorityType===ft.Adfs||this.protocolMode===vr.OIDC?this.canonicalAuthority+".well-known/openid-configuration":this.canonicalAuthority+"v2.0/.well-known/openid-configuration"},enumerable:!1,configurable:!0}),e.prototype.discoveryComplete=function(){return!!this.metadata},e.prototype.resolveEndpointsAsync=function(){return H(this,void 0,void 0,(function(){var e,t,r,n;return q(this,(function(o){switch(o.label){case 0:return(e=this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort))||(e=new br).updateCanonicalAuthority(this.canonicalAuthority),[4,this.updateCloudDiscoveryMetadata(e)];case 1:return t=o.sent(),this.canonicalAuthority=this.canonicalAuthority.replace(this.hostnameAndPort,e.preferred_network),[4,this.updateEndpointMetadata(e)];case 2:return r=o.sent(),t!==oe.CACHE&&r!==oe.CACHE&&(e.resetExpiresAt(),e.updateCanonicalAuthority(this.canonicalAuthority)),n=this.cacheManager.generateAuthorityMetadataCacheKey(e.preferred_cache),this.cacheManager.setAuthorityMetadata(n,e),this.metadata=e,[2]}}))}))},e.prototype.updateEndpointMetadata=function(t){var r;return H(this,void 0,void 0,(function(){var n,o,i;return q(this,(function(a){switch(a.label){case 0:return(n=this.getEndpointMetadataFromConfig())?(t.updateEndpointMetadata(n,!1),[2,oe.CONFIG]):this.isAuthoritySameType(t)&&t.endpointsFromNetwork&&!t.isExpired()?[2,oe.CACHE]:[4,this.getEndpointMetadataFromNetwork()];case 1:return(n=a.sent())?(null===(r=this.authorityOptions.azureRegionConfiguration)||void 0===r?void 0:r.azureRegion)?[4,this.regionDiscovery.detectRegion(this.authorityOptions.azureRegionConfiguration.environmentRegion,this.regionDiscoveryMetadata,this.proxyUrl)]:[3,3]:[3,4];case 2:o=a.sent(),i=this.authorityOptions.azureRegionConfiguration.azureRegion===j.AZURE_REGION_AUTO_DISCOVER_FLAG?o:this.authorityOptions.azureRegionConfiguration.azureRegion,this.authorityOptions.azureRegionConfiguration.azureRegion===j.AZURE_REGION_AUTO_DISCOVER_FLAG?this.regionDiscoveryMetadata.region_outcome=o?he.AUTO_DETECTION_REQUESTED_SUCCESSFUL:he.AUTO_DETECTION_REQUESTED_FAILED:this.regionDiscoveryMetadata.region_outcome=o?this.authorityOptions.azureRegionConfiguration.azureRegion===o?he.CONFIGURED_MATCHES_DETECTED:he.CONFIGURED_NOT_DETECTED:he.CONFIGURED_NO_AUTO_DETECTION,i&&(this.regionDiscoveryMetadata.region_used=i,n=e.replaceWithRegionalInformation(n,i)),a.label=3;case 3:return t.updateEndpointMetadata(n,!0),[2,oe.NETWORK];case 4:throw lt.createUnableToGetOpenidConfigError(this.defaultOpenIdConfigurationEndpoint)}}))}))},e.prototype.isAuthoritySameType=function(e){return new yr(e.canonical_authority).getUrlComponents().PathSegments.length===this.canonicalAuthorityUrlComponents.PathSegments.length},e.prototype.getEndpointMetadataFromConfig=function(){if(this.authorityOptions.authorityMetadata)try{return JSON.parse(this.authorityOptions.authorityMetadata)}catch(e){throw Ft.createInvalidAuthorityMetadataError()}return null},e.prototype.getEndpointMetadataFromNetwork=function(){return H(this,void 0,void 0,(function(){var e,t;return q(this,(function(r){switch(r.label){case 0:e={},this.proxyUrl&&(e.proxyUrl=this.proxyUrl),r.label=1;case 1:return r.trys.push([1,3,,4]),[4,this.networkInterface.sendGetRequestAsync(this.defaultOpenIdConfigurationEndpoint,e)];case 2:return[2,_r((t=r.sent()).body)?t.body:null];case 3:return r.sent(),[2,null];case 4:return[2]}}))}))},e.prototype.updateCloudDiscoveryMetadata=function(e){return H(this,void 0,void 0,(function(){var t;return q(this,(function(r){switch(r.label){case 0:return(t=this.getCloudDiscoveryMetadataFromConfig())?(e.updateCloudDiscoveryMetadata(t,!1),[2,oe.CONFIG]):this.isAuthoritySameType(e)&&e.aliasesFromNetwork&&!e.isExpired()?[2,oe.CACHE]:[4,this.getCloudDiscoveryMetadataFromNetwork()];case 1:if(t=r.sent())return e.updateCloudDiscoveryMetadata(t,!0),[2,oe.NETWORK];throw Ft.createUntrustedAuthorityError()}}))}))},e.prototype.getCloudDiscoveryMetadataFromConfig=function(){if(this.authorityOptions.cloudDiscoveryMetadata)try{var t=JSON.parse(this.authorityOptions.cloudDiscoveryMetadata),r=e.getCloudDiscoveryMetadataFromNetworkResponse(t.metadata,this.hostnameAndPort);if(r)return r}catch(e){throw Ft.createInvalidCloudDiscoveryMetadataError()}return this.isInKnownAuthorities()?e.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort):null},e.prototype.getCloudDiscoveryMetadataFromNetwork=function(){return H(this,void 0,void 0,(function(){var t,r,n,o,i;return q(this,(function(a){switch(a.label){case 0:t=""+j.AAD_INSTANCE_DISCOVERY_ENDPT+this.canonicalAuthority+"oauth2/v2.0/authorize",r={},this.proxyUrl&&(r.proxyUrl=this.proxyUrl),n=null,a.label=1;case 1:return a.trys.push([1,3,,4]),[4,this.networkInterface.sendGetRequestAsync(t,r)];case 2:return o=a.sent(),0===(i=function(e){return e.hasOwnProperty("tenant_discovery_endpoint")&&e.hasOwnProperty("metadata")}(o.body)?o.body.metadata:[]).length?[2,null]:(n=e.getCloudDiscoveryMetadataFromNetworkResponse(i,this.hostnameAndPort),[3,4]);case 3:return a.sent(),[2,null];case 4:return n||(n=e.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort)),[2,n]}}))}))},e.prototype.isInKnownAuthorities=function(){var e=this;return this.authorityOptions.knownAuthorities.filter((function(t){return yr.getDomainFromUrl(t).toLowerCase()===e.hostnameAndPort})).length>0},e.generateAuthority=function(e,t){var r;if(t&&t.azureCloudInstance!==pt.None){var n=t.tenant?t.tenant:j.DEFAULT_COMMON_TENANT;r=t.azureCloudInstance+"/"+n+"/"}return r||e},e.createCloudDiscoveryMetadataFromHost=function(e){return{preferred_network:e,preferred_cache:e,aliases:[e]}},e.getCloudDiscoveryMetadataFromNetworkResponse=function(e,t){for(var r=0;r<e.length;r++){var n=e[r];if(n.aliases.indexOf(t)>-1)return n}return null},e.prototype.getPreferredCache=function(){if(this.discoveryComplete())return this.metadata.preferred_cache;throw lt.createEndpointDiscoveryIncompleteError("Discovery incomplete.")},e.prototype.isAlias=function(e){return this.metadata.aliases.indexOf(e)>-1},e.isPublicCloudAuthority=function(e){return j.KNOWN_PUBLIC_CLOUDS.indexOf(e)>=0},e.buildRegionalAuthorityString=function(e,t,r){var n=new yr(e);n.validateAsUri();var o=n.getUrlComponents(),i=t+"."+o.HostNameAndPort;this.isPublicCloudAuthority(o.HostNameAndPort)&&(i=t+"."+j.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX);var a=yr.constructAuthorityUriFromObject(L(L({},n.getUrlComponents()),{HostNameAndPort:i})).urlString;return r?a+"?"+r:a},e.replaceWithRegionalInformation=function(t,r){return t.authorization_endpoint=e.buildRegionalAuthorityString(t.authorization_endpoint,r),t.token_endpoint=e.buildRegionalAuthorityString(t.token_endpoint,r,"allowestsrnonmsi=true"),t.end_session_endpoint&&(t.end_session_endpoint=e.buildRegionalAuthorityString(t.end_session_endpoint,r)),t},e}(),Hr=function(){function e(){}return e.createDiscoveredInstance=function(t,r,n,o,i){return H(this,void 0,void 0,(function(){var a,s;return q(this,(function(c){switch(c.label){case 0:a=e.createInstance(t,r,n,o,i),c.label=1;case 1:return c.trys.push([1,3,,4]),[4,a.resolveEndpointsAsync()];case 2:return c.sent(),[2,a];case 3:throw s=c.sent(),lt.createEndpointDiscoveryIncompleteError(s);case 4:return[2]}}))}))},e.createInstance=function(e,t,r,n,o){if(ht.isEmpty(e))throw Ft.createUrlEmptyError();return new Lr(e,t,r,n,o)},e}(),qr=function(){function e(){this.failedRequests=[],this.errors=[],this.cacheHits=0}return e.isServerTelemetryEntity=function(e,t){var r=0===e.indexOf(ce.CACHE_KEY),n=!0;return t&&(n=t.hasOwnProperty("failedRequests")&&t.hasOwnProperty("errors")&&t.hasOwnProperty("cacheHits")),r&&n},e}(),Fr=function(){function e(){}return e.isThrottlingEntity=function(e,t){var r=!1;e&&(r=0===e.indexOf(me));var n=!0;return t&&(n=t.hasOwnProperty("throttleTime")),r&&n},e}(),Kr={sendGetRequestAsync:function(){return Promise.reject(Se.createUnexpectedError("Network interface - sendGetRequestAsync() has not been implemented for the Network interface."))},sendPostRequestAsync:function(){return Promise.reject(Se.createUnexpectedError("Network interface - sendPostRequestAsync() has not been implemented for the Network interface."))}},xr=function(){function e(e,t){this.cacheOutcome=pe.NO_CACHE_HIT,this.cacheManager=t,this.apiId=e.apiId,this.correlationId=e.correlationId,this.wrapperSKU=e.wrapperSKU||j.EMPTY_STRING,this.wrapperVer=e.wrapperVer||j.EMPTY_STRING,this.telemetryCacheKey=ce.CACHE_KEY+Z.CACHE_KEY_SEPARATOR+e.clientId}return e.prototype.generateCurrentRequestHeaderValue=function(){var e=""+this.apiId+ce.VALUE_SEPARATOR+this.cacheOutcome,t=[this.wrapperSKU,this.wrapperVer].join(ce.VALUE_SEPARATOR),r=[e,this.getRegionDiscoveryFields()].join(ce.VALUE_SEPARATOR);return[ce.SCHEMA_VERSION,r,t].join(ce.CATEGORY_SEPARATOR)},e.prototype.generateLastRequestHeaderValue=function(){var t=this.getLastRequests(),r=e.maxErrorsToSend(t),n=t.failedRequests.slice(0,2*r).join(ce.VALUE_SEPARATOR),o=t.errors.slice(0,r).join(ce.VALUE_SEPARATOR),i=t.errors.length,a=[i,r<i?ce.OVERFLOW_TRUE:ce.OVERFLOW_FALSE].join(ce.VALUE_SEPARATOR);return[ce.SCHEMA_VERSION,t.cacheHits,n,o,a].join(ce.CATEGORY_SEPARATOR)},e.prototype.cacheFailedRequest=function(e){var t=this.getLastRequests();t.errors.length>=ce.MAX_CACHED_ERRORS&&(t.failedRequests.shift(),t.failedRequests.shift(),t.errors.shift()),t.failedRequests.push(this.apiId,this.correlationId),ht.isEmpty(e.subError)?ht.isEmpty(e.errorCode)?e&&e.toString()?t.errors.push(e.toString()):t.errors.push(ce.UNKNOWN_ERROR):t.errors.push(e.errorCode):t.errors.push(e.subError),this.cacheManager.setServerTelemetry(this.telemetryCacheKey,t)},e.prototype.incrementCacheHits=function(){var e=this.getLastRequests();return e.cacheHits+=1,this.cacheManager.setServerTelemetry(this.telemetryCacheKey,e),e.cacheHits},e.prototype.getLastRequests=function(){var e=new qr;return this.cacheManager.getServerTelemetry(this.telemetryCacheKey)||e},e.prototype.clearTelemetryCache=function(){var t=this.getLastRequests(),r=e.maxErrorsToSend(t);if(r===t.errors.length)this.cacheManager.removeItem(this.telemetryCacheKey);else{var n=new qr;n.failedRequests=t.failedRequests.slice(2*r),n.errors=t.errors.slice(r),this.cacheManager.setServerTelemetry(this.telemetryCacheKey,n)}},e.maxErrorsToSend=function(e){var t,r=0,n=0,o=e.errors.length;for(t=0;t<o;t++){var i=e.failedRequests[2*t]||j.EMPTY_STRING,a=e.failedRequests[2*t+1]||j.EMPTY_STRING,s=e.errors[t]||j.EMPTY_STRING;if(!((n+=i.toString().length+a.toString().length+s.length+3)<ce.MAX_LAST_HEADER_BYTES))break;r+=1}return r},e.prototype.getRegionDiscoveryFields=function(){var e=[];return e.push(this.regionUsed||""),e.push(this.regionSource||""),e.push(this.regionOutcome||""),e.join(",")},e.prototype.updateRegionDiscoveryMetadata=function(e){this.regionUsed=e.region_used,this.regionSource=e.region_source,this.regionOutcome=e.region_outcome},e.prototype.setCacheOutcome=function(e){this.cacheOutcome=e},e}(),Br="invalid_grant",Gr=483,Xr=600,jr="msal",zr=50,Wr="msal.js.browser";
/*! @azure/msal-common v6.1.0 2022-02-08 */!function(e){e.LocalStorage="localStorage",e.SessionStorage="sessionStorage",e.MemoryStorage="memoryStorage"}(Rr||(Rr={})),function(e){e.GET="GET",e.POST="POST"}(Or||(Or={})),function(e){e.AUTHORITY="authority",e.ACQUIRE_TOKEN_ACCOUNT="acquireToken.account",e.SESSION_STATE="session.state",e.REQUEST_STATE="request.state",e.NONCE_IDTOKEN="nonce.id_token",e.ORIGIN_URI="request.origin",e.RENEW_STATUS="token.renew.status",e.URL_HASH="urlHash",e.REQUEST_PARAMS="request.params",e.SCOPES="scopes",e.INTERACTION_STATUS_KEY="interaction.status",e.CCS_CREDENTIAL="ccs.credential",e.CORRELATION_ID="request.correlationId"}(kr||(kr={})),function(e){e.WRAPPER_SKU="wrapper.sku",e.WRAPPER_VER="wrapper.version"}(Nr||(Nr={})),function(e){e[e.acquireTokenRedirect=861]="acquireTokenRedirect",e[e.acquireTokenPopup=862]="acquireTokenPopup",e[e.ssoSilent=863]="ssoSilent",e[e.acquireTokenSilent_authCode=864]="acquireTokenSilent_authCode",e[e.handleRedirectPromise=865]="handleRedirectPromise",e[e.acquireTokenByCode=866]="acquireTokenByCode",e[e.acquireTokenSilent_silentFlow=61]="acquireTokenSilent_silentFlow",e[e.logout=961]="logout",e[e.logoutPopup=962]="logoutPopup"}(Pr||(Pr={})),function(e){e.Redirect="redirect",e.Popup="popup",e.Silent="silent",e.None="none"}(Ur||(Ur={})),function(e){e.Startup="startup",e.Login="login",e.Logout="logout",e.AcquireToken="acquireToken",e.SsoSilent="ssoSilent",e.HandleRedirect="handleRedirect",e.None="none"}(Mr||(Mr={}));var Yr,Qr={scopes:z};!function(e){e.React="@azure/msal-react",e.Angular="@azure/msal-angular"}(Yr||(Yr={}));var Jr=function(){function e(){}return e.decimalToHex=function(e){for(var t=e.toString(16);t.length<2;)t="0"+t;return t},e}(),Vr=function(){function e(e){this.cryptoObj=e}return e.prototype.generateGuid=function(){try{var e=new Uint8Array(16);return this.cryptoObj.getRandomValues(e),e[6]|=64,e[6]&=79,e[8]|=128,e[8]&=191,Jr.decimalToHex(e[0])+Jr.decimalToHex(e[1])+Jr.decimalToHex(e[2])+Jr.decimalToHex(e[3])+"-"+Jr.decimalToHex(e[4])+Jr.decimalToHex(e[5])+"-"+Jr.decimalToHex(e[6])+Jr.decimalToHex(e[7])+"-"+Jr.decimalToHex(e[8])+Jr.decimalToHex(e[9])+"-"+Jr.decimalToHex(e[10])+Jr.decimalToHex(e[11])+Jr.decimalToHex(e[12])+Jr.decimalToHex(e[13])+Jr.decimalToHex(e[14])+Jr.decimalToHex(e[15])}catch(e){for(var t="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx",r="0123456789abcdef",n=0,o="",i=0;i<36;i++)"-"!==t[i]&&"4"!==t[i]&&(n=16*Math.random()|0),"x"===t[i]?o+=r[n]:"y"===t[i]?(n&=3,o+=r[n|=8]):o+=t[i];return o}},e.isGuid=function(e){return/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(e)},e}(),$r=function(){function e(){}return e.stringToUtf8Arr=function(e){for(var t,r=0,n=e.length,o=0;o<n;o++)r+=(t=e.charCodeAt(o))<128?1:t<2048?2:t<65536?3:t<2097152?4:t<67108864?5:6;for(var i=new Uint8Array(r),a=0,s=0;a<r;s++)(t=e.charCodeAt(s))<128?i[a++]=t:t<2048?(i[a++]=192+(t>>>6),i[a++]=128+(63&t)):t<65536?(i[a++]=224+(t>>>12),i[a++]=128+(t>>>6&63),i[a++]=128+(63&t)):t<2097152?(i[a++]=240+(t>>>18),i[a++]=128+(t>>>12&63),i[a++]=128+(t>>>6&63),i[a++]=128+(63&t)):t<67108864?(i[a++]=248+(t>>>24),i[a++]=128+(t>>>18&63),i[a++]=128+(t>>>12&63),i[a++]=128+(t>>>6&63),i[a++]=128+(63&t)):(i[a++]=252+(t>>>30),i[a++]=128+(t>>>24&63),i[a++]=128+(t>>>18&63),i[a++]=128+(t>>>12&63),i[a++]=128+(t>>>6&63),i[a++]=128+(63&t));return i},e.stringToArrayBuffer=function(e){for(var t=new ArrayBuffer(e.length),r=new Uint8Array(t),n=0;n<e.length;n++)r[n]=e.charCodeAt(n);return t},e.utf8ArrToString=function(e){for(var t="",r=void 0,n=e.length,o=0;o<n;o++)r=e[o],t+=String.fromCharCode(r>251&&r<254&&o+5<n?1073741824*(r-252)+(e[++o]-128<<24)+(e[++o]-128<<18)+(e[++o]-128<<12)+(e[++o]-128<<6)+e[++o]-128:r>247&&r<252&&o+4<n?(r-248<<24)+(e[++o]-128<<18)+(e[++o]-128<<12)+(e[++o]-128<<6)+e[++o]-128:r>239&&r<248&&o+3<n?(r-240<<18)+(e[++o]-128<<12)+(e[++o]-128<<6)+e[++o]-128:r>223&&r<240&&o+2<n?(r-224<<12)+(e[++o]-128<<6)+e[++o]-128:r>191&&r<224&&o+1<n?(r-192<<6)+e[++o]-128:r);return t},e}(),Zr=function(){function e(){}return e.prototype.urlEncode=function(e){return encodeURIComponent(this.encode(e).replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_"))},e.prototype.urlEncodeArr=function(e){return this.base64EncArr(e).replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_")},e.prototype.encode=function(e){var t=$r.stringToUtf8Arr(e);return this.base64EncArr(t)},e.prototype.base64EncArr=function(e){for(var t=(3-e.length%3)%3,r="",n=void 0,o=e.length,i=0,a=0;a<o;a++)n=a%3,i|=e[a]<<(16>>>n&24),2!==n&&e.length-a!=1||(r+=String.fromCharCode(this.uint6ToB64(i>>>18&63),this.uint6ToB64(i>>>12&63),this.uint6ToB64(i>>>6&63),this.uint6ToB64(63&i)),i=0);return 0===t?r:r.substring(0,r.length-t)+(1===t?"=":"==")},e.prototype.uint6ToB64=function(e){return e<26?e+65:e<52?e+71:e<62?e-4:62===e?43:63===e?47:65},e}(),en=function(){function e(){}return e.prototype.decode=function(e){var t=e.replace(/-/g,"+").replace(/_/g,"/");switch(t.length%4){case 0:break;case 2:t+="==";break;case 3:t+="=";break;default:throw new Error("Invalid base64 string")}var r=this.base64DecToArr(t);return $r.utf8ArrToString(r)},e.prototype.base64DecToArr=function(e,t){for(var r=e.replace(/[^A-Za-z0-9\+\/]/g,""),n=r.length,o=t?Math.ceil((3*n+1>>>2)/t)*t:3*n+1>>>2,i=new Uint8Array(o),a=void 0,s=void 0,c=0,u=0,d=0;d<n;d++)if(s=3&d,c|=this.b64ToUint6(r.charCodeAt(d))<<18-6*s,3===s||n-d==1){for(a=0;a<3&&u<o;a++,u++)i[u]=c>>>(16>>>a&24)&255;c=0}return i},e.prototype.b64ToUint6=function(e){return e>64&&e<91?e-65:e>96&&e<123?e-71:e>47&&e<58?e+4:43===e?62:47===e?63:0},e}(),tn={code:"pkce_not_created",desc:"The PKCE code challenge and verifier could not be generated."},rn={code:"crypto_nonexistent",desc:"The crypto object or function is not available."},nn={code:"http_method_not_implemented",desc:"The HTTP method given has not been implemented in this library."},on={code:"empty_navigate_uri",desc:"Navigation URI is empty. Please check stack trace for more info."},an={code:"hash_empty_error",desc:"Hash value cannot be processed because it is empty. Please verify that your redirectUri is not clearing the hash."},sn={code:"no_state_in_hash",desc:"Hash does not contain state. Please verify that the request originated from msal."},cn={code:"hash_does_not_contain_known_properties",desc:"Hash does not contain known properites. Please verify that your redirectUri is not changing the hash."},un={code:"unable_to_parse_state",desc:"Unable to parse state. Please verify that the request originated from msal."},dn={code:"state_interaction_type_mismatch",desc:"Hash contains state but the interaction type does not match the caller."},ln={code:"interaction_in_progress",desc:"Interaction is currently in progress. Please ensure that this interaction has been completed before calling an interactive API.  For more visit: aka.ms/msaljs/browser-errors."},hn={code:"popup_window_error",desc:"Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser."},pn={code:"empty_window_error",desc:"window.open returned null or undefined window object."},gn={code:"user_cancelled",desc:"User cancelled the flow."},fn={code:"monitor_window_timeout",desc:"Token acquisition in popup failed due to timeout. For more visit: aka.ms/msaljs/browser-errors."},mn={code:"monitor_window_timeout",desc:"Token acquisition in iframe failed due to timeout. For more visit: aka.ms/msaljs/browser-errors."},yn={code:"redirect_in_iframe",desc:"Code flow is not supported inside an iframe. Please ensure you are using MSAL.js in a top frame of the window if using the redirect APIs, or use the popup APIs."},vn={code:"block_iframe_reload",desc:"Request was blocked inside an iframe because MSAL detected an authentication response. For more visit: aka.ms/msaljs/browser-errors"},En={code:"block_nested_popups",desc:"Request was blocked inside a popup because MSAL detected it was running in a popup."},Cn={code:"iframe_closed_prematurely",desc:"The iframe being monitored was closed prematurely."},wn={code:"silent_logout_unsupported",desc:"Silent logout not supported. Please call logoutRedirect or logoutPopup instead."},Sn={code:"no_account_error",desc:"No account object provided to acquireTokenSilent and no active account has been set. Please call setActiveAccount or provide an account on the request."},Tn={code:"silent_prompt_value_error",desc:"The value given for the prompt value is not valid for silent requests - must be set to 'none'."},An={code:"no_token_request_cache_error",desc:"No token request found in cache."},In={code:"unable_to_parse_token_request_cache_error",desc:"The cached token request could not be parsed."},_n={code:"no_cached_authority_error",desc:"No cached authority found."},bn={code:"auth_request_not_set_error",desc:"Auth Request not set. Please ensure initiateAuthRequest was called from the InteractionHandler"},Rn={code:"invalid_cache_type",desc:"Invalid cache type"},On={code:"non_browser_environment",desc:"Login and token requests are not supported in non-browser environments."},kn={code:"database_not_open",desc:"Database is not open!"},Nn={code:"no_network_connectivity",desc:"No network connectivity. Check your internet connection."},Pn={code:"post_request_failed",desc:"Network request failed: If the browser threw a CORS error, check that the redirectUri is registered in the Azure App Portal as type 'SPA'"},Un={code:"get_request_failed",desc:"Network request failed. Please check the network trace to determine root cause."},Mn={code:"failed_to_parse_response",desc:"Failed to parse network response. Check network trace."},Dn={code:"unable_to_load_token",desc:"Error loading token to cache."},Ln={code:"crypto_key_not_found",desc:"Cryptographic Key or Keypair not found in browser storage."},Hn={code:"auth_code_required",desc:"An authorization code must be provided (as the `code` property on the request) to this flow."},qn={code:"database_unavailable",desc:"IndexedDB, which is required for persistent cryptographic key storage, is unavailable. This may be caused by browser privacy features which block persistent storage in third-party contexts."},Fn=function(e){function t(r,n){var o=e.call(this,r,n)||this;return Object.setPrototypeOf(o,t.prototype),o.name="BrowserAuthError",o}return R(t,e),t.createPkceNotGeneratedError=function(e){return new t(tn.code,tn.desc+" Detail:"+e)},t.createCryptoNotAvailableError=function(e){return new t(rn.code,rn.desc+" Detail:"+e)},t.createHttpMethodNotImplementedError=function(e){return new t(nn.code,nn.desc+" Given Method: "+e)},t.createEmptyNavigationUriError=function(){return new t(on.code,on.desc)},t.createEmptyHashError=function(e){return new t(an.code,an.desc+" Given Url: "+e)},t.createHashDoesNotContainStateError=function(){return new t(sn.code,sn.desc)},t.createHashDoesNotContainKnownPropertiesError=function(){return new t(cn.code,cn.desc)},t.createUnableToParseStateError=function(){return new t(un.code,un.desc)},t.createStateInteractionTypeMismatchError=function(){return new t(dn.code,dn.desc)},t.createInteractionInProgressError=function(){return new t(ln.code,ln.desc)},t.createPopupWindowError=function(e){var r=hn.desc;return r=ht.isEmpty(e)?r:r+" Details: "+e,new t(hn.code,r)},t.createEmptyWindowCreatedError=function(){return new t(pn.code,pn.desc)},t.createUserCancelledError=function(){return new t(gn.code,gn.desc)},t.createMonitorPopupTimeoutError=function(){return new t(fn.code,fn.desc)},t.createMonitorIframeTimeoutError=function(){return new t(mn.code,mn.desc)},t.createRedirectInIframeError=function(e){return new t(yn.code,yn.desc+" (window.parent !== window) => "+e)},t.createBlockReloadInHiddenIframeError=function(){return new t(vn.code,vn.desc)},t.createBlockAcquireTokenInPopupsError=function(){return new t(En.code,En.desc)},t.createIframeClosedPrematurelyError=function(){return new t(Cn.code,Cn.desc)},t.createSilentLogoutUnsupportedError=function(){return new t(wn.code,wn.desc)},t.createNoAccountError=function(){return new t(Sn.code,Sn.desc)},t.createSilentPromptValueError=function(e){return new t(Tn.code,Tn.desc+" Given value: "+e)},t.createUnableToParseTokenRequestCacheError=function(){return new t(In.code,In.desc)},t.createNoTokenRequestCacheError=function(){return new t(An.code,An.desc)},t.createAuthRequestNotSetError=function(){return new t(bn.code,bn.desc)},t.createNoCachedAuthorityError=function(){return new t(_n.code,_n.desc)},t.createInvalidCacheTypeError=function(){return new t(Rn.code,""+Rn.desc)},t.createNonBrowserEnvironmentError=function(){return new t(On.code,On.desc)},t.createDatabaseNotOpenError=function(){return new t(kn.code,kn.desc)},t.createNoNetworkConnectivityError=function(){return new t(Nn.code,Nn.desc)},t.createPostRequestFailedError=function(e,r){return new t(Pn.code,Pn.desc+" | Network client threw: "+e+" | Attempted to reach: "+r.split("?")[0])},t.createGetRequestFailedError=function(e,r){return new t(Un.code,Un.desc+" | Network client threw: "+e+" | Attempted to reach: "+r.split("?")[0])},t.createFailedToParseNetworkResponseError=function(e){return new t(Mn.code,Mn.desc+" | Attempted to reach: "+e.split("?")[0])},t.createUnableToLoadTokenError=function(e){return new t(Dn.code,Dn.desc+" | "+e)},t.createSigningKeyNotFoundInStorageError=function(e){return new t(Ln.code,Ln.desc+" | No match found for KeyId: "+e)},t.createAuthCodeRequiredError=function(){return new t(Hn.code,Hn.desc)},t.createDatabaseUnavailableError=function(){return new t(qn.code,qn.desc)},t}(Se),Kn=function(){function e(e){this.base64Encode=new Zr,this.cryptoObj=e}return e.prototype.generateCodes=function(){return k(this,void 0,void 0,(function(){var e,t;return N(this,(function(r){switch(r.label){case 0:return e=this.generateCodeVerifier(),[4,this.generateCodeChallengeFromVerifier(e)];case 1:return t=r.sent(),[2,{verifier:e,challenge:t}]}}))}))},e.prototype.generateCodeVerifier=function(){try{var e=new Uint8Array(32);return this.cryptoObj.getRandomValues(e),this.base64Encode.urlEncodeArr(e)}catch(e){throw Fn.createPkceNotGeneratedError(e)}},e.prototype.generateCodeChallengeFromVerifier=function(e){return k(this,void 0,void 0,(function(){var t,r;return N(this,(function(n){switch(n.label){case 0:return n.trys.push([0,2,,3]),[4,this.cryptoObj.sha256Digest(e)];case 1:return t=n.sent(),[2,this.base64Encode.urlEncodeArr(new Uint8Array(t))];case 2:throw r=n.sent(),Fn.createPkceNotGeneratedError(r);case 3:return[2]}}))}))},e}(),xn=new Uint8Array([1,0,1]),Bn=function(){function e(e){if(this.logger=e,!this.hasCryptoAPI())throw Fn.createCryptoNotAvailableError("Browser crypto or msCrypto object not available.");this._keygenAlgorithmOptions={name:"RSASSA-PKCS1-v1_5",hash:"SHA-256",modulusLength:2048,publicExponent:xn}}return e.prototype.sha256Digest=function(e){return k(this,void 0,void 0,(function(){var t;return N(this,(function(r){return t=$r.stringToUtf8Arr(e),[2,this.hasIECrypto()?this.getMSCryptoDigest("SHA-256",t):this.getSubtleCryptoDigest("SHA-256",t)]}))}))},e.prototype.getRandomValues=function(e){var t=window.msCrypto||window.crypto;if(!t.getRandomValues)throw Fn.createCryptoNotAvailableError("getRandomValues does not exist.");t.getRandomValues(e)},e.prototype.generateKeyPair=function(e,t){return k(this,void 0,void 0,(function(){return N(this,(function(r){return[2,this.hasIECrypto()?this.msCryptoGenerateKey(e,t):window.crypto.subtle.generateKey(this._keygenAlgorithmOptions,e,t)]}))}))},e.prototype.exportJwk=function(e){return k(this,void 0,void 0,(function(){return N(this,(function(t){return[2,this.hasIECrypto()?this.msCryptoExportJwk(e):window.crypto.subtle.exportKey("jwk",e)]}))}))},e.prototype.importJwk=function(t,r,n){return k(this,void 0,void 0,(function(){var o,i;return N(this,(function(a){return o=e.getJwkString(t),i=$r.stringToArrayBuffer(o),[2,this.hasIECrypto()?this.msCryptoImportKey(i,r,n):window.crypto.subtle.importKey("jwk",t,this._keygenAlgorithmOptions,r,n)]}))}))},e.prototype.sign=function(e,t){return k(this,void 0,void 0,(function(){return N(this,(function(r){return[2,this.hasIECrypto()?this.msCryptoSign(e,t):window.crypto.subtle.sign(this._keygenAlgorithmOptions,e,t)]}))}))},e.prototype.hasCryptoAPI=function(){return this.hasIECrypto()||this.hasBrowserCrypto()},e.prototype.hasIECrypto=function(){return"msCrypto"in window},e.prototype.hasBrowserCrypto=function(){return"crypto"in window},e.prototype.getSubtleCryptoDigest=function(e,t){return k(this,void 0,void 0,(function(){return N(this,(function(r){return[2,window.crypto.subtle.digest(e,t)]}))}))},e.prototype.getMSCryptoDigest=function(e,t){return k(this,void 0,void 0,(function(){return N(this,(function(r){return[2,new Promise((function(r,n){var o=window.msCrypto.subtle.digest(e,t.buffer);o.addEventListener("complete",(function(e){r(e.target.result)})),o.addEventListener("error",(function(e){n(e)}))}))]}))}))},e.prototype.msCryptoGenerateKey=function(e,t){return k(this,void 0,void 0,(function(){var r=this;return N(this,(function(n){return[2,new Promise((function(n,o){var i=window.msCrypto.subtle.generateKey(r._keygenAlgorithmOptions,e,t);i.addEventListener("complete",(function(e){n(e.target.result)})),i.addEventListener("error",(function(e){o(e)}))}))]}))}))},e.prototype.msCryptoExportJwk=function(e){return k(this,void 0,void 0,(function(){return N(this,(function(t){return[2,new Promise((function(t,r){var n=window.msCrypto.subtle.exportKey("jwk",e);n.addEventListener("complete",(function(e){var n=e.target.result,o=$r.utf8ArrToString(new Uint8Array(n)).replace(/\r/g,"").replace(/\n/g,"").replace(/\t/g,"").split(" ").join("").replace("\0","");try{t(JSON.parse(o))}catch(e){r(e)}})),n.addEventListener("error",(function(e){r(e)}))}))]}))}))},e.prototype.msCryptoImportKey=function(e,t,r){return k(this,void 0,void 0,(function(){var n=this;return N(this,(function(o){return[2,new Promise((function(o,i){var a=window.msCrypto.subtle.importKey("jwk",e,n._keygenAlgorithmOptions,t,r);a.addEventListener("complete",(function(e){o(e.target.result)})),a.addEventListener("error",(function(e){i(e)}))}))]}))}))},e.prototype.msCryptoSign=function(e,t){return k(this,void 0,void 0,(function(){var r=this;return N(this,(function(n){return[2,new Promise((function(n,o){var i=window.msCrypto.subtle.sign(r._keygenAlgorithmOptions,e,t);i.addEventListener("complete",(function(e){n(e.target.result)})),i.addEventListener("error",(function(e){o(e)}))}))]}))}))},e.getJwkString=function(e){return JSON.stringify(e,Object.keys(e).sort())},e}(),Gn=function(){function e(){this.dbName="msal.db",this.version=1,this.tableName="msal.db.keys",this.dbOpen=!1}return e.prototype.open=function(){return k(this,void 0,void 0,(function(){var e=this;return N(this,(function(t){return[2,new Promise((function(t,r){var n=window.indexedDB.open(e.dbName,e.version);n.addEventListener("upgradeneeded",(function(t){t.target.result.createObjectStore(e.tableName)})),n.addEventListener("success",(function(r){var n=r;e.db=n.target.result,e.dbOpen=!0,t()})),n.addEventListener("error",(function(){return r(Fn.createDatabaseUnavailableError())}))}))]}))}))},e.prototype.validateDbIsOpen=function(){return k(this,void 0,void 0,(function(){return N(this,(function(e){switch(e.label){case 0:return this.dbOpen?[3,2]:[4,this.open()];case 1:return[2,e.sent()];case 2:return[2]}}))}))},e.prototype.getItem=function(e){return k(this,void 0,void 0,(function(){var t=this;return N(this,(function(r){switch(r.label){case 0:return[4,this.validateDbIsOpen()];case 1:return r.sent(),[2,new Promise((function(r,n){if(!t.db)return n(Fn.createDatabaseNotOpenError());var o=t.db.transaction([t.tableName],"readonly").objectStore(t.tableName).get(e);o.addEventListener("success",(function(e){r(e.target.result)})),o.addEventListener("error",(function(e){return n(e)}))}))]}}))}))},e.prototype.setItem=function(e,t){return k(this,void 0,void 0,(function(){var r=this;return N(this,(function(n){switch(n.label){case 0:return[4,this.validateDbIsOpen()];case 1:return n.sent(),[2,new Promise((function(n,o){if(!r.db)return o(Fn.createDatabaseNotOpenError());var i=r.db.transaction([r.tableName],"readwrite").objectStore(r.tableName).put(t,e);i.addEventListener("success",(function(){return n()})),i.addEventListener("error",(function(e){return o(e)}))}))]}}))}))},e.prototype.removeItem=function(e){return k(this,void 0,void 0,(function(){var t=this;return N(this,(function(r){switch(r.label){case 0:return[4,this.validateDbIsOpen()];case 1:return r.sent(),[2,new Promise((function(r,n){if(!t.db)return n(Fn.createDatabaseNotOpenError());var o=t.db.transaction([t.tableName],"readwrite").objectStore(t.tableName).delete(e);o.addEventListener("success",(function(){return r()})),o.addEventListener("error",(function(e){return n(e)}))}))]}}))}))},e.prototype.getKeys=function(){return k(this,void 0,void 0,(function(){var e=this;return N(this,(function(t){switch(t.label){case 0:return[4,this.validateDbIsOpen()];case 1:return t.sent(),[2,new Promise((function(t,r){if(!e.db)return r(Fn.createDatabaseNotOpenError());var n=e.db.transaction([e.tableName],"readonly").objectStore(e.tableName).getAllKeys();n.addEventListener("success",(function(e){t(e.target.result)})),n.addEventListener("error",(function(e){return r(e)}))}))]}}))}))},e.prototype.containsKey=function(e){return k(this,void 0,void 0,(function(){var t=this;return N(this,(function(r){switch(r.label){case 0:return[4,this.validateDbIsOpen()];case 1:return r.sent(),[2,new Promise((function(r,n){if(!t.db)return n(Fn.createDatabaseNotOpenError());var o=t.db.transaction([t.tableName],"readonly").objectStore(t.tableName).count(e);o.addEventListener("success",(function(e){r(1===e.target.result)})),o.addEventListener("error",(function(e){return n(e)}))}))]}}))}))},e.prototype.deleteDatabase=function(){return k(this,void 0,void 0,(function(){return N(this,(function(e){return[2,new Promise((function(e,t){var r=window.indexedDB.deleteDatabase("msal.db");r.addEventListener("success",(function(){return e(!0)})),r.addEventListener("error",(function(){return t(!1)}))}))]}))}))},e}(),Xn=function(){function e(){this.cache=new Map}return e.prototype.getItem=function(e){return this.cache.get(e)||null},e.prototype.setItem=function(e,t){this.cache.set(e,t)},e.prototype.removeItem=function(e){this.cache.delete(e)},e.prototype.getKeys=function(){var e=[];return this.cache.forEach((function(t,r){e.push(r)})),e},e.prototype.containsKey=function(e){return this.cache.has(e)},e.prototype.clear=function(){this.cache.clear()},e}(),jn=function(){function e(e){this.inMemoryCache=new Xn,this.indexedDBCache=new Gn,this.logger=e}return e.prototype.handleDatabaseAccessError=function(e){e instanceof Fn&&e.errorCode===qn.code&&this.logger.error("Could not access persistent storage. This may be caused by browser privacy features which block persistent storage in third-party contexts.")},e.prototype.getItem=function(e){return k(this,void 0,void 0,(function(){var t,r;return N(this,(function(n){switch(n.label){case 0:if(t=this.inMemoryCache.getItem(e))return[3,4];n.label=1;case 1:return n.trys.push([1,3,,4]),this.logger.verbose("Queried item not found in in-memory cache, now querying persistent storage."),[4,this.indexedDBCache.getItem(e)];case 2:return[2,n.sent()];case 3:return r=n.sent(),this.handleDatabaseAccessError(r),[3,4];case 4:return[2,t]}}))}))},e.prototype.setItem=function(e,t){return k(this,void 0,void 0,(function(){var r;return N(this,(function(n){switch(n.label){case 0:this.inMemoryCache.setItem(e,t),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,this.indexedDBCache.setItem(e,t)];case 2:return n.sent(),[3,4];case 3:return r=n.sent(),this.handleDatabaseAccessError(r),[3,4];case 4:return[2]}}))}))},e.prototype.removeItem=function(e){return k(this,void 0,void 0,(function(){var t;return N(this,(function(r){switch(r.label){case 0:this.inMemoryCache.removeItem(e),r.label=1;case 1:return r.trys.push([1,3,,4]),[4,this.indexedDBCache.removeItem(e)];case 2:return r.sent(),[3,4];case 3:return t=r.sent(),this.handleDatabaseAccessError(t),[3,4];case 4:return[2]}}))}))},e.prototype.getKeys=function(){return k(this,void 0,void 0,(function(){var e,t;return N(this,(function(r){switch(r.label){case 0:if(0!==(e=this.inMemoryCache.getKeys()).length)return[3,4];r.label=1;case 1:return r.trys.push([1,3,,4]),this.logger.verbose("In-memory cache is empty, now querying persistent storage."),[4,this.indexedDBCache.getKeys()];case 2:return[2,r.sent()];case 3:return t=r.sent(),this.handleDatabaseAccessError(t),[3,4];case 4:return[2,e]}}))}))},e.prototype.containsKey=function(e){return k(this,void 0,void 0,(function(){var t,r;return N(this,(function(n){switch(n.label){case 0:if(t=this.inMemoryCache.containsKey(e))return[3,4];n.label=1;case 1:return n.trys.push([1,3,,4]),this.logger.verbose("Key not found in in-memory cache, now querying persistent storage."),[4,this.indexedDBCache.containsKey(e)];case 2:return[2,n.sent()];case 3:return r=n.sent(),this.handleDatabaseAccessError(r),[3,4];case 4:return[2,t]}}))}))},e.prototype.clear=function(){return k(this,void 0,void 0,(function(){var e;return N(this,(function(t){switch(t.label){case 0:this.inMemoryCache.clear(),t.label=1;case 1:return t.trys.push([1,3,,4]),[4,this.indexedDBCache.deleteDatabase()];case 2:return t.sent(),[3,4];case 3:return e=t.sent(),this.handleDatabaseAccessError(e),[3,4];case 4:return[2]}}))}))},e}(),zn=function(){function e(e){this.logger=e,this.browserCrypto=new Bn(this.logger),this.b64Encode=new Zr,this.b64Decode=new en,this.guidGenerator=new Vr(this.browserCrypto),this.pkceGenerator=new Kn(this.browserCrypto),this.cache={asymmetricKeys:new jn(this.logger),symmetricKeys:new jn(this.logger)}}return e.prototype.createNewGuid=function(){return this.guidGenerator.generateGuid()},e.prototype.base64Encode=function(e){return this.b64Encode.encode(e)},e.prototype.base64Decode=function(e){return this.b64Decode.decode(e)},e.prototype.generatePkceCodes=function(){return k(this,void 0,void 0,(function(){return N(this,(function(e){return[2,this.pkceGenerator.generateCodes()]}))}))},e.prototype.getPublicKeyThumbprint=function(t){return k(this,void 0,void 0,(function(){var r,n,o,i,a,s,c;return N(this,(function(u){switch(u.label){case 0:return[4,this.browserCrypto.generateKeyPair(e.EXTRACTABLE,e.POP_KEY_USAGES)];case 1:return r=u.sent(),[4,this.browserCrypto.exportJwk(r.publicKey)];case 2:return n=u.sent(),o={e:n.e,kty:n.kty,n:n.n},i=Bn.getJwkString(o),[4,this.hashString(i)];case 3:return a=u.sent(),[4,this.browserCrypto.exportJwk(r.privateKey)];case 4:return s=u.sent(),[4,this.browserCrypto.importJwk(s,!1,["sign"])];case 5:return c=u.sent(),[4,this.cache.asymmetricKeys.setItem(a,{privateKey:c,publicKey:r.publicKey,requestMethod:t.resourceRequestMethod,requestUri:t.resourceRequestUri})];case 6:return u.sent(),[2,a]}}))}))},e.prototype.removeTokenBindingKey=function(e){return k(this,void 0,void 0,(function(){return N(this,(function(t){switch(t.label){case 0:return[4,this.cache.asymmetricKeys.removeItem(e)];case 1:return t.sent(),[4,this.cache.asymmetricKeys.containsKey(e)];case 2:return[2,!t.sent()]}}))}))},e.prototype.clearKeystore=function(){return k(this,void 0,void 0,(function(){var e,t,r;return N(this,(function(n){switch(n.label){case 0:return e=Object.keys(this.cache),(t=this.cache[e[0]])?[4,t.deleteDatabase()]:[3,2];case 1:return r=n.sent(),[3,3];case 2:r=!1,n.label=3;case 3:return[2,r]}}))}))},e.prototype.signJwt=function(e,t){return k(this,void 0,void 0,(function(){var r,n,o,i,a,s,c,u,d,l;return N(this,(function(h){switch(h.label){case 0:return[4,this.cache.asymmetricKeys.getItem(t)];case 1:if(!(r=h.sent()))throw Fn.createSigningKeyNotFoundInStorageError(t);return[4,this.browserCrypto.exportJwk(r.publicKey)];case 2:return n=h.sent(),o=Bn.getJwkString(n),i={alg:n.alg,type:"jwk"},a=this.b64Encode.urlEncode(JSON.stringify(i)),e.cnf={jwk:JSON.parse(o)},s=this.b64Encode.urlEncode(JSON.stringify(e)),c=a+"."+s,u=$r.stringToArrayBuffer(c),[4,this.browserCrypto.sign(r.privateKey,u)];case 3:return d=h.sent(),l=this.b64Encode.urlEncodeArr(new Uint8Array(d)),[2,c+"."+l]}}))}))},e.prototype.hashString=function(e){return k(this,void 0,void 0,(function(){var t,r;return N(this,(function(n){switch(n.label){case 0:return[4,this.browserCrypto.sha256Digest(e)];case 1:return t=n.sent(),r=new Uint8Array(t),[2,this.b64Encode.urlEncodeArr(r)]}}))}))},e.POP_KEY_USAGES=["sign","verify"],e.EXTRACTABLE=!0,e}(),Wn={code:"redirect_uri_empty",desc:"A redirect URI is required for all calls, and none has been set."},Yn={code:"post_logout_uri_empty",desc:"A post logout redirect has not been set."},Qn={code:"storage_not_supported",desc:"Given storage configuration option was not supported."},Jn={code:"no_redirect_callbacks",desc:"No redirect callbacks have been set. Please call setRedirectCallbacks() with the appropriate function arguments before continuing. More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics."},Vn={code:"stubbed_public_client_application_called",desc:"Stub instance of Public Client Application was called. If using msal-react, please ensure context is not used without a provider. For more visit: aka.ms/msaljs/browser-errors"},$n={code:"in_mem_redirect_unavailable",desc:"Redirect cannot be supported. In-memory storage was selected and storeAuthStateInCookie=false, which would cause the library to be unable to handle the incoming hash. If you would like to use the redirect API, please use session/localStorage or set storeAuthStateInCookie=true."},Zn=function(e){function t(r,n){var o=e.call(this,r,n)||this;return o.name="BrowserConfigurationAuthError",Object.setPrototypeOf(o,t.prototype),o}return R(t,e),t.createRedirectUriEmptyError=function(){return new t(Wn.code,Wn.desc)},t.createPostLogoutRedirectUriEmptyError=function(){return new t(Yn.code,Yn.desc)},t.createStorageNotSupportedError=function(e){return new t(Qn.code,Qn.desc+" Given Location: "+e)},t.createRedirectCallbacksNotSetError=function(){return new t(Jn.code,Jn.desc)},t.createStubPcaInstanceCalledError=function(){return new t(Vn.code,Vn.desc)},t.createInMemoryRedirectUnavailableError=function(){return new t($n.code,$n.desc)},t}(Se),eo=function(){function e(e){this.validateWindowStorage(e),this.windowStorage=window[e]}return e.prototype.validateWindowStorage=function(e){if(e!==Rr.LocalStorage&&e!==Rr.SessionStorage)throw Zn.createStorageNotSupportedError(e);if(!!!window[e])throw Zn.createStorageNotSupportedError(e)},e.prototype.getItem=function(e){return this.windowStorage.getItem(e)},e.prototype.setItem=function(e,t){this.windowStorage.setItem(e,t)},e.prototype.removeItem=function(e){this.windowStorage.removeItem(e)},e.prototype.getKeys=function(){return Object.keys(this.windowStorage)},e.prototype.containsKey=function(e){return this.windowStorage.hasOwnProperty(e)},e}(),to=function(){function e(){}return e.extractBrowserRequestState=function(e,t){if(ht.isEmpty(t))return null;try{return mr.parseRequestState(e,t).libraryState.meta}catch(e){throw lt.createInvalidStateError(t,e)}},e.parseServerResponseFromHash=function(e){if(!e)return{};var t=new yr(e);return yr.getDeserializedHash(t.getHash())},e}(),ro=function(e){function t(t,r,n,o){var i=e.call(this,t,n)||this;return i.COOKIE_LIFE_MULTIPLIER=864e5,i.cacheConfig=r,i.logger=o,i.internalStorage=new Xn,i.browserStorage=i.setupBrowserStorage(i.cacheConfig.cacheLocation),i.temporaryCacheStorage=i.setupTemporaryCacheStorage(i.cacheConfig.cacheLocation),i.migrateCacheEntries(),i}return R(t,e),t.prototype.setupBrowserStorage=function(e){switch(e){case Rr.LocalStorage:case Rr.SessionStorage:try{return new eo(e)}catch(e){this.logger.verbose(e);break}}return this.cacheConfig.cacheLocation=Rr.MemoryStorage,new Xn},t.prototype.setupTemporaryCacheStorage=function(e){switch(e){case Rr.LocalStorage:case Rr.SessionStorage:try{return new eo(Rr.SessionStorage)}catch(e){return this.logger.verbose(e),this.internalStorage}case Rr.MemoryStorage:default:return this.internalStorage}},t.prototype.migrateCacheEntries=function(){var e=this,t=j.CACHE_PREFIX+"."+x.ID_TOKEN,r=j.CACHE_PREFIX+"."+x.CLIENT_INFO,n=j.CACHE_PREFIX+"."+x.ERROR,o=j.CACHE_PREFIX+"."+x.ERROR_DESC,i=[this.browserStorage.getItem(t),this.browserStorage.getItem(r),this.browserStorage.getItem(n),this.browserStorage.getItem(o)];[x.ID_TOKEN,x.CLIENT_INFO,x.ERROR,x.ERROR_DESC].forEach((function(t,r){return e.migrateCacheEntry(t,i[r])}))},t.prototype.migrateCacheEntry=function(e,t){t&&this.setTemporaryCache(e,t,!0)},t.prototype.validateAndParseJson=function(e){try{var t=JSON.parse(e);return t&&"object"==typeof t?t:null}catch(e){return null}},t.prototype.getItem=function(e){return this.browserStorage.getItem(e)},t.prototype.setItem=function(e,t){this.browserStorage.setItem(e,t)},t.prototype.getAccount=function(e){var t=this.getItem(e);if(!t)return null;var r=this.validateAndParseJson(t);return r&&Gt.isAccountEntity(r)?jt.toObject(new Gt,r):null},t.prototype.setAccount=function(e){this.logger.trace("BrowserCacheManager.setAccount called");var t=e.generateAccountKey();this.setItem(t,JSON.stringify(e))},t.prototype.getIdTokenCredential=function(e){var t=this.getItem(e);if(!t)return this.logger.trace("BrowserCacheManager.getIdTokenCredential: called, no cache hit"),null;var r=this.validateAndParseJson(t);return r&&sr.isIdTokenEntity(r)?(this.logger.trace("BrowserCacheManager.getIdTokenCredential: cache hit"),jt.toObject(new sr,r)):(this.logger.trace("BrowserCacheManager.getIdTokenCredential: called, no cache hit"),null)},t.prototype.setIdTokenCredential=function(e){this.logger.trace("BrowserCacheManager.setIdTokenCredential called");var t=e.generateCredentialKey();this.setItem(t,JSON.stringify(e))},t.prototype.getAccessTokenCredential=function(e){var t=this.getItem(e);if(!t)return this.logger.trace("BrowserCacheManager.getAccessTokenCredential: called, no cache hit"),null;var r=this.validateAndParseJson(t);return r&&ur.isAccessTokenEntity(r)?(this.logger.trace("BrowserCacheManager.getAccessTokenCredential: cache hit"),jt.toObject(new ur,r)):(this.logger.trace("BrowserCacheManager.getAccessTokenCredential: called, no cache hit"),null)},t.prototype.setAccessTokenCredential=function(e){this.logger.trace("BrowserCacheManager.setAccessTokenCredential called");var t=e.generateCredentialKey();this.setItem(t,JSON.stringify(e))},t.prototype.getRefreshTokenCredential=function(e){var t=this.getItem(e);if(!t)return this.logger.trace("BrowserCacheManager.getRefreshTokenCredential: called, no cache hit"),null;var r=this.validateAndParseJson(t);return r&&dr.isRefreshTokenEntity(r)?(this.logger.trace("BrowserCacheManager.getRefreshTokenCredential: cache hit"),jt.toObject(new dr,r)):(this.logger.trace("BrowserCacheManager.getRefreshTokenCredential: called, no cache hit"),null)},t.prototype.setRefreshTokenCredential=function(e){this.logger.trace("BrowserCacheManager.setRefreshTokenCredential called");var t=e.generateCredentialKey();this.setItem(t,JSON.stringify(e))},t.prototype.getAppMetadata=function(e){var t=this.getItem(e);if(!t)return this.logger.trace("BrowserCacheManager.getAppMetadata: called, no cache hit"),null;var r=this.validateAndParseJson(t);return r&&Cr.isAppMetadataEntity(e,r)?(this.logger.trace("BrowserCacheManager.getAppMetadata: cache hit"),jt.toObject(new Cr,r)):(this.logger.trace("BrowserCacheManager.getAppMetadata: called, no cache hit"),null)},t.prototype.setAppMetadata=function(e){this.logger.trace("BrowserCacheManager.setAppMetadata called");var t=e.generateAppMetadataKey();this.setItem(t,JSON.stringify(e))},t.prototype.getServerTelemetry=function(e){var t=this.getItem(e);if(!t)return this.logger.trace("BrowserCacheManager.getServerTelemetry: called, no cache hit"),null;var r=this.validateAndParseJson(t);return r&&qr.isServerTelemetryEntity(e,r)?(this.logger.trace("BrowserCacheManager.getServerTelemetry: cache hit"),jt.toObject(new qr,r)):(this.logger.trace("BrowserCacheManager.getServerTelemetry: called, no cache hit"),null)},t.prototype.setServerTelemetry=function(e,t){this.logger.trace("BrowserCacheManager.setServerTelemetry called"),this.setItem(e,JSON.stringify(t))},t.prototype.getAuthorityMetadata=function(e){var t=this.internalStorage.getItem(e);if(!t)return this.logger.trace("BrowserCacheManager.getAuthorityMetadata: called, no cache hit"),null;var r=this.validateAndParseJson(t);return r&&br.isAuthorityMetadataEntity(e,r)?(this.logger.trace("BrowserCacheManager.getAuthorityMetadata: cache hit"),jt.toObject(new br,r)):null},t.prototype.getAuthorityMetadataKeys=function(){var e=this;return this.internalStorage.getKeys().filter((function(t){return e.isAuthorityMetadata(t)}))},t.prototype.setWrapperMetadata=function(e,t){this.internalStorage.setItem(Nr.WRAPPER_SKU,e),this.internalStorage.setItem(Nr.WRAPPER_VER,t)},t.prototype.getWrapperMetadata=function(){return[this.internalStorage.getItem(Nr.WRAPPER_SKU)||"",this.internalStorage.getItem(Nr.WRAPPER_VER)||""]},t.prototype.setAuthorityMetadata=function(e,t){this.logger.trace("BrowserCacheManager.setAuthorityMetadata called"),this.internalStorage.setItem(e,JSON.stringify(t))},t.prototype.getActiveAccount=function(){var e=this.generateCacheKey(x.ACTIVE_ACCOUNT),t=this.browserStorage.getItem(e);return t&&this.getAccountInfoByFilter({localAccountId:t})[0]||null},t.prototype.setActiveAccount=function(e){var t=this.generateCacheKey(x.ACTIVE_ACCOUNT);e?(this.logger.verbose("setActiveAccount: Active account set"),this.browserStorage.setItem(t,e.localAccountId)):(this.logger.verbose("setActiveAccount: No account passed, active account not set"),this.browserStorage.removeItem(t))},t.prototype.getAccountInfoByFilter=function(e){return this.getAllAccounts().filter((function(t){return(!e.username||e.username.toLowerCase()===t.username.toLowerCase())&&((!e.homeAccountId||e.homeAccountId===t.homeAccountId)&&((!e.localAccountId||e.localAccountId===t.localAccountId)&&((!e.tenantId||e.tenantId===t.tenantId)&&(!e.environment||e.environment===t.environment))))}))},t.prototype.getThrottlingCache=function(e){var t=this.getItem(e);if(!t)return this.logger.trace("BrowserCacheManager.getThrottlingCache: called, no cache hit"),null;var r=this.validateAndParseJson(t);return r&&Fr.isThrottlingEntity(e,r)?(this.logger.trace("BrowserCacheManager.getThrottlingCache: cache hit"),jt.toObject(new Fr,r)):(this.logger.trace("BrowserCacheManager.getThrottlingCache: called, no cache hit"),null)},t.prototype.setThrottlingCache=function(e,t){this.logger.trace("BrowserCacheManager.setThrottlingCache called"),this.setItem(e,JSON.stringify(t))},t.prototype.getTemporaryCache=function(e,t){var r=t?this.generateCacheKey(e):e;if(this.cacheConfig.storeAuthStateInCookie){var n=this.getItemCookie(r);if(n)return this.logger.trace("BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies"),n}var o=this.temporaryCacheStorage.getItem(r);if(!o){if(this.cacheConfig.cacheLocation===Rr.LocalStorage){var i=this.browserStorage.getItem(r);if(i)return this.logger.trace("BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage"),i}return this.logger.trace("BrowserCacheManager.getTemporaryCache: No cache item found in local storage"),null}return this.logger.trace("BrowserCacheManager.getTemporaryCache: Temporary cache item returned"),o},t.prototype.setTemporaryCache=function(e,t,r){var n=r?this.generateCacheKey(e):e;this.temporaryCacheStorage.setItem(n,t),this.cacheConfig.storeAuthStateInCookie&&(this.logger.trace("BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie"),this.setItemCookie(n,t))},t.prototype.removeItem=function(e){return this.browserStorage.removeItem(e),this.temporaryCacheStorage.removeItem(e),this.cacheConfig.storeAuthStateInCookie&&(this.logger.trace("BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie"),this.clearItemCookie(e)),!0},t.prototype.containsKey=function(e){return this.browserStorage.containsKey(e)||this.temporaryCacheStorage.containsKey(e)},t.prototype.getKeys=function(){return U(this.browserStorage.getKeys(),this.temporaryCacheStorage.getKeys())},t.prototype.clear=function(){return k(this,void 0,void 0,(function(){var e=this;return N(this,(function(t){switch(t.label){case 0:return[4,this.removeAllAccounts()];case 1:return t.sent(),this.removeAppMetadata(),this.getKeys().forEach((function(t){!e.browserStorage.containsKey(t)&&!e.temporaryCacheStorage.containsKey(t)||-1===t.indexOf(j.CACHE_PREFIX)&&-1===t.indexOf(e.clientId)||e.removeItem(t)})),this.internalStorage.clear(),[2]}}))}))},t.prototype.setItemCookie=function(e,t,r){var n=encodeURIComponent(e)+"="+encodeURIComponent(t)+";path=/;";r&&(n+="expires="+this.getCookieExpirationTime(r)+";");this.cacheConfig.secureCookies&&(n+="Secure;"),document.cookie=n},t.prototype.getItemCookie=function(e){for(var t=encodeURIComponent(e)+"=",r=document.cookie.split(";"),n=0;n<r.length;n++){for(var o=r[n];" "===o.charAt(0);)o=o.substring(1);if(0===o.indexOf(t))return decodeURIComponent(o.substring(t.length,o.length))}return""},t.prototype.clearMsalCookies=function(){var e=this,t=j.CACHE_PREFIX+"."+this.clientId;document.cookie.split(";").forEach((function(r){for(;" "===r.charAt(0);)r=r.substring(1);if(0===r.indexOf(t)){var n=r.split("=")[0];e.clearItemCookie(n)}}))},t.prototype.clearItemCookie=function(e){this.setItemCookie(e,"",-1)},t.prototype.getCookieExpirationTime=function(e){var t=new Date;return new Date(t.getTime()+e*this.COOKIE_LIFE_MULTIPLIER).toUTCString()},t.prototype.getCache=function(){return this.browserStorage},t.prototype.setCache=function(){},t.prototype.generateCacheKey=function(e){return this.validateAndParseJson(e)?JSON.stringify(e):ht.startsWith(e,j.CACHE_PREFIX)||ht.startsWith(e,x.ADAL_ID_TOKEN)?e:j.CACHE_PREFIX+"."+this.clientId+"."+e},t.prototype.generateAuthorityKey=function(e){var t=mr.parseRequestState(this.cryptoImpl,e).libraryState.id;return this.generateCacheKey(kr.AUTHORITY+"."+t)},t.prototype.generateNonceKey=function(e){var t=mr.parseRequestState(this.cryptoImpl,e).libraryState.id;return this.generateCacheKey(kr.NONCE_IDTOKEN+"."+t)},t.prototype.generateStateKey=function(e){var t=mr.parseRequestState(this.cryptoImpl,e).libraryState.id;return this.generateCacheKey(kr.REQUEST_STATE+"."+t)},t.prototype.getCachedAuthority=function(e){var t=this.generateStateKey(e),r=this.getTemporaryCache(t);if(!r)return null;var n=this.generateAuthorityKey(r);return this.getTemporaryCache(n)},t.prototype.updateCacheEntries=function(e,t,r,n,o){this.logger.trace("BrowserCacheManager.updateCacheEntries called");var i=this.generateStateKey(e);this.setTemporaryCache(i,e,!1);var a=this.generateNonceKey(e);this.setTemporaryCache(a,t,!1);var s=this.generateAuthorityKey(e);if(this.setTemporaryCache(s,r,!1),o){var c={credential:o.homeAccountId,type:Zt.HOME_ACCOUNT_ID};this.setTemporaryCache(kr.CCS_CREDENTIAL,JSON.stringify(c),!0)}else if(!ht.isEmpty(n)){c={credential:n,type:Zt.UPN};this.setTemporaryCache(kr.CCS_CREDENTIAL,JSON.stringify(c),!0)}},t.prototype.resetRequestCache=function(e){var t=this;this.logger.trace("BrowserCacheManager.resetRequestCache called"),ht.isEmpty(e)||this.getKeys().forEach((function(r){-1!==r.indexOf(e)&&t.removeItem(r)})),e&&(this.removeItem(this.generateStateKey(e)),this.removeItem(this.generateNonceKey(e)),this.removeItem(this.generateAuthorityKey(e))),this.removeItem(this.generateCacheKey(kr.REQUEST_PARAMS)),this.removeItem(this.generateCacheKey(kr.ORIGIN_URI)),this.removeItem(this.generateCacheKey(kr.URL_HASH)),this.removeItem(this.generateCacheKey(kr.CORRELATION_ID)),this.removeItem(this.generateCacheKey(kr.CCS_CREDENTIAL)),this.setInteractionInProgress(!1)},t.prototype.cleanRequestByState=function(e){if(this.logger.trace("BrowserCacheManager.cleanRequestByState called"),e){var t=this.generateStateKey(e),r=this.temporaryCacheStorage.getItem(t);this.logger.infoPii("BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: "+r),this.resetRequestCache(r||"")}this.clearMsalCookies()},t.prototype.cleanRequestByInteractionType=function(e){var t=this;this.logger.trace("BrowserCacheManager.cleanRequestByInteractionType called"),this.getKeys().forEach((function(r){if(-1!==r.indexOf(kr.REQUEST_STATE)){var n=t.temporaryCacheStorage.getItem(r);if(n){var o=to.extractBrowserRequestState(t.cryptoImpl,n);o&&o.interactionType===e&&(t.logger.infoPii("BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: "+n),t.resetRequestCache(n))}}})),this.clearMsalCookies(),this.setInteractionInProgress(!1)},t.prototype.cacheCodeRequest=function(e,t){this.logger.trace("BrowserCacheManager.cacheCodeRequest called");var r=t.base64Encode(JSON.stringify(e));this.setTemporaryCache(kr.REQUEST_PARAMS,r,!0)},t.prototype.getCachedRequest=function(e,t){this.logger.trace("BrowserCacheManager.getCachedRequest called");var r=this.getTemporaryCache(kr.REQUEST_PARAMS,!0);if(!r)throw Fn.createNoTokenRequestCacheError();var n=this.validateAndParseJson(t.base64Decode(r));if(!n)throw Fn.createUnableToParseTokenRequestCacheError();if(this.removeItem(this.generateCacheKey(kr.REQUEST_PARAMS)),ht.isEmpty(n.authority)){var o=this.generateAuthorityKey(e),i=this.getTemporaryCache(o);if(!i)throw Fn.createNoCachedAuthorityError();n.authority=i}return n},t.prototype.isInteractionInProgress=function(e){var t=this.getInteractionInProgress();return e?t===this.clientId:!!t},t.prototype.getInteractionInProgress=function(){var e=j.CACHE_PREFIX+"."+kr.INTERACTION_STATUS_KEY;return this.getTemporaryCache(e,!1)},t.prototype.setInteractionInProgress=function(e){var t=j.CACHE_PREFIX+"."+kr.INTERACTION_STATUS_KEY;if(e){if(this.getInteractionInProgress())throw Fn.createInteractionInProgressError();this.setTemporaryCache(t,this.clientId,!1)}else e||this.getInteractionInProgress()!==this.clientId||this.removeItem(t)},t.prototype.getLegacyLoginHint=function(){var e=this.getTemporaryCache(x.ADAL_ID_TOKEN);e&&(this.browserStorage.removeItem(x.ADAL_ID_TOKEN),this.logger.verbose("Cached ADAL id token retrieved."));var t=this.getTemporaryCache(x.ID_TOKEN,!0);t&&(this.removeItem(this.generateCacheKey(x.ID_TOKEN)),this.logger.verbose("Cached MSAL.js v1 id token retrieved"));var r=t||e;if(r){var n=new Xt(r,this.cryptoImpl);if(n.claims&&n.claims.preferred_username)return this.logger.verbose("No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 preferred_username as loginHint"),n.claims.preferred_username;if(n.claims&&n.claims.upn)return this.logger.verbose("No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 upn as loginHint"),n.claims.upn;this.logger.verbose("No SSO params used and ADAL/MSAL v1 token retrieved, however, no account hint claim found. Enable preferred_username or upn id token claim to get SSO.")}return null},t.prototype.updateCredentialCacheKey=function(e,t){var r=t.generateCredentialKey();if(e!==r){var n=this.getItem(e);if(n)return this.removeItem(e),this.setItem(r,n),this.logger.verbose("Updated an outdated "+t.credentialType+" cache key"),r;this.logger.error("Attempted to update an outdated "+t.credentialType+" cache key but no item matching the outdated key was found in storage")}return e},t}(jt),no=function(){function e(){}return e.prototype.sendGetRequestAsync=function(e,t){return k(this,void 0,void 0,(function(){var r,n,o;return N(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),[4,fetch(e,{method:Or.GET,headers:this.getFetchHeaders(t)})];case 1:return r=i.sent(),[3,3];case 2:throw n=i.sent(),window.navigator.onLine?Fn.createGetRequestFailedError(n,e):Fn.createNoNetworkConnectivityError();case 3:return i.trys.push([3,5,,6]),o={headers:this.getHeaderDict(r.headers)},[4,r.json()];case 4:return[2,(o.body=i.sent(),o.status=r.status,o)];case 5:throw i.sent(),Fn.createFailedToParseNetworkResponseError(e);case 6:return[2]}}))}))},e.prototype.sendPostRequestAsync=function(e,t){return k(this,void 0,void 0,(function(){var r,n,o,i;return N(this,(function(a){switch(a.label){case 0:r=t&&t.body||"",a.label=1;case 1:return a.trys.push([1,3,,4]),[4,fetch(e,{method:Or.POST,headers:this.getFetchHeaders(t),body:r})];case 2:return n=a.sent(),[3,4];case 3:throw o=a.sent(),window.navigator.onLine?Fn.createPostRequestFailedError(o,e):Fn.createNoNetworkConnectivityError();case 4:return a.trys.push([4,6,,7]),i={headers:this.getHeaderDict(n.headers)},[4,n.json()];case 5:return[2,(i.body=a.sent(),i.status=n.status,i)];case 6:throw a.sent(),Fn.createFailedToParseNetworkResponseError(e);case 7:return[2]}}))}))},e.prototype.getFetchHeaders=function(e){var t=new Headers;if(!e||!e.headers)return t;var r=e.headers;return Object.keys(r).forEach((function(e){t.append(e,r[e])})),t},e.prototype.getHeaderDict=function(e){var t={};return e.forEach((function(e,r){t[r]=e})),t},e}(),oo=function(){function e(){}return e.prototype.sendGetRequestAsync=function(e,t){return k(this,void 0,void 0,(function(){return N(this,(function(r){return[2,this.sendRequestAsync(e,Or.GET,t)]}))}))},e.prototype.sendPostRequestAsync=function(e,t){return k(this,void 0,void 0,(function(){return N(this,(function(r){return[2,this.sendRequestAsync(e,Or.POST,t)]}))}))},e.prototype.sendRequestAsync=function(e,t,r){var n=this;return new Promise((function(o,i){var a=new XMLHttpRequest;if(a.open(t,e,!0),n.setXhrHeaders(a,r),a.onload=function(){(a.status<200||a.status>=300)&&(t===Or.POST?i(Fn.createPostRequestFailedError("Failed with status "+a.status,e)):i(Fn.createGetRequestFailedError("Failed with status "+a.status,e)));try{var r=JSON.parse(a.responseText),s={headers:n.getHeaderDict(a),body:r,status:a.status};o(s)}catch(t){i(Fn.createFailedToParseNetworkResponseError(e))}},a.onerror=function(){window.navigator.onLine?t===Or.POST?i(Fn.createPostRequestFailedError("Failed with status "+a.status,e)):i(Fn.createGetRequestFailedError("Failed with status "+a.status,e)):i(Fn.createNoNetworkConnectivityError())},t===Or.POST&&r&&r.body)a.send(r.body);else{if(t!==Or.GET)throw Fn.createHttpMethodNotImplementedError(t);a.send()}}))},e.prototype.setXhrHeaders=function(e,t){if(t&&t.headers){var r=t.headers;Object.keys(r).forEach((function(t){e.setRequestHeader(t,r[t])}))}},e.prototype.getHeaderDict=function(e){var t=e.getAllResponseHeaders().trim().split(/[\r\n]+/),r={};return t.forEach((function(e){var t=e.split(": "),n=t.shift(),o=t.join(": ");n&&o&&(r[n]=o)})),r},e}(),io=function(){function e(){}return e.clearHash=function(e){e.location.hash=j.EMPTY_STRING,"function"==typeof e.history.replaceState&&e.history.replaceState(null,j.EMPTY_STRING,""+e.location.origin+e.location.pathname+e.location.search)},e.replaceHash=function(e){var t=e.split("#");t.shift(),window.location.hash=t.length>0?t.join("#"):""},e.isInIframe=function(){return window.parent!==window},e.isInPopup=function(){return"undefined"!=typeof window&&!!window.opener&&window.opener!==window&&"string"==typeof window.name&&0===window.name.indexOf(jr+".")},e.getCurrentUri=function(){return window.location.href.split("?")[0].split("#")[0]},e.getHomepage=function(){var e=new yr(window.location.href).getUrlComponents();return e.Protocol+"//"+e.HostNameAndPort+"/"},e.getBrowserNetworkClient=function(){return window.fetch&&window.Headers?new no:new oo},e.blockReloadInHiddenIframes=function(){if(yr.hashContainsKnownProperties(window.location.hash)&&e.isInIframe())throw Fn.createBlockReloadInHiddenIframeError()},e.blockRedirectInIframe=function(t,r){var n=e.isInIframe();if(t===Ur.Redirect&&n&&!r)throw Fn.createRedirectInIframeError(n)},e.blockAcquireTokenInPopups=function(){if(e.isInPopup())throw Fn.createBlockAcquireTokenInPopupsError()},e.blockNonBrowserEnvironment=function(e){if(!e)throw Fn.createNonBrowserEnvironmentError()},e.detectIEOrEdge=function(){var e=window.navigator.userAgent,t=e.indexOf("MSIE "),r=e.indexOf("Trident/"),n=e.indexOf("Edge/");return t>0||r>0||n>0},e}(),ao=function(){function e(){}return e.prototype.navigateInternal=function(t,r){return e.defaultNavigateWindow(t,r)},e.prototype.navigateExternal=function(t,r){return e.defaultNavigateWindow(t,r)},e.defaultNavigateWindow=function(e,t){return t.noHistory?window.location.replace(e):window.location.assign(e),new Promise((function(e){setTimeout((function(){e(!0)}),t.timeout)}))},e}();
/*! @azure/msal-browser v2.22.1 2022-03-07 */
var so;!function(e){e.ACCOUNT_ADDED="msal:accountAdded",e.ACCOUNT_REMOVED="msal:accountRemoved",e.LOGIN_START="msal:loginStart",e.LOGIN_SUCCESS="msal:loginSuccess",e.LOGIN_FAILURE="msal:loginFailure",e.ACQUIRE_TOKEN_START="msal:acquireTokenStart",e.ACQUIRE_TOKEN_SUCCESS="msal:acquireTokenSuccess",e.ACQUIRE_TOKEN_FAILURE="msal:acquireTokenFailure",e.ACQUIRE_TOKEN_NETWORK_START="msal:acquireTokenFromNetworkStart",e.SSO_SILENT_START="msal:ssoSilentStart",e.SSO_SILENT_SUCCESS="msal:ssoSilentSuccess",e.SSO_SILENT_FAILURE="msal:ssoSilentFailure",e.ACQUIRE_TOKEN_BY_CODE_START="msal:acquireTokenByCodeStart",e.ACQUIRE_TOKEN_BY_CODE_SUCCESS="msal:acquireTokenByCodeSuccess",e.ACQUIRE_TOKEN_BY_CODE_FAILURE="msal:acquireTokenByCodeFailure",e.HANDLE_REDIRECT_START="msal:handleRedirectStart",e.HANDLE_REDIRECT_END="msal:handleRedirectEnd",e.POPUP_OPENED="msal:popupOpened",e.LOGOUT_START="msal:logoutStart",e.LOGOUT_SUCCESS="msal:logoutSuccess",e.LOGOUT_FAILURE="msal:logoutFailure",e.LOGOUT_END="msal:logoutEnd"}(so||(so={}));
/*! @azure/msal-browser v2.22.1 2022-03-07 */
var co=function(){function e(e,t){this.eventCallbacks=new Map,this.logger=e,this.browserCrypto=t,this.listeningToStorageEvents=!1,this.handleAccountCacheChange=this.handleAccountCacheChange.bind(this)}return e.prototype.addEventCallback=function(e){if("undefined"!=typeof window){var t=this.browserCrypto.createNewGuid();return this.eventCallbacks.set(t,e),this.logger.verbose("Event callback registered with id: "+t),t}return null},e.prototype.removeEventCallback=function(e){this.eventCallbacks.delete(e),this.logger.verbose("Event callback "+e+" removed.")},e.prototype.enableAccountStorageEvents=function(){"undefined"!=typeof window&&(this.listeningToStorageEvents?this.logger.verbose("Account storage listener already registered."):(this.logger.verbose("Adding account storage listener."),this.listeningToStorageEvents=!0,window.addEventListener("storage",this.handleAccountCacheChange)))},e.prototype.disableAccountStorageEvents=function(){"undefined"!=typeof window&&(this.listeningToStorageEvents?(this.logger.verbose("Removing account storage listener."),window.removeEventListener("storage",this.handleAccountCacheChange),this.listeningToStorageEvents=!1):this.logger.verbose("No account storage listener registered."))},e.prototype.emitEvent=function(e,t,r,n){var o=this;if("undefined"!=typeof window){var i={eventType:e,interactionType:t||null,payload:r||null,error:n||null,timestamp:Date.now()};this.logger.info("Emitting event: "+e),this.eventCallbacks.forEach((function(t,r){o.logger.verbose("Emitting event to callback "+r+": "+e),t.apply(null,[i])}))}},e.prototype.handleAccountCacheChange=function(e){try{var t=e.newValue||e.oldValue;if(!t)return;var r=JSON.parse(t);if("object"!=typeof r||!Gt.isAccountEntity(r))return;var n=jt.toObject(new Gt,r).getAccountInfo();!e.oldValue&&e.newValue?(this.logger.info("Account was added to cache in a different window"),this.emitEvent(so.ACCOUNT_ADDED,void 0,n)):!e.newValue&&e.oldValue&&(this.logger.info("Account was removed from cache in a different window"),this.emitEvent(so.ACCOUNT_REMOVED,void 0,n))}catch(e){return}},e}(),uo=function(e){function t(t,r,n,o,i,a,s){var c=e.call(this,t,r,n,o,i,s)||this;return c.navigationClient=a,c}return R(t,e),t.prototype.initializeAuthorizationCodeRequest=function(e){return k(this,void 0,void 0,(function(){var t,r;return N(this,(function(n){switch(n.label){case 0:return this.logger.verbose("initializeAuthorizationRequest called",e.correlationId),[4,this.browserCrypto.generatePkceCodes()];case 1:return t=n.sent(),r=O(O({},e),{redirectUri:e.redirectUri,code:"",codeVerifier:t.verifier}),e.codeChallenge=t.challenge,e.codeChallengeMethod=j.S256_CODE_CHALLENGE_METHOD,[2,r]}}))}))},t.prototype.initializeLogoutRequest=function(e){this.logger.verbose("initializeLogoutRequest called",null==e?void 0:e.correlationId);var t=O({correlationId:this.browserCrypto.createNewGuid()},e);if(e)if(e.logoutHint)this.logger.verbose("logoutHint has already been set in logoutRequest");else if(e.account){var r=this.getLogoutHintFromIdTokenClaims(e.account);r&&(this.logger.verbose("Setting logoutHint to login_hint ID Token Claim value for the account provided"),t.logoutHint=r)}else this.logger.verbose("logoutHint was not set and account was not passed into logout request, logoutHint will not be set");else this.logger.verbose("logoutHint will not be set since no logout request was configured");return e&&null===e.postLogoutRedirectUri?this.logger.verbose("postLogoutRedirectUri passed as null, not setting post logout redirect uri",t.correlationId):e&&e.postLogoutRedirectUri?(this.logger.verbose("Setting postLogoutRedirectUri to uri set on logout request",t.correlationId),t.postLogoutRedirectUri=yr.getAbsoluteUrl(e.postLogoutRedirectUri,io.getCurrentUri())):null===this.config.auth.postLogoutRedirectUri?this.logger.verbose("postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect",t.correlationId):this.config.auth.postLogoutRedirectUri?(this.logger.verbose("Setting postLogoutRedirectUri to configured uri",t.correlationId),t.postLogoutRedirectUri=yr.getAbsoluteUrl(this.config.auth.postLogoutRedirectUri,io.getCurrentUri())):(this.logger.verbose("Setting postLogoutRedirectUri to current page",t.correlationId),t.postLogoutRedirectUri=yr.getAbsoluteUrl(io.getCurrentUri(),io.getCurrentUri())),t},t.prototype.getLogoutHintFromIdTokenClaims=function(e){var t=e.idTokenClaims;if(t){if(t.login_hint)return t.login_hint;this.logger.verbose("The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request")}else this.logger.verbose("The provided account does not contain ID Token Claims, logoutHint will not be added to logout request");return null},t.prototype.createAuthCodeClient=function(e,t,r){return k(this,void 0,void 0,(function(){var n;return N(this,(function(o){switch(o.label){case 0:return[4,this.getClientConfiguration(e,t,r)];case 1:return n=o.sent(),[2,new Tr(n)]}}))}))},t.prototype.getClientConfiguration=function(e,t,r){return k(this,void 0,void 0,(function(){var n;return N(this,(function(o){switch(o.label){case 0:return this.logger.verbose("getClientConfiguration called"),[4,this.getDiscoveredAuthority(t,r)];case 1:return n=o.sent(),[2,{authOptions:{clientId:this.config.auth.clientId,authority:n,clientCapabilities:this.config.auth.clientCapabilities},systemOptions:{tokenRenewalOffsetSeconds:this.config.system.tokenRenewalOffsetSeconds,preventCorsPreflight:!0},loggerOptions:{loggerCallback:this.config.system.loggerOptions.loggerCallback,piiLoggingEnabled:this.config.system.loggerOptions.piiLoggingEnabled,logLevel:this.config.system.loggerOptions.logLevel,correlationId:this.correlationId},cryptoInterface:this.browserCrypto,networkInterface:this.networkClient,storageInterface:this.browserStorage,serverTelemetryManager:e,libraryInfo:{sku:Wr,version:"2.22.1",cpu:"",os:""}}]}}))}))},t.prototype.validateAndExtractStateFromHash=function(e,t,r){this.logger.verbose("validateAndExtractStateFromHash called",r);var n=yr.getDeserializedHash(e);if(!n.state)throw Fn.createHashDoesNotContainStateError();var o=to.extractBrowserRequestState(this.browserCrypto,n.state);if(!o)throw Fn.createUnableToParseStateError();if(o.interactionType!==t)throw Fn.createStateInteractionTypeMismatchError();return this.logger.verbose("Returning state from hash",r),n.state},t.prototype.getDiscoveredAuthority=function(e,t){return k(this,void 0,void 0,(function(){var r,n,o;return N(this,(function(i){switch(i.label){case 0:return this.logger.verbose("getDiscoveredAuthority called"),r={protocolMode:this.config.auth.protocolMode,knownAuthorities:this.config.auth.knownAuthorities,cloudDiscoveryMetadata:this.config.auth.cloudDiscoveryMetadata,authorityMetadata:this.config.auth.authorityMetadata},n=e||this.config.auth.authority,o=Lr.generateAuthority(n,t||this.config.auth.azureCloudOptions),this.logger.verbose("Creating discovered authority with configured authority"),[4,Hr.createDiscoveredInstance(o,this.config.system.networkClient,this.browserStorage,r)];case 1:return[2,i.sent()]}}))}))},t.prototype.initializeAuthorizationRequest=function(e,t){return k(this,void 0,void 0,(function(){var r,n,o,i,a,s,c;return N(this,(function(u){switch(u.label){case 0:return this.logger.verbose("initializeAuthorizationRequest called"),r=this.getRedirectUri(e.redirectUri),n={interactionType:t},o=mr.setRequestState(this.browserCrypto,e&&e.state||j.EMPTY_STRING,n),a=[{}],[4,this.initializeBaseRequest(e)];case 1:return i=O.apply(void 0,[O.apply(void 0,a.concat([u.sent()])),{redirectUri:r,state:o,nonce:e.nonce||this.browserCrypto.createNewGuid(),responseMode:J.FRAGMENT}]),(s=e.account||this.browserStorage.getActiveAccount())&&(this.logger.verbose("Setting validated request account"),this.logger.verbosePii("Setting validated request account: "+s),i.account=s),ht.isEmpty(i.loginHint)&&!s&&(c=this.browserStorage.getLegacyLoginHint())&&(i.loginHint=c),[2,i]}}))}))},t}(function(){function e(e,t,r,n,o,i){this.config=e,this.browserStorage=t,this.browserCrypto=r,this.networkClient=this.config.system.networkClient,this.eventHandler=o,this.correlationId=i||this.browserCrypto.createNewGuid(),this.logger=n.clone(Wr,"2.22.1",this.correlationId)}return e.prototype.clearCacheOnLogout=function(e){return k(this,void 0,void 0,(function(){return N(this,(function(t){switch(t.label){case 0:if(!e)return[3,5];Gt.accountInfoIsEqual(e,this.browserStorage.getActiveAccount(),!1)&&(this.logger.verbose("Setting active account to null"),this.browserStorage.setActiveAccount(null)),t.label=1;case 1:return t.trys.push([1,3,,4]),[4,this.browserStorage.removeAccount(Gt.generateAccountCacheKey(e))];case 2:return t.sent(),this.logger.verbose("Cleared cache items belonging to the account provided in the logout request."),[3,4];case 3:return t.sent(),this.logger.error("Account provided in logout request was not found. Local cache unchanged."),[3,4];case 4:return[3,9];case 5:return t.trys.push([5,8,,9]),[4,this.browserStorage.clear()];case 6:return t.sent(),[4,this.browserCrypto.clearKeystore()];case 7:return t.sent(),this.logger.verbose("No account provided in logout request, clearing all cache items."),[3,9];case 8:return t.sent(),this.logger.error("Attempted to clear all MSAL cache items and failed. Local cache unchanged."),[3,9];case 9:return[2]}}))}))},e.prototype.initializeBaseRequest=function(e){return k(this,void 0,void 0,(function(){var t,r,n,o;return N(this,(function(i){switch(i.label){case 0:if(this.logger.verbose("Initializing BaseAuthRequest"),t=e.authority||this.config.auth.authority,r=U(e&&e.scopes||[]),(n=O(O({},e),{correlationId:this.correlationId,authority:t,scopes:r})).authenticationScheme){if(n.authenticationScheme===se.SSH){if(!e.sshJwk)throw Ft.createMissingSshJwkError();if(!e.sshKid)throw Ft.createMissingSshKidError()}this.logger.verbose('Authentication Scheme set to "'+n.authenticationScheme+'" as configured in Auth request')}else n.authenticationScheme=se.BEARER,this.logger.verbose('Authentication Scheme wasn\'t explicitly set in request, defaulting to "Bearer" request');return!e.claims||ht.isEmpty(e.claims)?[3,2]:(o=n,[4,this.browserCrypto.hashString(e.claims)]);case 1:o.requestedClaimsHash=i.sent(),i.label=2;case 2:return[2,n]}}))}))},e.prototype.getRedirectUri=function(e){this.logger.verbose("getRedirectUri called");var t=e||this.config.auth.redirectUri||io.getCurrentUri();return yr.getAbsoluteUrl(t,io.getCurrentUri())},e.prototype.initializeServerTelemetryManager=function(e,t){this.logger.verbose("initializeServerTelemetryManager called");var r={clientId:this.config.auth.clientId,correlationId:this.correlationId,apiId:e,forceRefresh:t||!1,wrapperSKU:this.browserStorage.getWrapperMetadata()[0],wrapperVer:this.browserStorage.getWrapperMetadata()[1]};return new xr(r,this.browserStorage)},e}()),lo=function(){function e(e,t){this.browserStorage=e,this.logger=t,this.unloadWindow=this.unloadWindow.bind(this)}return e.prototype.openPopup=function(t,r){try{var n=void 0;if(r.popup?(n=r.popup,this.logger.verbosePii("Navigating popup window to: "+t),n.location.assign(t)):void 0===r.popup&&(this.logger.verbosePii("Opening popup window to: "+t),n=e.openSizedPopup(t,r.popupName,r.popupWindowAttributes,this.logger)),!n)throw Fn.createEmptyWindowCreatedError();return n.focus&&n.focus(),this.currentWindow=n,window.addEventListener("beforeunload",this.unloadWindow),n}catch(e){throw this.logger.error("error opening popup "+e.message),this.browserStorage.setInteractionInProgress(!1),Fn.createPopupWindowError(e.toString())}},e.openSizedPopup=function(e,t,r,n){var o,i,a,s,c=window.screenLeft?window.screenLeft:window.screenX,u=window.screenTop?window.screenTop:window.screenY,d=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,l=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight,h=null===(o=r.popupSize)||void 0===o?void 0:o.width,p=null===(i=r.popupSize)||void 0===i?void 0:i.height,g=null===(a=r.popupPosition)||void 0===a?void 0:a.top,f=null===(s=r.popupPosition)||void 0===s?void 0:s.left;return(!h||h<0||h>d)&&(n.verbose("Default popup window width used. Window width not configured or invalid."),h=Gr),(!p||p<0||p>l)&&(n.verbose("Default popup window height used. Window height not configured or invalid."),p=Xr),(!g||g<0||g>l)&&(n.verbose("Default popup window top position used. Window top not configured or invalid."),g=Math.max(0,l/2-Xr/2+u)),(!f||f<0||f>d)&&(n.verbose("Default popup window left position used. Window left not configured or invalid."),f=Math.max(0,d/2-Gr/2+c)),window.open(e,t,"width="+h+", height="+p+", top="+g+", left="+f+", scrollbars=yes")},e.prototype.unloadWindow=function(e){this.browserStorage.cleanRequestByInteractionType(Ur.Popup),this.currentWindow&&this.currentWindow.close(),e.preventDefault()},e.prototype.cleanPopup=function(e){e&&e.close(),window.removeEventListener("beforeunload",this.unloadWindow),this.browserStorage.setInteractionInProgress(!1)},e.prototype.monitorPopupForSameOrigin=function(e){var t=this;return new Promise((function(r,n){var o=setInterval((function(){if(e.closed)return t.cleanPopup(),clearInterval(o),void n(Fn.createUserCancelledError());var i=j.EMPTY_STRING;try{i=e.location.href}catch(e){}ht.isEmpty(i)||"about:blank"===i||(clearInterval(o),r())}),zr)}))},e.generatePopupName=function(e,t,r,n){return jr+"."+e+"."+t.join("-")+"."+r+"."+n},e.generateLogoutPopupName=function(e,t){var r=t.account&&t.account.homeAccountId;return jr+"."+e+"."+r+"."+t.correlationId},e}(),ho=function(){function e(e,t,r,n){this.authModule=e,this.browserStorage=t,this.authCodeRequest=r,this.browserRequestLogger=n}return e.prototype.handleCodeResponseFromHash=function(e,t,r,n){return k(this,void 0,void 0,(function(){var o,i,a;return N(this,(function(s){if(this.browserRequestLogger.verbose("InteractionHandler.handleCodeResponse called"),ht.isEmpty(e))throw Fn.createEmptyHashError(e);if(o=this.browserStorage.generateStateKey(t),!(i=this.browserStorage.getTemporaryCache(o)))throw lt.createStateNotFoundError("Cached State");return a=this.authModule.handleFragmentResponse(e,i),[2,this.handleCodeResponseFromServer(a,t,r,n)]}))}))},e.prototype.handleCodeResponseFromServer=function(e,t,r,n,o){return void 0===o&&(o=!0),k(this,void 0,void 0,(function(){var i,a,s,c,u,d;return N(this,(function(l){switch(l.label){case 0:if(this.browserRequestLogger.trace("InteractionHandler.handleCodeResponseFromServer called"),i=this.browserStorage.generateStateKey(t),!(a=this.browserStorage.getTemporaryCache(i)))throw lt.createStateNotFoundError("Cached State");return s=this.browserStorage.generateNonceKey(a),c=this.browserStorage.getTemporaryCache(s),this.authCodeRequest.code=e.code,e.cloud_instance_host_name?[4,this.updateTokenEndpointAuthority(e.cloud_instance_host_name,r,n)]:[3,2];case 1:l.sent(),l.label=2;case 2:return o&&(e.nonce=c||void 0),e.state=a,e.client_info?this.authCodeRequest.clientInfo=e.client_info:(u=this.checkCcsCredentials())&&(this.authCodeRequest.ccsCredential=u),[4,this.authModule.acquireToken(this.authCodeRequest,e)];case 3:return d=l.sent(),this.browserStorage.cleanRequestByState(t),[2,d]}}))}))},e.prototype.updateTokenEndpointAuthority=function(e,t,r){return k(this,void 0,void 0,(function(){var n,o;return N(this,(function(i){switch(i.label){case 0:return n="https://"+e+"/"+t.tenant+"/",[4,Hr.createDiscoveredInstance(n,r,this.browserStorage,t.options)];case 1:return o=i.sent(),this.authModule.updateAuthority(o),[2]}}))}))},e.prototype.checkCcsCredentials=function(){var e=this.browserStorage.getTemporaryCache(kr.CCS_CREDENTIAL,!0);if(e)try{return JSON.parse(e)}catch(t){this.authModule.logger.error("Cache credential could not be parsed"),this.authModule.logger.errorPii("Cache credential could not be parsed: "+e)}return null},e}(),po=function(e){function t(t,r,n,o){var i=e.call(this,t,r,n,o)||this;return i.popupUtils=new lo(r,o),i}return R(t,e),t.prototype.initiateAuthRequest=function(e,t){if(ht.isEmpty(e))throw this.browserRequestLogger.error("Navigate url is empty"),Fn.createEmptyNavigationUriError();return this.browserRequestLogger.infoPii("Navigate to: "+e),this.popupUtils.openPopup(e,t)},t.prototype.monitorPopupForHash=function(e){var t=this;return this.popupUtils.monitorPopupForSameOrigin(e).then((function(){var r=e.location.hash;if(io.clearHash(e),t.popupUtils.cleanPopup(e),!r)throw Fn.createEmptyHashError(e.location.href);if(yr.hashContainsKnownProperties(r))return r;throw Fn.createHashDoesNotContainKnownPropertiesError()}))},t}(ho),go=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return R(t,e),t.prototype.acquireToken=function(e){try{var t=lo.generatePopupName(this.config.auth.clientId,e.scopes||z,e.authority||this.config.auth.authority,this.correlationId),r=e.popupWindowAttributes||{};if(this.config.system.asyncPopups)return this.logger.verbose("asyncPopups set to true, acquiring token"),this.acquireTokenPopupAsync(e,t,r);this.logger.verbose("asyncPopup set to false, opening popup before acquiring token");var n=lo.openSizedPopup("about:blank",t,r,this.logger);return this.acquireTokenPopupAsync(e,t,r,n)}catch(e){return Promise.reject(e)}},t.prototype.logout=function(e){try{this.logger.verbose("logoutPopup called");var t=this.initializeLogoutRequest(e),r=lo.generateLogoutPopupName(this.config.auth.clientId,t),n=e&&e.authority,o=e&&e.mainWindowRedirectUri,i=(null==e?void 0:e.popupWindowAttributes)||{};if(this.config.system.asyncPopups)return this.logger.verbose("asyncPopups set to true"),this.logoutPopupAsync(t,r,i,n,void 0,o);this.logger.verbose("asyncPopup set to false, opening popup");var a=lo.openSizedPopup("about:blank",r,i,this.logger);return this.logoutPopupAsync(t,r,i,n,a,o)}catch(e){return Promise.reject(e)}},t.prototype.acquireTokenPopupAsync=function(e,t,r,n){return k(this,void 0,void 0,(function(){var o,i,a,s,c,u,d,l,h,p,g;return N(this,(function(f){switch(f.label){case 0:return this.logger.verbose("acquireTokenPopupAsync called"),o=this.initializeServerTelemetryManager(Pr.acquireTokenPopup),[4,this.initializeAuthorizationRequest(e,Ur.Popup)];case 1:i=f.sent(),this.browserStorage.updateCacheEntries(i.state,i.nonce,i.authority,i.loginHint||"",i.account||null),f.label=2;case 2:return f.trys.push([2,8,,9]),[4,this.initializeAuthorizationCodeRequest(i)];case 3:return a=f.sent(),[4,this.createAuthCodeClient(o,i.authority,i.azureCloudOptions)];case 4:return s=f.sent(),this.logger.verbose("Auth code client created"),[4,s.getAuthCodeUrl(i)];case 5:return c=f.sent(),u=new po(s,this.browserStorage,a,this.logger),d={popup:n,popupName:t,popupWindowAttributes:r},l=u.initiateAuthRequest(c,d),this.eventHandler.emitEvent(so.POPUP_OPENED,Ur.Popup,{popupWindow:l},null),[4,u.monitorPopupForHash(l)];case 6:return h=f.sent(),p=this.validateAndExtractStateFromHash(h,Ur.Popup,i.correlationId),tr.removeThrottle(this.browserStorage,this.config.auth.clientId,a),[4,u.handleCodeResponseFromHash(h,p,s.authority,this.networkClient)];case 7:return[2,f.sent()];case 8:throw g=f.sent(),n&&n.close(),g instanceof Se&&g.setCorrelationId(this.correlationId),o.cacheFailedRequest(g),this.browserStorage.cleanRequestByState(i.state),g;case 9:return[2]}}))}))},t.prototype.logoutPopupAsync=function(e,t,r,n,o,i){return k(this,void 0,void 0,(function(){var a,s,c,u,d,l,h,p,g;return N(this,(function(f){switch(f.label){case 0:this.logger.verbose("logoutPopupAsync called"),this.eventHandler.emitEvent(so.LOGOUT_START,Ur.Popup,e),a=this.initializeServerTelemetryManager(Pr.logoutPopup),f.label=1;case 1:return f.trys.push([1,8,,9]),[4,this.clearCacheOnLogout(e.account)];case 2:return f.sent(),[4,this.createAuthCodeClient(a,n)];case 3:s=f.sent(),this.logger.verbose("Auth code client created"),c=s.getLogoutUri(e),this.eventHandler.emitEvent(so.LOGOUT_SUCCESS,Ur.Popup,e),u=new lo(this.browserStorage,this.logger),d=u.openPopup(c,{popupName:t,popupWindowAttributes:r,popup:o}),this.eventHandler.emitEvent(so.POPUP_OPENED,Ur.Popup,{popupWindow:d},null),f.label=4;case 4:return f.trys.push([4,6,,7]),[4,u.monitorPopupForSameOrigin(d)];case 5:return f.sent(),this.logger.verbose("Popup successfully redirected to postLogoutRedirectUri"),[3,7];case 6:return l=f.sent(),this.logger.verbose("Error occurred while monitoring popup for same origin. Session on server may remain active. Error: "+l),[3,7];case 7:return u.cleanPopup(d),i?(h={apiId:Pr.logoutPopup,timeout:this.config.system.redirectNavigationTimeout,noHistory:!1},p=yr.getAbsoluteUrl(i,io.getCurrentUri()),this.logger.verbose("Redirecting main window to url specified in the request"),this.logger.verbosePii("Redirecting main window to: "+p),this.navigationClient.navigateInternal(p,h)):this.logger.verbose("No main window navigation requested"),[3,9];case 8:throw g=f.sent(),o&&o.close(),g instanceof Se&&g.setCorrelationId(this.correlationId),this.browserStorage.setInteractionInProgress(!1),this.eventHandler.emitEvent(so.LOGOUT_FAILURE,Ur.Popup,null,g),this.eventHandler.emitEvent(so.LOGOUT_END,Ur.Popup),a.cacheFailedRequest(g),g;case 9:return this.eventHandler.emitEvent(so.LOGOUT_END,Ur.Popup),[2]}}))}))},t}(uo),fo=function(e){function t(t,r,n,o,i){var a=e.call(this,t,r,n,o)||this;return a.browserCrypto=i,a}return R(t,e),t.prototype.initiateAuthRequest=function(e,t){return k(this,void 0,void 0,(function(){var r;return N(this,(function(n){switch(n.label){case 0:return this.browserRequestLogger.verbose("RedirectHandler.initiateAuthRequest called"),ht.isEmpty(e)?[3,7]:(t.redirectStartPage&&(this.browserRequestLogger.verbose("RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page"),this.browserStorage.setTemporaryCache(kr.ORIGIN_URI,t.redirectStartPage,!0)),this.browserStorage.setTemporaryCache(kr.CORRELATION_ID,this.authCodeRequest.correlationId,!0),this.browserStorage.cacheCodeRequest(this.authCodeRequest,this.browserCrypto),this.browserRequestLogger.infoPii("RedirectHandler.initiateAuthRequest: Navigate to: "+e),r={apiId:Pr.acquireTokenRedirect,timeout:t.redirectTimeout,noHistory:!1},"function"!=typeof t.onRedirectNavigate?[3,4]:(this.browserRequestLogger.verbose("RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback"),!1===t.onRedirectNavigate(e)?[3,2]:(this.browserRequestLogger.verbose("RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating"),[4,t.navigationClient.navigateExternal(e,r)])));case 1:return n.sent(),[2];case 2:return this.browserRequestLogger.verbose("RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation"),[2];case 3:return[3,6];case 4:return this.browserRequestLogger.verbose("RedirectHandler.initiateAuthRequest: Navigating window to navigate url"),[4,t.navigationClient.navigateExternal(e,r)];case 5:return n.sent(),[2];case 6:return[3,8];case 7:throw this.browserRequestLogger.info("RedirectHandler.initiateAuthRequest: Navigate url is empty"),Fn.createEmptyNavigationUriError();case 8:return[2]}}))}))},t.prototype.handleCodeResponseFromHash=function(e,t,r,n,o){return k(this,void 0,void 0,(function(){var i,a,s,c,u,d,l;return N(this,(function(h){switch(h.label){case 0:if(this.browserRequestLogger.verbose("RedirectHandler.handleCodeResponse called"),ht.isEmpty(e))throw Fn.createEmptyHashError(e);if(this.browserStorage.setInteractionInProgress(!1),i=this.browserStorage.generateStateKey(t),!(a=this.browserStorage.getTemporaryCache(i)))throw lt.createStateNotFoundError("Cached State");return s=this.authModule.handleFragmentResponse(e,a),c=this.browserStorage.generateNonceKey(a),u=this.browserStorage.getTemporaryCache(c),this.authCodeRequest.code=s.code,s.cloud_instance_host_name?[4,this.updateTokenEndpointAuthority(s.cloud_instance_host_name,r,n)]:[3,2];case 1:h.sent(),h.label=2;case 2:return s.nonce=u||void 0,s.state=a,s.client_info?this.authCodeRequest.clientInfo=s.client_info:(d=this.checkCcsCredentials())&&(this.authCodeRequest.ccsCredential=d),o&&tr.removeThrottle(this.browserStorage,o,this.authCodeRequest),[4,this.authModule.acquireToken(this.authCodeRequest,s)];case 3:return l=h.sent(),this.browserStorage.cleanRequestByState(t),[2,l]}}))}))},t}(ho),mo=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return R(t,e),t.prototype.acquireToken=function(e){return k(this,void 0,void 0,(function(){var t,r,n,o,i,a,s,c,u,d=this;return N(this,(function(l){switch(l.label){case 0:return[4,this.initializeAuthorizationRequest(e,Ur.Redirect)];case 1:t=l.sent(),this.browserStorage.updateCacheEntries(t.state,t.nonce,t.authority,t.loginHint||"",t.account||null),r=this.initializeServerTelemetryManager(Pr.acquireTokenRedirect),n=function(e){e.persisted&&(d.logger.verbose("Page was restored from back/forward cache. Clearing temporary cache."),d.browserStorage.cleanRequestByState(t.state))},l.label=2;case 2:return l.trys.push([2,7,,8]),[4,this.initializeAuthorizationCodeRequest(t)];case 3:return o=l.sent(),[4,this.createAuthCodeClient(r,t.authority,t.azureCloudOptions)];case 4:return i=l.sent(),this.logger.verbose("Auth code client created"),a=new fo(i,this.browserStorage,o,this.logger,this.browserCrypto),[4,i.getAuthCodeUrl(t)];case 5:return s=l.sent(),c=this.getRedirectStartPage(e.redirectStartPage),this.logger.verbosePii("Redirect start page: "+c),window.addEventListener("pageshow",n),[4,a.initiateAuthRequest(s,{navigationClient:this.navigationClient,redirectTimeout:this.config.system.redirectNavigationTimeout,redirectStartPage:c,onRedirectNavigate:e.onRedirectNavigate})];case 6:return[2,l.sent()];case 7:throw(u=l.sent())instanceof Se&&u.setCorrelationId(this.correlationId),window.removeEventListener("pageshow",n),r.cacheFailedRequest(u),this.browserStorage.cleanRequestByState(t.state),u;case 8:return[2]}}))}))},t.prototype.handleRedirectPromise=function(e){return k(this,void 0,void 0,(function(){var t,r,n,o,i,a,s,c,u,d,l;return N(this,(function(h){switch(h.label){case 0:t=this.initializeServerTelemetryManager(Pr.handleRedirectPromise),h.label=1;case 1:if(h.trys.push([1,10,,11]),!this.browserStorage.isInteractionInProgress(!0))return this.logger.info("handleRedirectPromise called but there is no interaction in progress, returning null."),[2,null];if(!(r=this.getRedirectResponseHash(e||window.location.hash)))return this.logger.info("handleRedirectPromise did not detect a response hash as a result of a redirect. Cleaning temporary cache."),this.browserStorage.cleanRequestByInteractionType(Ur.Redirect),[2,null];n=void 0;try{n=this.validateAndExtractStateFromHash(r,Ur.Redirect),this.logger.verbose("State extracted from hash")}catch(e){return this.logger.info("handleRedirectPromise was unable to extract state due to: "+e),this.browserStorage.cleanRequestByInteractionType(Ur.Redirect),[2,null]}return o=this.browserStorage.getTemporaryCache(kr.ORIGIN_URI,!0)||"",i=yr.removeHashFromUrl(o),a=yr.removeHashFromUrl(window.location.href),i===a&&this.config.auth.navigateToLoginRequestUrl?(this.logger.verbose("Current page is loginRequestUrl, handling hash"),[4,this.handleHash(r,n,t)]):[3,3];case 2:return s=h.sent(),o.indexOf("#")>-1&&io.replaceHash(o),[2,s];case 3:return this.config.auth.navigateToLoginRequestUrl?[3,4]:(this.logger.verbose("NavigateToLoginRequestUrl set to false, handling hash"),[2,this.handleHash(r,n,t)]);case 4:return io.isInIframe()&&!this.config.system.allowRedirectInIframe?[3,9]:(this.browserStorage.setTemporaryCache(kr.URL_HASH,r,!0),c={apiId:Pr.handleRedirectPromise,timeout:this.config.system.redirectNavigationTimeout,noHistory:!0},u=!0,o&&"null"!==o?[3,6]:(d=io.getHomepage(),this.browserStorage.setTemporaryCache(kr.ORIGIN_URI,d,!0),this.logger.warning("Unable to get valid login request url from cache, redirecting to home page"),[4,this.navigationClient.navigateInternal(d,c)]));case 5:return u=h.sent(),[3,8];case 6:return this.logger.verbose("Navigating to loginRequestUrl: "+o),[4,this.navigationClient.navigateInternal(o,c)];case 7:u=h.sent(),h.label=8;case 8:if(!u)return[2,this.handleHash(r,n,t)];h.label=9;case 9:return[2,null];case 10:throw(l=h.sent())instanceof Se&&l.setCorrelationId(this.correlationId),t.cacheFailedRequest(l),this.browserStorage.cleanRequestByInteractionType(Ur.Redirect),l;case 11:return[2]}}))}))},t.prototype.getRedirectResponseHash=function(e){if(this.logger.verbose("getRedirectResponseHash called"),yr.hashContainsKnownProperties(e))return io.clearHash(window),this.logger.verbose("Hash contains known properties, returning response hash"),e;var t=this.browserStorage.getTemporaryCache(kr.URL_HASH,!0);return this.browserStorage.removeItem(this.browserStorage.generateCacheKey(kr.URL_HASH)),this.logger.verbose("Hash does not contain known properties, returning cached hash"),t},t.prototype.handleHash=function(e,t,r){return k(this,void 0,void 0,(function(){var n,o,i;return N(this,(function(a){switch(a.label){case 0:if(n=this.browserStorage.getCachedRequest(t,this.browserCrypto),this.logger.verbose("handleHash called, retrieved cached request"),!(o=this.browserStorage.getCachedAuthority(t)))throw Fn.createNoCachedAuthorityError();return[4,this.createAuthCodeClient(r,o)];case 1:return i=a.sent(),this.logger.verbose("Auth code client created"),[4,new fo(i,this.browserStorage,n,this.logger,this.browserCrypto).handleCodeResponseFromHash(e,t,i.authority,this.networkClient,this.config.auth.clientId)];case 2:return[2,a.sent()]}}))}))},t.prototype.logout=function(e){return k(this,void 0,void 0,(function(){var t,r,n,o,i,a;return N(this,(function(s){switch(s.label){case 0:this.logger.verbose("logoutRedirect called"),t=this.initializeLogoutRequest(e),r=this.initializeServerTelemetryManager(Pr.logout),s.label=1;case 1:return s.trys.push([1,10,,11]),this.eventHandler.emitEvent(so.LOGOUT_START,Ur.Redirect,e),[4,this.clearCacheOnLogout(t.account)];case 2:return s.sent(),n={apiId:Pr.logout,timeout:this.config.system.redirectNavigationTimeout,noHistory:!1},[4,this.createAuthCodeClient(r,e&&e.authority)];case 3:return o=s.sent(),this.logger.verbose("Auth code client created"),i=o.getLogoutUri(t),this.eventHandler.emitEvent(so.LOGOUT_SUCCESS,Ur.Redirect,t),e&&"function"==typeof e.onRedirectNavigate?!1===e.onRedirectNavigate(i)?[3,5]:(this.logger.verbose("Logout onRedirectNavigate did not return false, navigating"),[4,this.navigationClient.navigateExternal(i,n)]):[3,7];case 4:return s.sent(),[2];case 5:this.logger.verbose("Logout onRedirectNavigate returned false, stopping navigation"),s.label=6;case 6:return[3,9];case 7:return[4,this.navigationClient.navigateExternal(i,n)];case 8:return s.sent(),[2];case 9:return[3,11];case 10:throw(a=s.sent())instanceof Se&&a.setCorrelationId(this.correlationId),r.cacheFailedRequest(a),this.eventHandler.emitEvent(so.LOGOUT_FAILURE,Ur.Redirect,null,a),this.eventHandler.emitEvent(so.LOGOUT_END,Ur.Redirect),a;case 11:return this.eventHandler.emitEvent(so.LOGOUT_END,Ur.Redirect),[2]}}))}))},t.prototype.getRedirectStartPage=function(e){var t=e||window.location.href;return yr.getAbsoluteUrl(t,io.getCurrentUri())},t}(uo),yo=function(e){function t(t,r,n,o,i){var a=e.call(this,t,r,n,o)||this;return a.navigateFrameWait=i,a}return R(t,e),t.prototype.initiateAuthRequest=function(e){return k(this,void 0,void 0,(function(){var t;return N(this,(function(r){switch(r.label){case 0:if(ht.isEmpty(e))throw this.browserRequestLogger.info("Navigate url is empty"),Fn.createEmptyNavigationUriError();return this.navigateFrameWait?[4,this.loadFrame(e)]:[3,2];case 1:return t=r.sent(),[3,3];case 2:t=this.loadFrameSync(e),r.label=3;case 3:return[2,t]}}))}))},t.prototype.monitorIframeForHash=function(e,t){var r=this;return new Promise((function(n,o){t<6e3&&r.browserRequestLogger.warning("system.loadFrameTimeout or system.iframeHashTimeout set to lower ("+t+"ms) than the default (6000ms). This may result in timeouts.");var i=window.performance.now()+t,a=setInterval((function(){if(window.performance.now()>i)return r.removeHiddenIframe(e),clearInterval(a),void o(Fn.createMonitorIframeTimeoutError());var t=j.EMPTY_STRING,s=e.contentWindow;try{t=s?s.location.href:j.EMPTY_STRING}catch(e){}if(!ht.isEmpty(t)){var c=s?s.location.hash:j.EMPTY_STRING;return yr.hashContainsKnownProperties(c)?(r.removeHiddenIframe(e),clearInterval(a),void n(c)):void 0}}),zr)}))},t.prototype.loadFrame=function(e){var t=this;return new Promise((function(r,n){var o=t.createHiddenIframe();setTimeout((function(){o?(o.src=e,r(o)):n("Unable to load iframe")}),t.navigateFrameWait)}))},t.prototype.loadFrameSync=function(e){var t=this.createHiddenIframe();return t.src=e,t},t.prototype.createHiddenIframe=function(){var e=document.createElement("iframe");return e.style.visibility="hidden",e.style.position="absolute",e.style.width=e.style.height="0",e.style.border="0",e.setAttribute("sandbox","allow-scripts allow-same-origin allow-forms"),document.getElementsByTagName("body")[0].appendChild(e),e},t.prototype.removeHiddenIframe=function(e){document.body===e.parentNode&&document.body.removeChild(e)},t}(ho),vo=function(e){function t(t,r,n,o,i,a,s,c){var u=e.call(this,t,r,n,o,i,a,c)||this;return u.apiId=s,u}return R(t,e),t.prototype.acquireToken=function(e){return k(this,void 0,void 0,(function(){var t,r,n,o,i,a;return N(this,(function(s){switch(s.label){case 0:if(this.logger.verbose("acquireTokenByIframe called"),ht.isEmpty(e.loginHint)&&ht.isEmpty(e.sid)&&(!e.account||ht.isEmpty(e.account.username))&&this.logger.warning("No user hint provided. The authorization server may need more information to complete this request."),e.prompt&&e.prompt!==Q.NONE)throw Fn.createSilentPromptValueError(e.prompt);return[4,this.initializeAuthorizationRequest(O(O({},e),{prompt:Q.NONE}),Ur.Silent)];case 1:t=s.sent(),this.browserStorage.updateCacheEntries(t.state,t.nonce,t.authority,t.loginHint||"",t.account||null),r=this.initializeServerTelemetryManager(this.apiId),s.label=2;case 2:return s.trys.push([2,7,,8]),[4,this.initializeAuthorizationCodeRequest(t)];case 3:return n=s.sent(),[4,this.createAuthCodeClient(r,t.authority,t.azureCloudOptions)];case 4:return o=s.sent(),this.logger.verbose("Auth code client created"),[4,o.getAuthCodeUrl(t)];case 5:return i=s.sent(),[4,this.silentTokenHelper(i,n,o,this.logger)];case 6:return[2,s.sent()];case 7:throw(a=s.sent())instanceof Se&&a.setCorrelationId(this.correlationId),r.cacheFailedRequest(a),this.browserStorage.cleanRequestByState(t.state),a;case 8:return[2]}}))}))},t.prototype.logout=function(){return Promise.reject(Fn.createSilentLogoutUnsupportedError())},t.prototype.silentTokenHelper=function(e,t,r,n){return k(this,void 0,void 0,(function(){var o,i,a,s;return N(this,(function(c){switch(c.label){case 0:return[4,(o=new yo(r,this.browserStorage,t,n,this.config.system.navigateFrameWait)).initiateAuthRequest(e)];case 1:return i=c.sent(),[4,o.monitorIframeForHash(i,this.config.system.iframeHashTimeout)];case 2:return a=c.sent(),s=this.validateAndExtractStateFromHash(a,Ur.Silent,t.correlationId),[2,o.handleCodeResponseFromHash(a,s,r.authority,this.networkClient)]}}))}))},t}(uo),Eo=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return R(t,e),t.prototype.acquireToken=function(e){return k(this,void 0,void 0,(function(){var t,r,n,o,i=this;return N(this,(function(a){switch(a.label){case 0:return r=[O({},e)],[4,this.initializeBaseRequest(e)];case 1:return t=O.apply(void 0,r.concat([a.sent()])),n=this.initializeServerTelemetryManager(Pr.acquireTokenSilent_silentFlow),[4,this.createRefreshTokenClient(n,t.authority,t.azureCloudOptions)];case 2:return o=a.sent(),this.logger.verbose("Refresh token client created"),[2,o.acquireTokenByRefreshToken(t).catch((function(e){throw e instanceof Se&&e.setCorrelationId(i.correlationId),n.cacheFailedRequest(e),e}))]}}))}))},t.prototype.logout=function(){return Promise.reject(Fn.createSilentLogoutUnsupportedError())},t.prototype.createRefreshTokenClient=function(e,t,r){return k(this,void 0,void 0,(function(){var n;return N(this,(function(o){switch(o.label){case 0:return[4,this.getClientConfiguration(e,t,r)];case 1:return n=o.sent(),[2,new Ar(n)]}}))}))},t}(uo),Co=function(){function e(e,t,r,n){this.isBrowserEnvironment="undefined"!=typeof window,this.config=e,this.storage=t,this.logger=r,this.cryptoObj=n}return e.prototype.loadExternalTokens=function(e,t,r){if(this.logger.info("TokenCache - loadExternalTokens called"),!t.id_token)throw Fn.createUnableToLoadTokenError("Please ensure server response includes id token.");if(e.account)this.loadIdToken(t.id_token,e.account.homeAccountId,e.account.environment,e.account.tenantId,r),this.loadAccessToken(e,t,e.account.homeAccountId,e.account.environment,e.account.tenantId,r);else{if(!e.authority)throw Fn.createUnableToLoadTokenError("Please provide a request with an account or a request with authority.");var n=Lr.generateAuthority(e.authority,e.azureCloudOptions),o={protocolMode:this.config.auth.protocolMode,knownAuthorities:this.config.auth.knownAuthorities,cloudDiscoveryMetadata:this.config.auth.cloudDiscoveryMetadata,authorityMetadata:this.config.auth.authorityMetadata},i=new Lr(n,this.config.system.networkClient,this.storage,o);if(r.clientInfo)this.logger.trace("TokenCache - homeAccountId from options"),this.loadIdToken(t.id_token,r.clientInfo,i.hostnameAndPort,i.tenant,r),this.loadAccessToken(e,t,r.clientInfo,i.hostnameAndPort,i.tenant,r);else{if(!t.client_info)throw Fn.createUnableToLoadTokenError("Please provide clientInfo in the response or options.");this.logger.trace("TokenCache - homeAccountId from response"),this.loadIdToken(t.id_token,t.client_info,i.hostnameAndPort,i.tenant,r),this.loadAccessToken(e,t,t.client_info,i.hostnameAndPort,i.tenant,r)}}},e.prototype.loadIdToken=function(e,t,r,n,o){var i=sr.createIdTokenEntity(t,r,e,this.config.auth.clientId,n),a=new Xt(e,this.cryptoObj),s=o.clientInfo?Gt.createAccount(o.clientInfo,t,a,void 0,void 0,void 0,void 0,r):Gt.createGenericAccount(t,a,void 0,void 0,void 0,void 0,r);if(!this.isBrowserEnvironment)throw Fn.createUnableToLoadTokenError("loadExternalTokens is designed to work in browser environments only.");this.logger.verbose("TokenCache - loading id token"),this.storage.setAccount(s),this.storage.setIdTokenCredential(i)},e.prototype.loadAccessToken=function(e,t,r,n,o,i){if(t.access_token){if(!t.expires_in)throw Fn.createUnableToLoadTokenError("Please ensure server response includes expires_in value.");if(!i.extendedExpiresOn)throw Fn.createUnableToLoadTokenError("Please provide an extendedExpiresOn value in the options.");var a=new Kt(e.scopes).printScopes(),s=t.expires_in,c=i.extendedExpiresOn,u=ur.createAccessTokenEntity(r,n,t.access_token,this.config.auth.clientId,o,a,s,c,this.cryptoObj);if(!this.isBrowserEnvironment)throw Fn.createUnableToLoadTokenError("loadExternalTokens is designed to work in browser environments only.");this.logger.verbose("TokenCache - loading access token"),this.storage.setAccessTokenCredential(u)}else this.logger.verbose("TokenCache - No access token provided for caching")},e}(),wo=function(e){function t(t){var r=e.call(this,t)||this;return r.includeRedirectUri=!1,r}return R(t,e),t}(Tr),So=function(e){function t(t,r,n,o,i,a,s,c){var u=e.call(this,t,r,n,o,i,a,c)||this;return u.apiId=s,u}return R(t,e),t.prototype.acquireToken=function(e){return k(this,void 0,void 0,(function(){var t,r,n,o,i,a;return N(this,(function(s){switch(s.label){case 0:if(this.logger.trace("SilentAuthCodeClient.acquireToken called"),!e.code)throw Fn.createAuthCodeRequiredError();return[4,this.initializeAuthorizationRequest(e,Ur.Silent)];case 1:t=s.sent(),this.browserStorage.updateCacheEntries(t.state,t.nonce,t.authority,t.loginHint||"",t.account||null),r=this.initializeServerTelemetryManager(this.apiId),s.label=2;case 2:return s.trys.push([2,4,,5]),n=O(O({},t),{code:e.code}),[4,this.getClientConfiguration(r,t.authority)];case 3:return o=s.sent(),i=new wo(o),this.logger.verbose("Auth code client created"),[2,new yo(i,this.browserStorage,n,this.logger,this.config.system.navigateFrameWait).handleCodeResponseFromServer({code:e.code,msgraph_host:e.msGraphHost,cloud_graph_host_name:e.cloudGraphHostName,cloud_instance_host_name:e.cloudInstanceHostName},t.state,i.authority,this.networkClient,!1)];case 4:throw(a=s.sent())instanceof Se&&a.setCorrelationId(this.correlationId),r.cacheFailedRequest(a),this.browserStorage.cleanRequestByState(t.state),a;case 5:return[2]}}))}))},t.prototype.logout=function(){return Promise.reject(Fn.createSilentLogoutUnsupportedError())},t}(uo),To=function(){function e(e){var t,r,n,o,i,a,s,c,u,d,l,h;this.isBrowserEnvironment="undefined"!=typeof window,this.config=(t=e,r=this.isBrowserEnvironment,n=t.auth,o=t.cache,i=t.system,a={clientId:"",authority:""+j.DEFAULT_AUTHORITY,knownAuthorities:[],cloudDiscoveryMetadata:"",authorityMetadata:"",redirectUri:"",postLogoutRedirectUri:"",navigateToLoginRequestUrl:!0,clientCapabilities:[],protocolMode:vr.AAD,azureCloudOptions:{azureCloudInstance:pt.None,tenant:""}},s={cacheLocation:Rr.SessionStorage,storeAuthStateInCookie:!1,secureCookies:!1},c={loggerCallback:function(){},logLevel:Ce.Info,piiLoggingEnabled:!1},u=O(O({},Wt),{loggerOptions:c,networkClient:r?io.getBrowserNetworkClient():Kr,navigationClient:new ao,loadFrameTimeout:0,windowHashTimeout:i&&i.loadFrameTimeout||6e4,iframeHashTimeout:i&&i.loadFrameTimeout||6e3,navigateFrameWait:r&&io.detectIEOrEdge()?500:0,redirectNavigationTimeout:3e4,asyncPopups:!1,allowRedirectInIframe:!1}),{auth:O(O({},a),n),cache:O(O({},s),o),system:O(O({},u),i)}),this.logger=new gt(this.config.system.loggerOptions,"@azure/msal-browser","2.22.1"),this.networkClient=this.config.system.networkClient,this.navigationClient=this.config.system.navigationClient,this.redirectResponse=new Map,this.hybridAuthCodeResponses=new Map,this.browserCrypto=this.isBrowserEnvironment?new zn(this.logger):Te,this.eventHandler=new co(this.logger,this.browserCrypto),this.browserStorage=this.isBrowserEnvironment?new ro(this.config.auth.clientId,this.config.cache,this.browserCrypto,this.logger):(d=this.config.auth.clientId,l=this.logger,h={cacheLocation:Rr.MemoryStorage,storeAuthStateInCookie:!1,secureCookies:!1},new ro(d,h,Te,l)),this.tokenCache=new Co(this.config,this.browserStorage,this.logger,this.browserCrypto)}return e.prototype.handleRedirectPromise=function(e){return k(this,void 0,void 0,(function(){var t,r,n,o,i,a=this;return N(this,(function(s){return this.logger.verbose("handleRedirectPromise called"),t=this.getAllAccounts(),this.isBrowserEnvironment?(r=e||j.EMPTY_STRING,void 0===(n=this.redirectResponse.get(r))?(this.eventHandler.emitEvent(so.HANDLE_REDIRECT_START,Ur.Redirect),this.logger.verbose("handleRedirectPromise has been called for the first time, storing the promise"),o=this.browserStorage.getTemporaryCache(kr.CORRELATION_ID,!0)||"",i=new mo(this.config,this.browserStorage,this.browserCrypto,this.logger,this.eventHandler,this.navigationClient,o),n=i.handleRedirectPromise(e).then((function(e){e&&(t.length<a.getAllAccounts().length?(a.eventHandler.emitEvent(so.LOGIN_SUCCESS,Ur.Redirect,e),a.logger.verbose("handleRedirectResponse returned result, login success")):(a.eventHandler.emitEvent(so.ACQUIRE_TOKEN_SUCCESS,Ur.Redirect,e),a.logger.verbose("handleRedirectResponse returned result, acquire token success")));return a.eventHandler.emitEvent(so.HANDLE_REDIRECT_END,Ur.Redirect),e})).catch((function(e){throw t.length>0?a.eventHandler.emitEvent(so.ACQUIRE_TOKEN_FAILURE,Ur.Redirect,null,e):a.eventHandler.emitEvent(so.LOGIN_FAILURE,Ur.Redirect,null,e),a.eventHandler.emitEvent(so.HANDLE_REDIRECT_END,Ur.Redirect),e})),this.redirectResponse.set(r,n)):this.logger.verbose("handleRedirectPromise has been called previously, returning the result from the first call"),[2,n]):(this.logger.verbose("handleRedirectPromise returns null, not browser environment"),[2,null])}))}))},e.prototype.acquireTokenRedirect=function(e){return k(this,void 0,void 0,(function(){var t,r=this;return N(this,(function(n){return this.logger.verbose("acquireTokenRedirect called"),this.preflightBrowserEnvironmentCheck(Ur.Redirect),(t=this.getAllAccounts().length>0)?this.eventHandler.emitEvent(so.ACQUIRE_TOKEN_START,Ur.Redirect,e):this.eventHandler.emitEvent(so.LOGIN_START,Ur.Redirect,e),[2,new mo(this.config,this.browserStorage,this.browserCrypto,this.logger,this.eventHandler,this.navigationClient,e.correlationId).acquireToken(e).catch((function(e){throw t?r.eventHandler.emitEvent(so.ACQUIRE_TOKEN_FAILURE,Ur.Redirect,null,e):r.eventHandler.emitEvent(so.LOGIN_FAILURE,Ur.Redirect,null,e),e}))]}))}))},e.prototype.acquireTokenPopup=function(e){var t=this;try{this.logger.verbose("acquireTokenPopup called",e.correlationId),this.preflightBrowserEnvironmentCheck(Ur.Popup)}catch(e){return Promise.reject(e)}var r=this.getAllAccounts();return r.length>0?this.eventHandler.emitEvent(so.ACQUIRE_TOKEN_START,Ur.Popup,e):this.eventHandler.emitEvent(so.LOGIN_START,Ur.Popup,e),new go(this.config,this.browserStorage,this.browserCrypto,this.logger,this.eventHandler,this.navigationClient,e.correlationId).acquireToken(e).then((function(e){return r.length<t.getAllAccounts().length?t.eventHandler.emitEvent(so.LOGIN_SUCCESS,Ur.Popup,e):t.eventHandler.emitEvent(so.ACQUIRE_TOKEN_SUCCESS,Ur.Popup,e),e})).catch((function(e){return r.length>0?t.eventHandler.emitEvent(so.ACQUIRE_TOKEN_FAILURE,Ur.Popup,null,e):t.eventHandler.emitEvent(so.LOGIN_FAILURE,Ur.Popup,null,e),Promise.reject(e)}))},e.prototype.ssoSilent=function(e){return k(this,void 0,void 0,(function(){var t,r;return N(this,(function(n){switch(n.label){case 0:this.preflightBrowserEnvironmentCheck(Ur.Silent),this.logger.verbose("ssoSilent called",e.correlationId),this.eventHandler.emitEvent(so.SSO_SILENT_START,Ur.Silent,e),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,new vo(this.config,this.browserStorage,this.browserCrypto,this.logger,this.eventHandler,this.navigationClient,Pr.ssoSilent,e.correlationId).acquireToken(e)];case 2:return t=n.sent(),this.eventHandler.emitEvent(so.SSO_SILENT_SUCCESS,Ur.Silent,t),[2,t];case 3:throw r=n.sent(),this.eventHandler.emitEvent(so.SSO_SILENT_FAILURE,Ur.Silent,null,r),r;case 4:return[2]}}))}))},e.prototype.acquireTokenByCode=function(e){return k(this,void 0,void 0,(function(){var t,r=this;return N(this,(function(n){this.preflightBrowserEnvironmentCheck(Ur.Silent),this.logger.trace("acquireTokenByCode called",e.correlationId),this.eventHandler.emitEvent(so.ACQUIRE_TOKEN_BY_CODE_START,Ur.Silent,e);try{if(!e.code)throw Fn.createAuthCodeRequiredError();return(t=this.hybridAuthCodeResponses.get(e.code))?this.logger.verbose("Existing acquireTokenByCode request found",e.correlationId):(this.logger.verbose("Initiating new acquireTokenByCode request",e.correlationId),t=this.acquireTokenByCodeAsync(e).then((function(t){return r.eventHandler.emitEvent(so.ACQUIRE_TOKEN_BY_CODE_SUCCESS,Ur.Silent,t),r.hybridAuthCodeResponses.delete(e.code),t})).catch((function(t){throw r.hybridAuthCodeResponses.delete(e.code),t})),this.hybridAuthCodeResponses.set(e.code,t)),[2,t]}catch(e){throw this.eventHandler.emitEvent(so.ACQUIRE_TOKEN_BY_CODE_FAILURE,Ur.Silent,null,e),e}return[2]}))}))},e.prototype.acquireTokenByCodeAsync=function(e){return k(this,void 0,void 0,(function(){return N(this,(function(t){switch(t.label){case 0:return this.logger.trace("acquireTokenByCodeAsync called",e.correlationId),[4,new So(this.config,this.browserStorage,this.browserCrypto,this.logger,this.eventHandler,this.navigationClient,Pr.acquireTokenByCode,e.correlationId).acquireToken(e)];case 1:return[2,t.sent()]}}))}))},e.prototype.acquireTokenByRefreshToken=function(e){return k(this,void 0,void 0,(function(){var t=this;return N(this,(function(r){return this.eventHandler.emitEvent(so.ACQUIRE_TOKEN_NETWORK_START,Ur.Silent,e),io.blockReloadInHiddenIframes(),[2,new Eo(this.config,this.browserStorage,this.browserCrypto,this.logger,this.eventHandler,this.navigationClient,e.correlationId).acquireToken(e).catch((function(r){var n=r instanceof er,o=r instanceof gr,i=r.errorCode===Br;if(n&&i&&!o)return t.logger.verbose("Refresh token expired or invalid, attempting acquire token by iframe",e.correlationId),new vo(t.config,t.browserStorage,t.browserCrypto,t.logger,t.eventHandler,t.navigationClient,Pr.acquireTokenSilent_authCode,e.correlationId).acquireToken(e);throw r}))]}))}))},e.prototype.logout=function(e){return k(this,void 0,void 0,(function(){return N(this,(function(t){return this.logger.warning("logout API is deprecated and will be removed in msal-browser v3.0.0. Use logoutRedirect instead."),[2,this.logoutRedirect(e)]}))}))},e.prototype.logoutRedirect=function(e){return k(this,void 0,void 0,(function(){return N(this,(function(t){return this.preflightBrowserEnvironmentCheck(Ur.Redirect),[2,new mo(this.config,this.browserStorage,this.browserCrypto,this.logger,this.eventHandler,this.navigationClient,null==e?void 0:e.correlationId).logout(e)]}))}))},e.prototype.logoutPopup=function(e){try{return this.preflightBrowserEnvironmentCheck(Ur.Popup),new go(this.config,this.browserStorage,this.browserCrypto,this.logger,this.eventHandler,this.navigationClient,null==e?void 0:e.correlationId).logout(e)}catch(e){return Promise.reject(e)}},e.prototype.getAllAccounts=function(){return this.logger.verbose("getAllAccounts called"),this.isBrowserEnvironment?this.browserStorage.getAllAccounts():[]},e.prototype.getAccountByUsername=function(e){var t=this.getAllAccounts();return!ht.isEmpty(e)&&t&&t.length?(this.logger.verbose("Account matching username found, returning"),this.logger.verbosePii("Returning signed-in accounts matching username: "+e),t.filter((function(t){return t.username.toLowerCase()===e.toLowerCase()}))[0]||null):(this.logger.verbose("getAccountByUsername: No matching account found, returning null"),null)},e.prototype.getAccountByHomeId=function(e){var t=this.getAllAccounts();return!ht.isEmpty(e)&&t&&t.length?(this.logger.verbose("Account matching homeAccountId found, returning"),this.logger.verbosePii("Returning signed-in accounts matching homeAccountId: "+e),t.filter((function(t){return t.homeAccountId===e}))[0]||null):(this.logger.verbose("getAccountByHomeId: No matching account found, returning null"),null)},e.prototype.getAccountByLocalId=function(e){var t=this.getAllAccounts();return!ht.isEmpty(e)&&t&&t.length?(this.logger.verbose("Account matching localAccountId found, returning"),this.logger.verbosePii("Returning signed-in accounts matching localAccountId: "+e),t.filter((function(t){return t.localAccountId===e}))[0]||null):(this.logger.verbose("getAccountByLocalId: No matching account found, returning null"),null)},e.prototype.setActiveAccount=function(e){this.browserStorage.setActiveAccount(e)},e.prototype.getActiveAccount=function(){return this.browserStorage.getActiveAccount()},e.prototype.preflightBrowserEnvironmentCheck=function(e){if(this.logger.verbose("preflightBrowserEnvironmentCheck started"),io.blockNonBrowserEnvironment(this.isBrowserEnvironment),io.blockRedirectInIframe(e,this.config.system.allowRedirectInIframe),io.blockReloadInHiddenIframes(),io.blockAcquireTokenInPopups(),e===Ur.Redirect&&this.config.cache.cacheLocation===Rr.MemoryStorage&&!this.config.cache.storeAuthStateInCookie)throw Zn.createInMemoryRedirectUnavailableError();e!==Ur.Redirect&&e!==Ur.Popup||this.preflightInteractiveRequest()},e.prototype.preflightInteractiveRequest=function(){this.logger.verbose("preflightInteractiveRequest called, validating app environment"),io.blockReloadInHiddenIframes(),this.browserStorage.setInteractionInProgress(!0)},e.prototype.addEventCallback=function(e){return this.eventHandler.addEventCallback(e)},e.prototype.removeEventCallback=function(e){this.eventHandler.removeEventCallback(e)},e.prototype.enableAccountStorageEvents=function(){this.eventHandler.enableAccountStorageEvents()},e.prototype.disableAccountStorageEvents=function(){this.eventHandler.disableAccountStorageEvents()},e.prototype.getTokenCache=function(){return this.tokenCache},e.prototype.getLogger=function(){return this.logger},e.prototype.setLogger=function(e){this.logger=e},e.prototype.initializeWrapperLibrary=function(e,t){this.browserStorage.setWrapperMetadata(e,t)},e.prototype.setNavigationClient=function(e){this.navigationClient=e},e.prototype.getConfiguration=function(){return this.config},e}(),Ao=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return R(t,e),t.prototype.acquireToken=function(e){return k(this,void 0,void 0,(function(){var t,r,n,o;return N(this,(function(i){switch(i.label){case 0:return t=this.initializeServerTelemetryManager(Pr.acquireTokenSilent_silentFlow),[4,this.createSilentFlowClient(t,e.authority,e.azureCloudOptions)];case 1:r=i.sent(),this.logger.verbose("Silent auth client created"),i.label=2;case 2:return i.trys.push([2,4,,5]),[4,r.acquireCachedToken(e)];case 3:return n=i.sent(),this.eventHandler.emitEvent(so.ACQUIRE_TOKEN_SUCCESS,Ur.Silent,n),[2,n];case 4:throw(o=i.sent())instanceof Fn&&o.errorCode===Ln.code&&this.logger.verbose("Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair."),o;case 5:return[2]}}))}))},t.prototype.logout=function(){return Promise.reject(Fn.createSilentLogoutUnsupportedError())},t.prototype.createSilentFlowClient=function(e,t,r){return k(this,void 0,void 0,(function(){var n;return N(this,(function(o){switch(o.label){case 0:return[4,this.getClientConfiguration(e,t,r)];case 1:return n=o.sent(),[2,new Ir(n)]}}))}))},t.prototype.initializeSilentRequest=function(e,t){return k(this,void 0,void 0,(function(){var r;return N(this,(function(n){switch(n.label){case 0:return r=[O({},e)],[4,this.initializeBaseRequest(e)];case 1:return[2,O.apply(void 0,[O.apply(void 0,r.concat([n.sent()])),{account:t,forceRefresh:e.forceRefresh||!1}])]}}))}))},t}(uo);
/*! @azure/msal-browser v2.22.1 2022-03-07 */const Io=new(function(e){function t(t){var r=e.call(this,t)||this;return r.activeSilentTokenRequests=new Map,r}return R(t,e),t.prototype.loginRedirect=function(e){return k(this,void 0,void 0,(function(){return N(this,(function(t){return this.logger.verbose("loginRedirect called"),[2,this.acquireTokenRedirect(e||Qr)]}))}))},t.prototype.loginPopup=function(e){return this.logger.verbose("loginPopup called"),this.acquireTokenPopup(e||Qr)},t.prototype.acquireTokenSilent=function(e){return k(this,void 0,void 0,(function(){var t,r,n,o,i,a=this;return N(this,(function(s){if(this.preflightBrowserEnvironmentCheck(Ur.Silent),this.logger.verbose("acquireTokenSilent called",e.correlationId),!(t=e.account||this.getActiveAccount()))throw Fn.createNoAccountError();return r={clientId:this.config.auth.clientId,authority:e.authority||"",scopes:e.scopes,homeAccountIdentifier:t.homeAccountId,claims:e.claims,authenticationScheme:e.authenticationScheme,resourceRequestMethod:e.resourceRequestMethod,resourceRequestUri:e.resourceRequestUri,shrClaims:e.shrClaims,sshKid:e.sshKid},n=JSON.stringify(r),void 0===(o=this.activeSilentTokenRequests.get(n))?(this.logger.verbose("acquireTokenSilent called for the first time, storing active request",e.correlationId),i=this.acquireTokenSilentAsync(e,t).then((function(e){return a.activeSilentTokenRequests.delete(n),e})).catch((function(e){throw a.activeSilentTokenRequests.delete(n),e})),this.activeSilentTokenRequests.set(n,i),[2,i]):(this.logger.verbose("acquireTokenSilent has been called previously, returning the result from the first call",e.correlationId),[2,o])}))}))},t.prototype.acquireTokenSilentAsync=function(e,t){return k(this,void 0,void 0,(function(){var r,n,o=this;return N(this,(function(i){switch(i.label){case 0:return[4,(r=new Ao(this.config,this.browserStorage,this.browserCrypto,this.logger,this.eventHandler,this.navigationClient,e.correlationId)).initializeSilentRequest(e,t)];case 1:return n=i.sent(),this.eventHandler.emitEvent(so.ACQUIRE_TOKEN_START,Ur.Silent,e),[2,r.acquireToken(n).catch((function(){return k(o,void 0,void 0,(function(){var e,t;return N(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),[4,this.acquireTokenByRefreshToken(n)];case 1:return e=r.sent(),this.eventHandler.emitEvent(so.ACQUIRE_TOKEN_SUCCESS,Ur.Silent,e),[2,e];case 2:throw t=r.sent(),this.eventHandler.emitEvent(so.ACQUIRE_TOKEN_FAILURE,Ur.Silent,null,t),t;case 3:return[2]}}))}))}))]}}))}))},t}(To))({auth:{clientId:"cd023a23-4fff-48b5-84fc-6e458b839915"}}),_o={scopes:["openid","profile","https://elegastsandbox.crm4.dynamics.com//user_impersonation"]},bo=async()=>{try{return await Io.loginPopup(),await Ro()}catch(e){}},Ro=async()=>{let e=null;try{e=await Io.acquireTokenPopup(_o)}catch(e){}finally{return e}},Oo={_mainOrg:"https://elegastsandbox.crm4.dynamics.com",AUTH_KEY:null,AuthToMicrosoft:async()=>{try{const e=await bo();(null!==e||e.accessToken)&&Oo.setAuth(e.accessToken)}catch(e){}},ActionCollectionBase:()=>{},AlertDialogStrings:()=>{},ArrayEx:()=>{},AttributeFormat:()=>{},AttributeType:()=>{},BeginSecureSessionResponseCode:()=>{},BusinessProcessFlowInstanceState:()=>{},BusinessProcessFlowInstanceStatus:()=>{},BusinessRuleNotificationBase:()=>{},ChartPaneMode:()=>{},ClientName:()=>{},ClientState:()=>{},ClientStates:()=>{},Collection:()=>{},ComponentModel:()=>{},ConfirmDialogStrings:()=>{},Constants:()=>{},ControlType:()=>{},CountRecords:_,DataLoadEventArgs:()=>{},DataLoadState:()=>{},DateFormattingInfo:()=>{},DelegateItterator:()=>{},Description:()=>{},Device:()=>{},Diagnostics:()=>{},Dialog:()=>{},DialogOptions:()=>{},Encoding:()=>{},EntityFormOptions:()=>{},EntityListPageInput:()=>{},EntityMetadata:()=>{},EntityRelationshipRoleType:()=>{},EntityRelationshipType:()=>{},ErrorDialogOptions:()=>{},ErrorResponse:()=>{},ExecutionContext:()=>{},Flag:()=>{},FormDataAttributePrivilege:()=>{},FormDataAttributePrivileges:()=>{},FormFactor:()=>{},FormNotificationOptions:()=>{},FormSaveAction:()=>{},FormType:()=>{},Gen:()=>{},GetAttributes:I,GridType:()=>{},IBusinessRuleNotificationProvider:()=>{},IsMockXrm:()=>!0,IXrmCollectionItem:()=>{},Interfaces:()=>{},Internal:()=>{},JavaScriptConsoleTraceListener:()=>{},KBSearchResult:()=>{},LocalizedLabel:()=>{},LookupObject:()=>{},LookupOptions:()=>{},LookupStyle:()=>{},MetricsStopwatch:()=>{},Mobile:()=>{},Navigation:A,NotificationLevel:()=>{},NumberEx:()=>{},Objects:()=>{},Offline:()=>{},OfflineErrorResponse:()=>{},OpenFileMode:()=>{},OpenFormSuccessResponse:()=>{},OptionSetItem:()=>{},OrganizationServiceProxyBridge:()=>{},Page:()=>{},PageBridge:()=>{},PageContextBridge:()=>{},PageEx:()=>{},PageInput:()=>{},PageType:()=>{},Panel:()=>{},ProcessActionSuccessResponse:()=>{},ProcessResponse:()=>{},ProcessState:()=>{},ProcessStatus:()=>{},RelationshipReference:()=>{},RequiredLevel:()=>{},SaveErrorResponse:()=>{},SaveEventArgs:()=>{},SaveMode:()=>{},SaveOptions:()=>{},SaveSuccessResponse:()=>{},ScopedServiceDirectory:()=>{},Sdk:()=>{},Services:()=>{},Soap:()=>{},StepProgress:()=>{},StepType:()=>{},StringBuilderTraceListener:()=>{},StringEx:()=>{},SubmitMode:()=>{},TabDisplayState:()=>{},TabItem:()=>{},TabSection:()=>{},TaskFlowOptions:()=>{},TaskIterrator:()=>{},Tracing:()=>{},UI:()=>{},Utility:T,WebApi:Lo,WindowOptions:()=>{},XrmBusinessProcessFlow:()=>{},XrmChart:()=>{},XrmCollection:()=>{},XrmCollectionBase:()=>{},XrmCollectionDictionary:()=>{},XrmControl:()=>{},XrmControlACI:()=>{},XrmControlAutoLookup:()=>{},XrmControlBase:()=>{},XrmControlButton:()=>{},XrmControlDateTime:()=>{},XrmControlEmailEngagementActionsControl:()=>{},XrmControlEmailRecipientActivity:()=>{},XrmControlFormSelector:()=>{},XrmControlGrid:()=>{},XrmControlIFrame:()=>{},XrmControlLookup:()=>{},XrmControlOptionSet:()=>{},XrmControlQuickForm:()=>{},XrmControlRoutedGrid:()=>{},XrmControlSearchWidget:()=>{},XrmControlSilverlight:()=>{},XrmControlSubGrid:()=>{},XrmControlText:()=>{},XrmControlTimer:()=>{},XrmControlWebResource:()=>{},XrmControls:()=>{},XrmDataControl:()=>{},XrmDialog:()=>{},XrmEncoding:()=>{},XrmEntities:()=>{},XrmEntity:()=>{},XrmEntityAttribute:()=>{},XrmEntityAttributeBoolean:()=>{},XrmEntityAttributeDateTime:()=>{},XrmEntityAttributeLookup:()=>{},XrmEntityAttributeNumber:()=>{},XrmEntityAttributeOptionSet:()=>{},XrmEntityAttributeOptionSetBase:()=>{},XrmEntityAttributeString:()=>{},XrmEntityAttributes:()=>{},XrmEntityRelationship:()=>{},XrmFile:()=>{},XrmForm:()=>{},XrmFormData:()=>{},XrmFormSelectorItem:()=>{},XrmFormSelectorItems:()=>{},XrmFormUI:()=>{},XrmGlobalContext:()=>{},XrmGridData:()=>{},XrmGridFilter:()=>{},XrmGridRow:()=>{},XrmGridRows:()=>{},XrmInternal:()=>{},XrmNavigation:()=>{},XrmNavigationItem:()=>{},XrmNavigationItems:()=>{},XrmNavigations:()=>{},XrmOffline:()=>{},XrmOpenFileOption:()=>{},XrmOrganizationSettings:()=>{},XrmPageContextClient:()=>{},XrmPanel:()=>{},XrmPerformance:()=>{},XrmProcessControlData:()=>{},XrmProcessControlUI:()=>{},XrmProcessStage:()=>{},XrmProcessStep:()=>{},XrmQuickForms:()=>{},XrmRelatedEntities:()=>{},XrmSdkMessages:()=>{},XrmServiceDirectory:()=>{},XrmTab:()=>{},XrmTabNavigator:()=>{},XrmTabNavigatorGroup:()=>{},XrmTabNavigators:()=>{},XrmTabSection:()=>{},XrmTabSections:()=>{},XrmTabs:()=>{},XrmTaskProcess:()=>{},XrmTrace:()=>{},XrmUserSettings:()=>{},XrmUtility:()=>{},XrmViewSelector:()=>{},getName:()=>"Xrm",setAuth:function(e){globalThis.AUTH_KEY=e},getAuth:()=>globalThis.AUTH_KEY,getOrg:()=>globalThis._mainOrg},ko=t=>r=>n=>async i=>{let a="",s=r&&JSON.stringify(r);return y()&&(a=await o()),Oo.getAuth()&&(i||(i={}),i.Authorization="Bearer "+Oo.getAuth()),"$batch"===n&&(s=r),fetch(`${a?"/"+a:a}${e}/${n}`,{headers:{...i},method:t,body:s})},No=ko("GET")(),Po=async(e,t,r="")=>{let n=await S(e);return(await No(`${n.EntityMetadata.LogicalCollectionName}(${t})${r||""}`)()).json()},Uo=ko("POST"),Mo=ko("PATCH"),Do=ko("DELETE")(),Lo={createRecord:async(e,t)=>{let r=await S(e),n=await Uo(t)("/"+r.EntityMetadata.LogicalCollectionName)({"content-type":"application/json",Prefer:"return=representation"}),o=await n.json();return Promise.resolve({entityType:e,id:o[r.EntityMetadata.PrimaryIdAttribute]})},deleteRecord:async(e,t)=>{let r=await S(e);await Do(`/${r.EntityMetadata.LogicalCollectionName}(${t})`)();return Promise.resolve({entityType:e,id:t})},updateRecord:async(e,t,r)=>{let n=await S(e);return await Mo(r)(`/${n.EntityMetadata.LogicalCollectionName}(${t})`)({"content-type":"application/json"}),Promise.resolve({entityType:e,id:t})},retrieveRecord:Po,retrieveMultipleRecords:(e,t="",r="")=>v(C,((e="",t="")=>async({EntityMetadata:r})=>No(`${function(e){if(e){let t="s";return"s"===e.charAt(e.length-1)&&(t="es"),"savedquery"===e&&(e="savedquerie"),e+t}return e}(r.LogicalName)}${e||""}`)(t?{prefer:'odata.include-annotations="*",odata.maxpagesize='+t}:{}))(t,r),S)(e),executeMultiple:async t=>{const r=Date.now();try{let n=await(async(t,r)=>{let n=[];return r.forEach(r=>{let o="";n.push("--batch_"+t),n.push("Content-type: application/http"),n.push("Content-Transfer-Encoding:binary"),r.id&&(o="("+r.id+")"),n.push(""),n.push(r.method.toUpperCase()+" "+e+"/"+r.entity+o+" HTTP/1.1"),n.push("MSCRM.SuppressDuplicateDetection: true"),n.push("If-match: *"),n.push("AutoDisassociate: true"),n.push("Content-Type: application/json"),n.push('Prefer: odata.include-annotations="*"'),n.push("Clienthost: Browser"),n.push(""),n.push(JSON.stringify(r.data))}),n.push("--batch_"+t+"--"),Promise.resolve(n.join("\r\n"))})(r,t),o=await Uo(n)("$batch")({Accept:"application/json","content-type":"multipart/mixed;boundary=batch_"+r});return Promise.resolve(o)}catch(e){return Promise.reject(e)}},online:{execute:e=>{let t=e.getMetadata().operationName;return Uo(e)(t)({"content-type":"application/json"})}}},Ho={_mainOrg:"https://elegastsandbox.crm4.dynamics.com",AUTH_KEY:null,AuthToMicrosoft:async()=>{try{const e=await bo();(null!==e||e.accessToken)&&Ho.setAuth(e.accessToken)}catch(e){}},ActionCollectionBase:()=>{},AlertDialogStrings:()=>{},ArrayEx:()=>{},AttributeFormat:()=>{},AttributeType:()=>{},BeginSecureSessionResponseCode:()=>{},BusinessProcessFlowInstanceState:()=>{},BusinessProcessFlowInstanceStatus:()=>{},BusinessRuleNotificationBase:()=>{},ChartPaneMode:()=>{},ClientName:()=>{},ClientState:()=>{},ClientStates:()=>{},Collection:()=>{},ComponentModel:()=>{},ConfirmDialogStrings:()=>{},Constants:()=>{},ControlType:()=>{},CountRecords:_,DataLoadEventArgs:()=>{},DataLoadState:()=>{},DateFormattingInfo:()=>{},DelegateItterator:()=>{},Description:()=>{},Device:()=>{},Diagnostics:()=>{},Dialog:()=>{},DialogOptions:()=>{},Encoding:()=>{},EntityFormOptions:()=>{},EntityListPageInput:()=>{},EntityMetadata:()=>{},EntityRelationshipRoleType:()=>{},EntityRelationshipType:()=>{},ErrorDialogOptions:()=>{},ErrorResponse:()=>{},ExecutionContext:()=>{},Flag:()=>{},FormDataAttributePrivilege:()=>{},FormDataAttributePrivileges:()=>{},FormFactor:()=>{},FormNotificationOptions:()=>{},FormSaveAction:()=>{},FormType:()=>{},Gen:()=>{},GetAttributes:I,GridType:()=>{},IBusinessRuleNotificationProvider:()=>{},IsMockXrm:()=>!0,IXrmCollectionItem:()=>{},Interfaces:()=>{},Internal:()=>{},JavaScriptConsoleTraceListener:()=>{},KBSearchResult:()=>{},LocalizedLabel:()=>{},LookupObject:()=>{},LookupOptions:()=>{},LookupStyle:()=>{},MetricsStopwatch:()=>{},Mobile:()=>{},Navigation:A,NotificationLevel:()=>{},NumberEx:()=>{},Objects:()=>{},Offline:()=>{},OfflineErrorResponse:()=>{},OpenFileMode:()=>{},OpenFormSuccessResponse:()=>{},OptionSetItem:()=>{},OrganizationServiceProxyBridge:()=>{},Page:()=>{},PageBridge:()=>{},PageContextBridge:()=>{},PageEx:()=>{},PageInput:()=>{},PageType:()=>{},Panel:()=>{},ProcessActionSuccessResponse:()=>{},ProcessResponse:()=>{},ProcessState:()=>{},ProcessStatus:()=>{},RelationshipReference:()=>{},RequiredLevel:()=>{},SaveErrorResponse:()=>{},SaveEventArgs:()=>{},SaveMode:()=>{},SaveOptions:()=>{},SaveSuccessResponse:()=>{},ScopedServiceDirectory:()=>{},Sdk:()=>{},Services:()=>{},Soap:()=>{},StepProgress:()=>{},StepType:()=>{},StringBuilderTraceListener:()=>{},StringEx:()=>{},SubmitMode:()=>{},TabDisplayState:()=>{},TabItem:()=>{},TabSection:()=>{},TaskFlowOptions:()=>{},TaskIterrator:()=>{},Tracing:()=>{},UI:()=>{},Utility:T,WebApi:Lo,WindowOptions:()=>{},XrmBusinessProcessFlow:()=>{},XrmChart:()=>{},XrmCollection:()=>{},XrmCollectionBase:()=>{},XrmCollectionDictionary:()=>{},XrmControl:()=>{},XrmControlACI:()=>{},XrmControlAutoLookup:()=>{},XrmControlBase:()=>{},XrmControlButton:()=>{},XrmControlDateTime:()=>{},XrmControlEmailEngagementActionsControl:()=>{},XrmControlEmailRecipientActivity:()=>{},XrmControlFormSelector:()=>{},XrmControlGrid:()=>{},XrmControlIFrame:()=>{},XrmControlLookup:()=>{},XrmControlOptionSet:()=>{},XrmControlQuickForm:()=>{},XrmControlRoutedGrid:()=>{},XrmControlSearchWidget:()=>{},XrmControlSilverlight:()=>{},XrmControlSubGrid:()=>{},XrmControlText:()=>{},XrmControlTimer:()=>{},XrmControlWebResource:()=>{},XrmControls:()=>{},XrmDataControl:()=>{},XrmDialog:()=>{},XrmEncoding:()=>{},XrmEntities:()=>{},XrmEntity:()=>{},XrmEntityAttribute:()=>{},XrmEntityAttributeBoolean:()=>{},XrmEntityAttributeDateTime:()=>{},XrmEntityAttributeLookup:()=>{},XrmEntityAttributeNumber:()=>{},XrmEntityAttributeOptionSet:()=>{},XrmEntityAttributeOptionSetBase:()=>{},XrmEntityAttributeString:()=>{},XrmEntityAttributes:()=>{},XrmEntityRelationship:()=>{},XrmFile:()=>{},XrmForm:()=>{},XrmFormData:()=>{},XrmFormSelectorItem:()=>{},XrmFormSelectorItems:()=>{},XrmFormUI:()=>{},XrmGlobalContext:()=>{},XrmGridData:()=>{},XrmGridFilter:()=>{},XrmGridRow:()=>{},XrmGridRows:()=>{},XrmInternal:()=>{},XrmNavigation:()=>{},XrmNavigationItem:()=>{},XrmNavigationItems:()=>{},XrmNavigations:()=>{},XrmOffline:()=>{},XrmOpenFileOption:()=>{},XrmOrganizationSettings:()=>{},XrmPageContextClient:()=>{},XrmPanel:()=>{},XrmPerformance:()=>{},XrmProcessControlData:()=>{},XrmProcessControlUI:()=>{},XrmProcessStage:()=>{},XrmProcessStep:()=>{},XrmQuickForms:()=>{},XrmRelatedEntities:()=>{},XrmSdkMessages:()=>{},XrmServiceDirectory:()=>{},XrmTab:()=>{},XrmTabNavigator:()=>{},XrmTabNavigatorGroup:()=>{},XrmTabNavigators:()=>{},XrmTabSection:()=>{},XrmTabSections:()=>{},XrmTabs:()=>{},XrmTaskProcess:()=>{},XrmTrace:()=>{},XrmUserSettings:()=>{},XrmUtility:()=>{},XrmViewSelector:()=>{},getName:()=>"Xrm",setAuth:function(e){globalThis.AUTH_KEY=e},getAuth:()=>globalThis.AUTH_KEY,getOrg:()=>globalThis._mainOrg};return Ho}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

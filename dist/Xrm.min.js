var Xrm=function(){"use strict";function t(t,n){return t(n={exports:{}},n.exports),n.exports}var n=t((function(t){var n=function(t){var n=Object.prototype,e=n.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",c=r.toStringTag||"@@toStringTag";function u(t,n,e){return Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}),t[n]}try{u({},"")}catch(t){u=function(t,n,e){return t[n]=e}}function a(t,n,e,r){var o=n&&n.prototype instanceof l?n:l,i=Object.create(o.prototype),c=new S(r||[]);return i._invoke=function(t,n,e){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return P()}for(e.method=o,e.arg=i;;){var c=e.delegate;if(c){var u=w(c,e);if(u){if(u===s)continue;return u}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if("suspendedStart"===r)throw r="completed",e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r="executing";var a=f(t,n,e);if("normal"===a.type){if(r=e.done?"completed":"suspendedYield",a.arg===s)continue;return{value:a.arg,done:e.done}}"throw"===a.type&&(r="completed",e.method="throw",e.arg=a.arg)}}}(t,e,c),i}function f(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}t.wrap=a;var s={};function l(){}function p(){}function m(){}var h={};h[o]=function(){return this};var y=Object.getPrototypeOf,d=y&&y(y(E([])));d&&d!==n&&e.call(d,o)&&(h=d);var v=m.prototype=l.prototype=Object.create(h);function g(t){["next","throw","return"].forEach((function(n){u(t,n,(function(t){return this._invoke(n,t)}))}))}function b(t,n){var r;this._invoke=function(o,i){function c(){return new n((function(r,c){!function r(o,i,c,u){var a=f(t[o],t,i);if("throw"!==a.type){var s=a.arg,l=s.value;return l&&"object"==typeof l&&e.call(l,"__await")?n.resolve(l.__await).then((function(t){r("next",t,c,u)}),(function(t){r("throw",t,c,u)})):n.resolve(l).then((function(t){s.value=t,c(s)}),(function(t){return r("throw",t,c,u)}))}u(a.arg)}(o,i,r,c)}))}return r=r?r.then(c,c):c()}}function w(t,n){var e=t.iterator[n.method];if(void 0===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=void 0,w(t,n),"throw"===n.method))return s;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return s}var r=f(e,t.iterator,n.arg);if("throw"===r.type)return n.method="throw",n.arg=r.arg,n.delegate=null,s;var o=r.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,s):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,s)}function X(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function x(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function S(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(X,this),this.reset(!0)}function E(t){if(t){var n=t[o];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function n(){for(;++r<t.length;)if(e.call(t,r))return n.value=t[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return i.next=i}}return{next:P}}function P(){return{value:void 0,done:!0}}return p.prototype=v.constructor=m,m.constructor=p,p.displayName=u(m,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===p||"GeneratorFunction"===(n.displayName||n.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,u(t,c,"GeneratorFunction")),t.prototype=Object.create(v),t},t.awrap=function(t){return{__await:t}},g(b.prototype),b.prototype[i]=function(){return this},t.AsyncIterator=b,t.async=function(n,e,r,o,i){void 0===i&&(i=Promise);var c=new b(a(n,e,r,o),i);return t.isGeneratorFunction(e)?c:c.next().then((function(t){return t.done?t.value:c.next()}))},g(v),u(v,c,"Generator"),v[o]=function(){return this},v.toString=function(){return"[object Generator]"},t.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=E,S.prototype={constructor:S,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(x),!t)for(var n in this)"t"===n.charAt(0)&&e.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function r(e,r){return c.type="throw",c.arg=t,n.next=e,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],c=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var u=e.call(i,"catchLoc"),a=e.call(i,"finallyLoc");if(u&&a){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!a)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(t,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&e.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var c=i?i.completion:{};return c.type=t,c.arg=n,i?(this.method="next",this.next=i.finallyLoc,s):this.complete(c)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),s},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),x(e),s}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var o=r.arg;x(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,e){return this.delegate={iterator:E(t),resultName:n,nextLoc:e},"next"===this.method&&(this.arg=void 0),s}},t}(t.exports);try{regeneratorRuntime=n}catch(t){Function("r","regeneratorRuntime = r")(n)}}));function e(t,n,e,r,o,i,c){try{var u=t[i](c),a=u.value}catch(t){return void e(t)}u.done?n(a):Promise.resolve(a).then(r,o)}var r=function(t){return function(){var n=this,r=arguments;return new Promise((function(o,i){var c=t.apply(n,r);function u(t){e(c,o,i,u,a,"next",t)}function a(t){e(c,o,i,u,a,"throw",t)}u(void 0)}))}},o=t((function(t){function n(e){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?t.exports=n=function(t){return typeof t}:t.exports=n=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(e)}t.exports=n})),i="".concat("object"===("undefined"==typeof process?"undefined":o(process))?"http://localhost:3000":"","/api/data/v9.0"),c="object"===("undefined"==typeof location?"undefined":o(location))&&location.origin,u=/[-a-zA-Z0-9]*?\.(crm[0-9]*?\.dynamics\.com|crm\.microsoftdynamics\.us)/;var a=function(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t},f=function(){return!u.test(location.href)},s=function(t){var e={};return r(n.mark((function r(){var o,i=arguments;return n.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return o=JSON.stringify(i),e[o]=e[o]||t.apply(this,i),n.abrupt("return",e[o]);case 3:case"end":return n.stop()}}),r,this)})))},l=s(r(n.mark((function t(){var e;return n.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch("/tools/systemcustomization/systemCustomization.aspx?pid=05&web=true");case 2:return e=t.sent,t.abrupt("return",e.text().then((function(t){return t.match(/var ORG_UNIQUE_NAME = '([-a-zA-Z0-9]*)';/)[1]})));case 4:case"end":return t.stop()}}),t)}))));function p(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function m(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?p(Object(e),!0).forEach((function(n){a(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):p(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}var h,y=function(t){return function(e){return function(o){return function(){var c=r(n.mark((function r(c){var u;return n.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(u="",!f()){n.next=5;break}return n.next=4,l();case 4:u=n.sent;case 5:return n.abrupt("return",fetch("".concat(u?"/"+u:u).concat(i,"/").concat(o),{headers:m({},c),method:t,body:e&&JSON.stringify(e)}));case 6:case"end":return n.stop()}}),r)})));return function(t){return c.apply(this,arguments)}}()}}},d=y("GET")(),v=(h="then",function(){for(var t=arguments.length,n=new Array(t),e=0;e<t;e++)n[e]=arguments[e];return n.reduce((function(t,n){return function(e){return n(e)[h](t)}}))}),g=function(t){return t.json()},b=function(t){return d("RetrieveEntity(EntityFilters=Microsoft.Dynamics.CRM.EntityFilters'Attributes',LogicalName = '".concat(t,"',MetadataId=00000000-0000-0000-0000-000000000000,RetrieveAsIfPublished=false)"))({})},w=s((function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return v(g,b)(t,n)})),X=function(){var t=r(n.mark((function t(e,r){var o,i,c,u=arguments;return n.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return o=u.length>2&&void 0!==u[2]?u[2]:"",t.next=3,w(e);case 3:return i=t.sent,t.next=6,d("".concat(i.EntityMetadata.LogicalCollectionName,"(").concat(r,")").concat(o||""))();case 6:return c=t.sent,t.abrupt("return",c.json());case 8:case"end":return t.stop()}}),t)})));return function(n,e){return t.apply(this,arguments)}}(),x=y("POST"),S=function(){var t=r(n.mark((function t(e,r){var o,i,c;return n.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,w(e);case 2:return o=t.sent,t.next=5,x(r)("/".concat(o.EntityMetadata.LogicalCollectionName))({"content-type":"application/json",Prefer:"return=representation"});case 5:return i=t.sent,t.next=8,i.json();case 8:return c=t.sent,t.abrupt("return",Promise.resolve({entityType:e,id:c[o.EntityMetadata.PrimaryIdAttribute]}));case 10:case"end":return t.stop()}}),t)})));return function(n,e){return t.apply(this,arguments)}}(),E=y("PATCH"),P=function(){var t=r(n.mark((function t(e,r,o){var i;return n.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,w(e);case 2:return i=t.sent,t.next=5,E(o)("/".concat(i.EntityMetadata.LogicalCollectionName,"(").concat(r,")"))({"content-type":"application/json"});case 5:return t.abrupt("return",Promise.resolve({entityType:e,id:r}));case 6:case"end":return t.stop()}}),t)})));return function(n,e,r){return t.apply(this,arguments)}}(),C=y("DELETE")(),O=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return function(){var o=r(n.mark((function r(o){var i;return n.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return i=o.EntityMetadata,n.abrupt("return",d("".concat(i.LogicalCollectionName).concat(t||""))(e?{prefer:'odata.include-annotations="*",odata.maxpagesize='.concat(e)}:{}));case 2:case"end":return n.stop()}}),r)})));return function(t){return o.apply(this,arguments)}}()},L={createRecord:S,deleteRecord:function(){var t=r(n.mark((function t(e,r){var o;return n.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,w(e);case 2:return o=t.sent,t.next=5,C("/".concat(o.EntityMetadata.LogicalCollectionName,"(").concat(r,")"))();case 5:return t.sent,t.abrupt("return",Promise.resolve({entityType:e,id:r}));case 7:case"end":return t.stop()}}),t)})));return function(n,e){return t.apply(this,arguments)}}(),updateRecord:P,retrieveRecord:X,retrieveMultipleRecords:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return v(g,O(n,e),w)(t)},online:{execute:function(t){var n=t.getMetadata().operationName;return x(t)(n)({"content-type":"application/json"})}}},T=function(){var t=r(n.mark((function t(){var e;return n.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,l();case 2:return e=t.sent,t.abrupt("return",{uniqueName:e});case 4:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}(),k=s(r(n.mark((function t(){var e;return n.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,d("/WhoAmI")();case 2:return e=t.sent,t.abrupt("return",e.json());case 4:case"end":return t.stop()}}),t)})))),A=s(X),N=function(t,n){return function(e){return n(t(e))}},I=function(){for(var t=arguments.length,n=new Array(t),e=0;e<t;e++)n[e]=arguments[e];return n.reduce(N)},F=function(t){return function(n){return function(e){return e.replace(t,n)}}},R=I(F(/\{|\}/gi)("")),j=function(){var t=r(n.mark((function t(){var e,r;return n.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,k();case 2:return e=t.sent,t.next=5,A("systemuser",e.UserId,"?$expand=systemuserroles_association($select=name)&$select=systemuserid,fullname");case 5:return r=t.sent,t.abrupt("return",{userId:"{".concat(R(e.UserId),"}"),userName:r.fullname,securityRoles:r.systemuserroles_association.map((function(t){return t.roleid}))});case 7:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}(),D=function(){return c},G=I(F(/^\?/)("")),M=function(t){return function(n){return n.split(t)}},_=function(t){return I(G,M("&"),(n=M("="),function(t){return t.map(n)}),function(t,n){return function(e){return e.reduce(t,n)}}((function(t,n){return t[n[0]]=n[1],t}),{}))(location.search)[t]||"";var n},B=function(){var t=r(n.mark((function t(){var e;return n.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e=_("appid"),t.t1=e,!t.t1){t.next=6;break}return t.next=5,A("appmodule",e,"?$select=name");case 5:t.t1=t.sent;case 6:if(t.t0=t.t1.name,t.t0){t.next=9;break}t.t0="";case 9:return t.abrupt("return",t.t0);case 10:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}();return{ActionCollectionBase:function(){},AlertDialogStrings:function(){},ArrayEx:function(){},AttributeFormat:function(){},AttributeType:function(){},BeginSecureSessionResponseCode:function(){},BusinessProcessFlowInstanceState:function(){},BusinessProcessFlowInstanceStatus:function(){},BusinessRuleNotificationBase:function(){},ChartPaneMode:function(){},ClientName:function(){},ClientState:function(){},ClientStates:function(){},Collection:function(){},ComponentModel:function(){},ConfirmDialogStrings:function(){},Constants:function(){},ControlType:function(){},DataLoadEventArgs:function(){},DataLoadState:function(){},DateFormattingInfo:function(){},DelegateItterator:function(){},Description:function(){},Device:function(){},Diagnostics:function(){},Dialog:function(){},DialogOptions:function(){},Encoding:function(){},EntityFormOptions:function(){},EntityListPageInput:function(){},EntityMetadata:function(){},EntityRelationshipRoleType:function(){},EntityRelationshipType:function(){},ErrorDialogOptions:function(){},ErrorResponse:function(){},ExecutionContext:function(){},Flag:function(){},FormDataAttributePrivilege:function(){},FormDataAttributePrivileges:function(){},FormFactor:function(){},FormNotificationOptions:function(){},FormSaveAction:function(){},FormType:function(){},Gen:function(){},GridType:function(){},IBusinessRuleNotificationProvider:function(){},IsMockXrm:function(){return!0},IXrmCollectionItem:function(){},Interfaces:function(){},Internal:function(){},JavaScriptConsoleTraceListener:function(){},KBSearchResult:function(){},LocalizedLabel:function(){},LookupObject:function(){},LookupOptions:function(){},LookupStyle:function(){},MetricsStopwatch:function(){},Mobile:function(){},Navigation:function(){},NotificationLevel:function(){},NumberEx:function(){},Objects:function(){},Offline:function(){},OfflineErrorResponse:function(){},OpenFileMode:function(){},OpenFormSuccessResponse:function(){},OptionSetItem:function(){},OrganizationServiceProxyBridge:function(){},Page:function(){},PageBridge:function(){},PageContextBridge:function(){},PageEx:function(){},PageInput:function(){},PageType:function(){},Panel:function(){},ProcessActionSuccessResponse:function(){},ProcessResponse:function(){},ProcessState:function(){},ProcessStatus:function(){},RelationshipReference:function(){},RequiredLevel:function(){},SaveErrorResponse:function(){},SaveEventArgs:function(){},SaveMode:function(){},SaveOptions:function(){},SaveSuccessResponse:function(){},ScopedServiceDirectory:function(){},Sdk:function(){},Services:function(){},Soap:function(){},StepProgress:function(){},StepType:function(){},StringBuilderTraceListener:function(){},StringEx:function(){},SubmitMode:function(){},TabDisplayState:function(){},TabItem:function(){},TabSection:function(){},TaskFlowOptions:function(){},TaskIterrator:function(){},Tracing:function(){},UI:function(){},Utility:{closeProgressIndicator:function(){},getAllowedStatusTransitions:function(){},getEntityMetadata:w,getGlobalContext:function(){var t=r(n.mark((function t(){var e;return n.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Promise.all([T(),j()]);case 2:return e=t.sent,t.abrupt("return",{organizationSettings:e[0],userSettings:e[1],getClientUrl:D,isOnPremises:f,getCurrentAppName:B});case 4:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}(),getLearningPathAttributeName:function(){},getPageContext:function(){},getResourceString:function(){},invokeProcessAction:function(){},lookObjects:function(){},refreshParentGrid:function(){},showProgressIndicator:function(){}},WebApi:L,WindowOptions:function(){},XrmBusinessProcessFlow:function(){},XrmChart:function(){},XrmCollection:function(){},XrmCollectionBase:function(){},XrmCollectionDictionary:function(){},XrmControl:function(){},XrmControlACI:function(){},XrmControlAutoLookup:function(){},XrmControlBase:function(){},XrmControlButton:function(){},XrmControlDateTime:function(){},XrmControlEmailEngagementActionsControl:function(){},XrmControlEmailRecipientActivity:function(){},XrmControlFormSelector:function(){},XrmControlGrid:function(){},XrmControlIFrame:function(){},XrmControlLookup:function(){},XrmControlOptionSet:function(){},XrmControlQuickForm:function(){},XrmControlRoutedGrid:function(){},XrmControlSearchWidget:function(){},XrmControlSilverlight:function(){},XrmControlSubGrid:function(){},XrmControlText:function(){},XrmControlTimer:function(){},XrmControlWebResource:function(){},XrmControls:function(){},XrmDataControl:function(){},XrmDialog:function(){},XrmEncoding:function(){},XrmEntities:function(){},XrmEntity:function(){},XrmEntityAttribute:function(){},XrmEntityAttributeBoolean:function(){},XrmEntityAttributeDateTime:function(){},XrmEntityAttributeLookup:function(){},XrmEntityAttributeNumber:function(){},XrmEntityAttributeOptionSet:function(){},XrmEntityAttributeOptionSetBase:function(){},XrmEntityAttributeString:function(){},XrmEntityAttributes:function(){},XrmEntityRelationship:function(){},XrmFile:function(){},XrmForm:function(){},XrmFormData:function(){},XrmFormSelectorItem:function(){},XrmFormSelectorItems:function(){},XrmFormUI:function(){},XrmGlobalContext:function(){},XrmGridData:function(){},XrmGridFilter:function(){},XrmGridRow:function(){},XrmGridRows:function(){},XrmInternal:function(){},XrmNavigation:function(){},XrmNavigationItem:function(){},XrmNavigationItems:function(){},XrmNavigations:function(){},XrmOffline:function(){},XrmOpenFileOption:function(){},XrmOrganizationSettings:function(){},XrmPageContextClient:function(){},XrmPanel:function(){},XrmPerformance:function(){},XrmProcessControlData:function(){},XrmProcessControlUI:function(){},XrmProcessStage:function(){},XrmProcessStep:function(){},XrmQuickForms:function(){},XrmRelatedEntities:function(){},XrmSdkMessages:function(){},XrmServiceDirectory:function(){},XrmTab:function(){},XrmTabNavigator:function(){},XrmTabNavigatorGroup:function(){},XrmTabNavigators:function(){},XrmTabSection:function(){},XrmTabSections:function(){},XrmTabs:function(){},XrmTaskProcess:function(){},XrmTrace:function(){},XrmUserSettings:function(){},XrmUtility:function(){},XrmViewSelector:function(){},getName:function(){return"Xrm"}}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

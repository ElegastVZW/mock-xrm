var Xrm=function(){"use strict";var t="undefined"!=typeof globalThis&&globalThis||"undefined"!=typeof self&&self||void 0!==t&&t,n="URLSearchParams"in t,e="Symbol"in t&&"iterator"in Symbol,r="FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),o="FormData"in t,i="ArrayBuffer"in t;if(i)var c=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],u=ArrayBuffer.isView||function(t){return t&&c.indexOf(Object.prototype.toString.call(t))>-1};function a(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(t)||""===t)throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function s(t){return"string"!=typeof t&&(t=String(t)),t}function f(t){var n={next:function(){var n=t.shift();return{done:void 0===n,value:n}}};return e&&(n[Symbol.iterator]=function(){return n}),n}function l(t){this.map={},t instanceof l?t.forEach((function(t,n){this.append(n,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(n){this.append(n,t[n])}),this)}function p(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function h(t){return new Promise((function(n,e){t.onload=function(){n(t.result)},t.onerror=function(){e(t.error)}}))}function d(t){var n=new FileReader,e=h(n);return n.readAsArrayBuffer(t),e}function y(t){if(t.slice)return t.slice(0);var n=new Uint8Array(t.byteLength);return n.set(new Uint8Array(t)),n.buffer}function v(){return this.bodyUsed=!1,this._initBody=function(t){var e;this.bodyUsed=this.bodyUsed,this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:r&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:o&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:n&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():i&&r&&((e=t)&&DataView.prototype.isPrototypeOf(e))?(this._bodyArrayBuffer=y(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):i&&(ArrayBuffer.prototype.isPrototypeOf(t)||u(t))?this._bodyArrayBuffer=y(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):n&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},r&&(this.blob=function(){var t=p(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){if(this._bodyArrayBuffer){var t=p(this);return t||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer))}return this.blob().then(d)}),this.text=function(){var t,n,e,r=p(this);if(r)return r;if(this._bodyBlob)return t=this._bodyBlob,n=new FileReader,e=h(n),n.readAsText(t),e;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var n=new Uint8Array(t),e=new Array(n.length),r=0;r<n.length;r++)e[r]=String.fromCharCode(n[r]);return e.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},o&&(this.formData=function(){return this.text().then(b)}),this.json=function(){return this.text().then(JSON.parse)},this}l.prototype.append=function(t,n){t=a(t),n=s(n);var e=this.map[t];this.map[t]=e?e+", "+n:n},l.prototype.delete=function(t){delete this.map[a(t)]},l.prototype.get=function(t){return t=a(t),this.has(t)?this.map[t]:null},l.prototype.has=function(t){return this.map.hasOwnProperty(a(t))},l.prototype.set=function(t,n){this.map[a(t)]=s(n)},l.prototype.forEach=function(t,n){for(var e in this.map)this.map.hasOwnProperty(e)&&t.call(n,this.map[e],e,this)},l.prototype.keys=function(){var t=[];return this.forEach((function(n,e){t.push(e)})),f(t)},l.prototype.values=function(){var t=[];return this.forEach((function(n){t.push(n)})),f(t)},l.prototype.entries=function(){var t=[];return this.forEach((function(n,e){t.push([e,n])})),f(t)},e&&(l.prototype[Symbol.iterator]=l.prototype.entries);var m=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function g(t,n){if(!(this instanceof g))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');var e,r,o=(n=n||{}).body;if(t instanceof g){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,n.headers||(this.headers=new l(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,o||null==t._bodyInit||(o=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=n.credentials||this.credentials||"same-origin",!n.headers&&this.headers||(this.headers=new l(n.headers)),this.method=(e=n.method||this.method||"GET",r=e.toUpperCase(),m.indexOf(r)>-1?r:e),this.mode=n.mode||this.mode||null,this.signal=n.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(o),!("GET"!==this.method&&"HEAD"!==this.method||"no-store"!==n.cache&&"no-cache"!==n.cache)){var i=/([?&])_=[^&]*/;if(i.test(this.url))this.url=this.url.replace(i,"$1_="+(new Date).getTime());else{this.url+=(/\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}}function b(t){var n=new FormData;return t.trim().split("&").forEach((function(t){if(t){var e=t.split("="),r=e.shift().replace(/\+/g," "),o=e.join("=").replace(/\+/g," ");n.append(decodeURIComponent(r),decodeURIComponent(o))}})),n}function w(t,n){if(!(this instanceof w))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');n||(n={}),this.type="default",this.status=void 0===n.status?200:n.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in n?n.statusText:"",this.headers=new l(n.headers),this.url=n.url||"",this._initBody(t)}g.prototype.clone=function(){return new g(this,{body:this._bodyInit})},v.call(g.prototype),v.call(w.prototype),w.prototype.clone=function(){return new w(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new l(this.headers),url:this.url})},w.error=function(){var t=new w(null,{status:0,statusText:""});return t.type="error",t};var x=[301,302,303,307,308];w.redirect=function(t,n){if(-1===x.indexOf(n))throw new RangeError("Invalid status code");return new w(null,{status:n,headers:{location:t}})};var S=t.DOMException;try{new S}catch(t){(S=function(t,n){this.message=t,this.name=n;var e=Error(t);this.stack=e.stack}).prototype=Object.create(Error.prototype),S.prototype.constructor=S}function E(n,e){return new Promise((function(o,c){var u=new g(n,e);if(u.signal&&u.signal.aborted)return c(new S("Aborted","AbortError"));var a=new XMLHttpRequest;function f(){a.abort()}a.onload=function(){var t,n,e={status:a.status,statusText:a.statusText,headers:(t=a.getAllResponseHeaders()||"",n=new l,t.replace(/\r?\n[\t ]+/g," ").split("\r").map((function(t){return 0===t.indexOf("\n")?t.substr(1,t.length):t})).forEach((function(t){var e=t.split(":"),r=e.shift().trim();if(r){var o=e.join(":").trim();n.append(r,o)}})),n)};e.url="responseURL"in a?a.responseURL:e.headers.get("X-Request-URL");var r="response"in a?a.response:a.responseText;setTimeout((function(){o(new w(r,e))}),0)},a.onerror=function(){setTimeout((function(){c(new TypeError("Network request failed"))}),0)},a.ontimeout=function(){setTimeout((function(){c(new TypeError("Network request failed"))}),0)},a.onabort=function(){setTimeout((function(){c(new S("Aborted","AbortError"))}),0)},a.open(u.method,function(n){try{return""===n&&t.location.href?t.location.href:n}catch(t){return n}}(u.url),!0),"include"===u.credentials?a.withCredentials=!0:"omit"===u.credentials&&(a.withCredentials=!1),"responseType"in a&&(r?a.responseType="blob":i&&u.headers.get("Content-Type")&&-1!==u.headers.get("Content-Type").indexOf("application/octet-stream")&&(a.responseType="arraybuffer")),!e||"object"!=typeof e.headers||e.headers instanceof l?u.headers.forEach((function(t,n){a.setRequestHeader(n,t)})):Object.getOwnPropertyNames(e.headers).forEach((function(t){a.setRequestHeader(t,s(e.headers[t]))})),u.signal&&(u.signal.addEventListener("abort",f),a.onreadystatechange=function(){4===a.readyState&&u.signal.removeEventListener("abort",f)}),a.send(void 0===u._bodyInit?null:u._bodyInit)}))}function O(t,n){return t(n={exports:{}},n.exports),n.exports}E.polyfill=!0,t.fetch||(t.fetch=E,t.Headers=l,t.Request=g,t.Response=w);var _=O((function(t){var n=function(t){var n=Object.prototype,e=n.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",c=r.toStringTag||"@@toStringTag";function u(t,n,e){return Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}),t[n]}try{u({},"")}catch(t){u=function(t,n,e){return t[n]=e}}function a(t,n,e,r){var o=n&&n.prototype instanceof l?n:l,i=Object.create(o.prototype),c=new E(r||[]);return i._invoke=function(t,n,e){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return _()}for(e.method=o,e.arg=i;;){var c=e.delegate;if(c){var u=w(c,e);if(u){if(u===f)continue;return u}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if("suspendedStart"===r)throw r="completed",e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r="executing";var a=s(t,n,e);if("normal"===a.type){if(r=e.done?"completed":"suspendedYield",a.arg===f)continue;return{value:a.arg,done:e.done}}"throw"===a.type&&(r="completed",e.method="throw",e.arg=a.arg)}}}(t,e,c),i}function s(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}t.wrap=a;var f={};function l(){}function p(){}function h(){}var d={};d[o]=function(){return this};var y=Object.getPrototypeOf,v=y&&y(y(O([])));v&&v!==n&&e.call(v,o)&&(d=v);var m=h.prototype=l.prototype=Object.create(d);function g(t){["next","throw","return"].forEach((function(n){u(t,n,(function(t){return this._invoke(n,t)}))}))}function b(t,n){var r;this._invoke=function(o,i){function c(){return new n((function(r,c){!function r(o,i,c,u){var a=s(t[o],t,i);if("throw"!==a.type){var f=a.arg,l=f.value;return l&&"object"==typeof l&&e.call(l,"__await")?n.resolve(l.__await).then((function(t){r("next",t,c,u)}),(function(t){r("throw",t,c,u)})):n.resolve(l).then((function(t){f.value=t,c(f)}),(function(t){return r("throw",t,c,u)}))}u(a.arg)}(o,i,r,c)}))}return r=r?r.then(c,c):c()}}function w(t,n){var e=t.iterator[n.method];if(void 0===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=void 0,w(t,n),"throw"===n.method))return f;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return f}var r=s(e,t.iterator,n.arg);if("throw"===r.type)return n.method="throw",n.arg=r.arg,n.delegate=null,f;var o=r.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function x(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function S(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function E(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(x,this),this.reset(!0)}function O(t){if(t){var n=t[o];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function n(){for(;++r<t.length;)if(e.call(t,r))return n.value=t[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return i.next=i}}return{next:_}}function _(){return{value:void 0,done:!0}}return p.prototype=m.constructor=h,h.constructor=p,p.displayName=u(h,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===p||"GeneratorFunction"===(n.displayName||n.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,h):(t.__proto__=h,u(t,c,"GeneratorFunction")),t.prototype=Object.create(m),t},t.awrap=function(t){return{__await:t}},g(b.prototype),b.prototype[i]=function(){return this},t.AsyncIterator=b,t.async=function(n,e,r,o,i){void 0===i&&(i=Promise);var c=new b(a(n,e,r,o),i);return t.isGeneratorFunction(e)?c:c.next().then((function(t){return t.done?t.value:c.next()}))},g(m),u(m,c,"Generator"),m[o]=function(){return this},m.toString=function(){return"[object Generator]"},t.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=O,E.prototype={constructor:E,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(S),!t)for(var n in this)"t"===n.charAt(0)&&e.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function r(e,r){return c.type="throw",c.arg=t,n.next=e,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],c=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var u=e.call(i,"catchLoc"),a=e.call(i,"finallyLoc");if(u&&a){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!a)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(t,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&e.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var c=i?i.completion:{};return c.type=t,c.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(c)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),f},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),S(e),f}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var o=r.arg;S(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,e){return this.delegate={iterator:O(t),resultName:n,nextLoc:e},"next"===this.method&&(this.arg=void 0),f}},t}(t.exports);try{regeneratorRuntime=n}catch(t){Function("r","regeneratorRuntime = r")(n)}}));function P(t,n,e,r,o,i,c){try{var u=t[i](c),a=u.value}catch(t){return void e(t)}u.done?n(a):Promise.resolve(a).then(r,o)}var T=function(t){return function(){var n=this,e=arguments;return new Promise((function(r,o){var i=t.apply(n,e);function c(t){P(i,r,o,c,u,"next",t)}function u(t){P(i,r,o,c,u,"throw",t)}c(void 0)}))}},j=O((function(t){function n(e){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?t.exports=n=function(t){return typeof t}:t.exports=n=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(e)}t.exports=n})),A="".concat("object"===("undefined"==typeof process?"undefined":j(process))?"http://localhost:3000":"","/api/data/v9.0"),L="object"===("undefined"==typeof location?"undefined":j(location))&&location.origin,C=/[-a-zA-Z0-9]*?\.(crm[0-9]*?\.dynamics\.com|crm\.microsoftdynamics\.us)/,X=O((function(t){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)})),I=O((function(t){var n=t.exports={version:"2.6.12"};"number"==typeof __e&&(__e=n)})),R=(I.version,function(t){return"object"==typeof t?null!==t:"function"==typeof t}),k=function(t){if(!R(t))throw TypeError(t+" is not an object!");return t},F=function(t){try{return!!t()}catch(t){return!0}},N=!F((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})),D=X.document,M=R(D)&&R(D.createElement),B=function(t){return M?D.createElement(t):{}},U=!N&&!F((function(){return 7!=Object.defineProperty(B("div"),"a",{get:function(){return 7}}).a})),G=function(t,n){if(!R(t))return t;var e,r;if(n&&"function"==typeof(e=t.toString)&&!R(r=e.call(t)))return r;if("function"==typeof(e=t.valueOf)&&!R(r=e.call(t)))return r;if(!n&&"function"==typeof(e=t.toString)&&!R(r=e.call(t)))return r;throw TypeError("Can't convert object to primitive value")},z=Object.defineProperty,H={f:N?Object.defineProperty:function(t,n,e){if(k(t),n=G(n,!0),k(e),U)try{return z(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},$=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}},W=N?function(t,n,e){return H.f(t,n,$(1,e))}:function(t,n,e){return t[n]=e,t},q={}.hasOwnProperty,V=function(t,n){return q.call(t,n)},K=0,J=Math.random(),Y=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++K+J).toString(36))},Q=O((function(t){var n=X["__core-js_shared__"]||(X["__core-js_shared__"]={});(t.exports=function(t,e){return n[t]||(n[t]=void 0!==e?e:{})})("versions",[]).push({version:I.version,mode:"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})})),Z=Q("native-function-to-string",Function.toString),tt=O((function(t){var n=Y("src"),e=(""+Z).split("toString");I.inspectSource=function(t){return Z.call(t)},(t.exports=function(t,r,o,i){var c="function"==typeof o;c&&(V(o,"name")||W(o,"name",r)),t[r]!==o&&(c&&(V(o,n)||W(o,n,t[r]?""+t[r]:e.join(String(r)))),t===X?t[r]=o:i?t[r]?t[r]=o:W(t,r,o):(delete t[r],W(t,r,o)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[n]||Z.call(this)}))})),nt=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t},et=function(t,n,e){if(nt(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,o){return t.call(n,e,r,o)}}return function(){return t.apply(n,arguments)}},rt=function(t,n,e){var r,o,i,c,u=t&rt.F,a=t&rt.G,s=t&rt.S,f=t&rt.P,l=t&rt.B,p=a?X:s?X[n]||(X[n]={}):(X[n]||{}).prototype,h=a?I:I[n]||(I[n]={}),d=h.prototype||(h.prototype={});for(r in a&&(e=n),e)i=((o=!u&&p&&void 0!==p[r])?p:e)[r],c=l&&o?et(i,X):f&&"function"==typeof i?et(Function.call,i):i,p&&tt(p,r,i,t&rt.U),h[r]!=i&&W(h,r,c),f&&d[r]!=i&&(d[r]=i)};X.core=I,rt.F=1,rt.G=2,rt.S=4,rt.P=8,rt.B=16,rt.W=32,rt.U=64,rt.R=128;var ot,it=rt,ct={}.toString,ut=function(t){return ct.call(t).slice(8,-1)},at=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==ut(t)?t.split(""):Object(t)},st=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t},ft=function(t){return at(st(t))},lt=Math.ceil,pt=Math.floor,ht=function(t){return isNaN(t=+t)?0:(t>0?pt:lt)(t)},dt=Math.min,yt=function(t){return t>0?dt(ht(t),9007199254740991):0},vt=Math.max,mt=Math.min,gt=Q("keys"),bt=function(t){return gt[t]||(gt[t]=Y(t))},wt=(ot=!1,function(t,n,e){var r,o=ft(t),i=yt(o.length),c=function(t,n){return(t=ht(t))<0?vt(t+n,0):mt(t,n)}(e,i);if(ot&&n!=n){for(;i>c;)if((r=o[c++])!=r)return!0}else for(;i>c;c++)if((ot||c in o)&&o[c]===n)return ot||c||0;return!ot&&-1}),xt=bt("IE_PROTO"),St=function(t,n){var e,r=ft(t),o=0,i=[];for(e in r)e!=xt&&V(r,e)&&i.push(e);for(;n.length>o;)V(r,e=n[o++])&&(~wt(i,e)||i.push(e));return i},Et="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(","),Ot=Et.concat("length","prototype"),_t={f:Object.getOwnPropertyNames||function(t){return St(t,Ot)}},Pt={f:Object.getOwnPropertySymbols},Tt=X.Reflect,jt=Tt&&Tt.ownKeys||function(t){var n=_t.f(k(t)),e=Pt.f;return e?n.concat(e(t)):n},At={f:{}.propertyIsEnumerable},Lt=Object.getOwnPropertyDescriptor,Ct={f:N?Lt:function(t,n){if(t=ft(t),n=G(n,!0),U)try{return Lt(t,n)}catch(t){}if(V(t,n))return $(!At.f.call(t,n),t[n])}},Xt=function(t,n,e){n in t?H.f(t,n,$(0,e)):t[n]=e};it(it.S,"Object",{getOwnPropertyDescriptors:function(t){for(var n,e,r=ft(t),o=Ct.f,i=jt(r),c={},u=0;i.length>u;)void 0!==(e=o(r,n=i[u++]))&&Xt(c,n,e);return c}});var It=O((function(t){var n=Y("meta"),e=H.f,r=0,o=Object.isExtensible||function(){return!0},i=!F((function(){return o(Object.preventExtensions({}))})),c=function(t){e(t,n,{value:{i:"O"+ ++r,w:{}}})},u=t.exports={KEY:n,NEED:!1,fastKey:function(t,e){if(!R(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!V(t,n)){if(!o(t))return"F";if(!e)return"E";c(t)}return t[n].i},getWeak:function(t,e){if(!V(t,n)){if(!o(t))return!0;if(!e)return!1;c(t)}return t[n].w},onFreeze:function(t){return i&&u.NEED&&o(t)&&!V(t,n)&&c(t),t}}})),Rt=(It.KEY,It.NEED,It.fastKey,It.getWeak,It.onFreeze,O((function(t){var n=Q("wks"),e=X.Symbol,r="function"==typeof e;(t.exports=function(t){return n[t]||(n[t]=r&&e[t]||(r?e:Y)("Symbol."+t))}).store=n}))),kt=H.f,Ft=Rt("toStringTag"),Nt=function(t,n,e){t&&!V(t=e?t:t.prototype,Ft)&&kt(t,Ft,{configurable:!0,value:n})},Dt={f:Rt},Mt=H.f,Bt=function(t){var n=I.Symbol||(I.Symbol=X.Symbol||{});"_"==t.charAt(0)||t in n||Mt(n,t,{value:Dt.f(t)})},Ut=Object.keys||function(t){return St(t,Et)},Gt=Array.isArray||function(t){return"Array"==ut(t)},zt=function(t){return Object(st(t))},Ht=N?Object.defineProperties:function(t,n){k(t);for(var e,r=Ut(n),o=r.length,i=0;o>i;)H.f(t,e=r[i++],n[e]);return t},$t=X.document,Wt=$t&&$t.documentElement,qt=bt("IE_PROTO"),Vt=function(){},Kt=function(){var t,n=B("iframe"),e=Et.length;for(n.style.display="none",Wt.appendChild(n),n.src="javascript:",(t=n.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),Kt=t.F;e--;)delete Kt.prototype[Et[e]];return Kt()},Jt=Object.create||function(t,n){var e;return null!==t?(Vt.prototype=k(t),e=new Vt,Vt.prototype=null,e[qt]=t):e=Kt(),void 0===n?e:Ht(e,n)},Yt=_t.f,Qt={}.toString,Zt="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],tn={f:function(t){return Zt&&"[object Window]"==Qt.call(t)?function(t){try{return Yt(t)}catch(t){return Zt.slice()}}(t):Yt(ft(t))}},nn=It.KEY,en=Ct.f,rn=H.f,on=tn.f,cn=X.Symbol,un=X.JSON,an=un&&un.stringify,sn=Rt("_hidden"),fn=Rt("toPrimitive"),ln={}.propertyIsEnumerable,pn=Q("symbol-registry"),hn=Q("symbols"),dn=Q("op-symbols"),yn=Object.prototype,vn="function"==typeof cn&&!!Pt.f,mn=X.QObject,gn=!mn||!mn.prototype||!mn.prototype.findChild,bn=N&&F((function(){return 7!=Jt(rn({},"a",{get:function(){return rn(this,"a",{value:7}).a}})).a}))?function(t,n,e){var r=en(yn,n);r&&delete yn[n],rn(t,n,e),r&&t!==yn&&rn(yn,n,r)}:rn,wn=function(t){var n=hn[t]=Jt(cn.prototype);return n._k=t,n},xn=vn&&"symbol"==typeof cn.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof cn},Sn=function(t,n,e){return t===yn&&Sn(dn,n,e),k(t),n=G(n,!0),k(e),V(hn,n)?(e.enumerable?(V(t,sn)&&t[sn][n]&&(t[sn][n]=!1),e=Jt(e,{enumerable:$(0,!1)})):(V(t,sn)||rn(t,sn,$(1,{})),t[sn][n]=!0),bn(t,n,e)):rn(t,n,e)},En=function(t,n){k(t);for(var e,r=function(t){var n=Ut(t),e=Pt.f;if(e)for(var r,o=e(t),i=At.f,c=0;o.length>c;)i.call(t,r=o[c++])&&n.push(r);return n}(n=ft(n)),o=0,i=r.length;i>o;)Sn(t,e=r[o++],n[e]);return t},On=function(t){var n=ln.call(this,t=G(t,!0));return!(this===yn&&V(hn,t)&&!V(dn,t))&&(!(n||!V(this,t)||!V(hn,t)||V(this,sn)&&this[sn][t])||n)},_n=function(t,n){if(t=ft(t),n=G(n,!0),t!==yn||!V(hn,n)||V(dn,n)){var e=en(t,n);return!e||!V(hn,n)||V(t,sn)&&t[sn][n]||(e.enumerable=!0),e}},Pn=function(t){for(var n,e=on(ft(t)),r=[],o=0;e.length>o;)V(hn,n=e[o++])||n==sn||n==nn||r.push(n);return r},Tn=function(t){for(var n,e=t===yn,r=on(e?dn:ft(t)),o=[],i=0;r.length>i;)!V(hn,n=r[i++])||e&&!V(yn,n)||o.push(hn[n]);return o};vn||(tt((cn=function(){if(this instanceof cn)throw TypeError("Symbol is not a constructor!");var t=Y(arguments.length>0?arguments[0]:void 0),n=function(e){this===yn&&n.call(dn,e),V(this,sn)&&V(this[sn],t)&&(this[sn][t]=!1),bn(this,t,$(1,e))};return N&&gn&&bn(yn,t,{configurable:!0,set:n}),wn(t)}).prototype,"toString",(function(){return this._k})),Ct.f=_n,H.f=Sn,_t.f=tn.f=Pn,At.f=On,Pt.f=Tn,N&&tt(yn,"propertyIsEnumerable",On,!0),Dt.f=function(t){return wn(Rt(t))}),it(it.G+it.W+it.F*!vn,{Symbol:cn});for(var jn="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),An=0;jn.length>An;)Rt(jn[An++]);for(var Ln=Ut(Rt.store),Cn=0;Ln.length>Cn;)Bt(Ln[Cn++]);it(it.S+it.F*!vn,"Symbol",{for:function(t){return V(pn,t+="")?pn[t]:pn[t]=cn(t)},keyFor:function(t){if(!xn(t))throw TypeError(t+" is not a symbol!");for(var n in pn)if(pn[n]===t)return n},useSetter:function(){gn=!0},useSimple:function(){gn=!1}}),it(it.S+it.F*!vn,"Object",{create:function(t,n){return void 0===n?Jt(t):En(Jt(t),n)},defineProperty:Sn,defineProperties:En,getOwnPropertyDescriptor:_n,getOwnPropertyNames:Pn,getOwnPropertySymbols:Tn});var Xn=F((function(){Pt.f(1)}));it(it.S+it.F*Xn,"Object",{getOwnPropertySymbols:function(t){return Pt.f(zt(t))}}),un&&it(it.S+it.F*(!vn||F((function(){var t=cn();return"[null]"!=an([t])||"{}"!=an({a:t})||"{}"!=an(Object(t))}))),"JSON",{stringify:function(t){for(var n,e,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);if(e=n=r[1],(R(n)||void 0!==t)&&!xn(t))return Gt(n)||(n=function(t,n){if("function"==typeof e&&(n=e.call(this,t,n)),!xn(n))return n}),r[1]=n,an.apply(un,r)}}),cn.prototype[fn]||W(cn.prototype,fn,cn.prototype.valueOf),Nt(cn,"Symbol"),Nt(Math,"Math",!0),Nt(X.JSON,"JSON",!0);var In=Rt("unscopables"),Rn=Array.prototype;null==Rn[In]&&W(Rn,In,{});var kn=function(t){Rn[In][t]=!0},Fn=function(t,n){return{value:n,done:!!t}},Nn={},Dn={};W(Dn,Rt("iterator"),(function(){return this}));var Mn=function(t,n,e){t.prototype=Jt(Dn,{next:$(1,e)}),Nt(t,n+" Iterator")},Bn=bt("IE_PROTO"),Un=Object.prototype,Gn=Object.getPrototypeOf||function(t){return t=zt(t),V(t,Bn)?t[Bn]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?Un:null},zn=Rt("iterator"),Hn=!([].keys&&"next"in[].keys()),$n=function(){return this},Wn=function(t,n,e,r,o,i,c){Mn(e,n,r);var u,a,s,f=function(t){if(!Hn&&t in d)return d[t];switch(t){case"keys":case"values":return function(){return new e(this,t)}}return function(){return new e(this,t)}},l=n+" Iterator",p="values"==o,h=!1,d=t.prototype,y=d[zn]||d["@@iterator"]||o&&d[o],v=y||f(o),m=o?p?f("entries"):v:void 0,g="Array"==n&&d.entries||y;if(g&&(s=Gn(g.call(new t)))!==Object.prototype&&s.next&&(Nt(s,l,!0),"function"!=typeof s[zn]&&W(s,zn,$n)),p&&y&&"values"!==y.name&&(h=!0,v=function(){return y.call(this)}),(Hn||h||!d[zn])&&W(d,zn,v),Nn[n]=v,Nn[l]=$n,o)if(u={values:p?v:f("values"),keys:i?v:f("keys"),entries:m},c)for(a in u)a in d||tt(d,a,u[a]);else it(it.P+it.F*(Hn||h),n,u);return u},qn=Wn(Array,"Array",(function(t,n){this._t=ft(t),this._i=0,this._k=n}),(function(){var t=this._t,n=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,Fn(1)):Fn(0,"keys"==n?e:"values"==n?t[e]:[e,t[e]])}),"values");Nn.Arguments=Nn.Array,kn("keys"),kn("values"),kn("entries");for(var Vn=Rt("iterator"),Kn=Rt("toStringTag"),Jn=Nn.Array,Yn={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},Qn=Ut(Yn),Zn=0;Zn<Qn.length;Zn++){var te,ne=Qn[Zn],ee=Yn[ne],re=X[ne],oe=re&&re.prototype;if(oe&&(oe[Vn]||W(oe,Vn,Jn),oe[Kn]||W(oe,Kn,ne),Nn[ne]=Jn,ee))for(te in qn)oe[te]||tt(oe,te,qn[te],!0)}var ie=Rt("toStringTag"),ce="Arguments"==ut(function(){return arguments}()),ue=function(t){var n,e,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),ie))?e:ce?ut(n):"Object"==(r=ut(n))&&"function"==typeof n.callee?"Arguments":r},ae={};ae[Rt("toStringTag")]="z",ae+""!="[object z]"&&tt(Object.prototype,"toString",(function(){return"[object "+ue(this)+"]"}),!0);var se,fe,le,pe;se="keys",fe=function(){return function(t){return Ut(zt(t))}},le=(I.Object||{})[se]||Object[se],(pe={})[se]=fe(le),it(it.S+it.F*F((function(){le(1)})),"Object",pe);var he,de,ye=function(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t},ve=function(){return!C.test(location.href)},me=function(t){return function(n,e){var r,o,i=String(st(n)),c=ht(e),u=i.length;return c<0||c>=u?t?"":void 0:(r=i.charCodeAt(c))<55296||r>56319||c+1===u||(o=i.charCodeAt(c+1))<56320||o>57343?t?i.charAt(c):r:t?i.slice(c,c+2):o-56320+(r-55296<<10)+65536}},ge=me(!0),be=function(t,n,e){return n+(e?ge(t,n).length:1)},we=RegExp.prototype.exec,xe=function(t,n){var e=t.exec;if("function"==typeof e){var r=e.call(t,n);if("object"!=typeof r)throw new TypeError("RegExp exec method returned something other than an Object or null");return r}if("RegExp"!==ue(t))throw new TypeError("RegExp#exec called on incompatible receiver");return we.call(t,n)},Se=function(){var t=k(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n},Ee=RegExp.prototype.exec,Oe=String.prototype.replace,_e=Ee,Pe=(he=/a/,de=/b*/g,Ee.call(he,"a"),Ee.call(de,"a"),0!==he.lastIndex||0!==de.lastIndex),Te=void 0!==/()??/.exec("")[1];(Pe||Te)&&(_e=function(t){var n,e,r,o,i=this;return Te&&(e=new RegExp("^"+i.source+"$(?!\\s)",Se.call(i))),Pe&&(n=i.lastIndex),r=Ee.call(i,t),Pe&&r&&(i.lastIndex=i.global?r.index+r[0].length:n),Te&&r&&r.length>1&&Oe.call(r[0],e,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)})),r});var je=_e;it({target:"RegExp",proto:!0,forced:je!==/./.exec},{exec:je});var Ae=Rt("species"),Le=!F((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),Ce=function(){var t=/(?:)/,n=t.exec;t.exec=function(){return n.apply(this,arguments)};var e="ab".split(t);return 2===e.length&&"a"===e[0]&&"b"===e[1]}(),Xe=function(t,n,e){var r=Rt(t),o=!F((function(){var n={};return n[r]=function(){return 7},7!=""[t](n)})),i=o?!F((function(){var n=!1,e=/a/;return e.exec=function(){return n=!0,null},"split"===t&&(e.constructor={},e.constructor[Ae]=function(){return e}),e[r](""),!n})):void 0;if(!o||!i||"replace"===t&&!Le||"split"===t&&!Ce){var c=/./[r],u=e(st,r,""[t],(function(t,n,e,r,i){return n.exec===je?o&&!i?{done:!0,value:c.call(n,e,r)}:{done:!0,value:t.call(e,n,r)}:{done:!1}})),a=u[0],s=u[1];tt(String.prototype,t,a),W(RegExp.prototype,r,2==n?function(t,n){return s.call(t,this,n)}:function(t){return s.call(t,this)})}};Xe("match",1,(function(t,n,e,r){return[function(e){var r=t(this),o=null==e?void 0:e[n];return void 0!==o?o.call(e,r):new RegExp(e)[n](String(r))},function(t){var n=r(e,t,this);if(n.done)return n.value;var o=k(t),i=String(this);if(!o.global)return xe(o,i);var c=o.unicode;o.lastIndex=0;for(var u,a=[],s=0;null!==(u=xe(o,i));){var f=String(u[0]);a[s]=f,""===f&&(o.lastIndex=be(i,yt(o.lastIndex),c)),s++}return 0===s?null:a}]}));var Ie=function(t){var n={};return T(_.mark((function e(){var r,o=arguments;return _.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=JSON.stringify(o),n[r]=n[r]||t.apply(this,o),e.abrupt("return",n[r]);case 3:case"end":return e.stop()}}),e,this)})))},Re=Ie(T(_.mark((function t(){var n;return _.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch("/tools/systemcustomization/systemCustomization.aspx?pid=05&web=true");case 2:return n=t.sent,t.abrupt("return",n.text().then((function(t){return t.match(/var ORG_UNIQUE_NAME = '([-a-zA-Z0-9]*)';/)[1]})));case 4:case"end":return t.stop()}}),t)}))));function ke(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function Fe(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?ke(Object(e),!0).forEach((function(n){ye(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):ke(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}var Ne,De,Me,Be,Ue=function(t){return function(n){return function(e){return function(){var r=T(_.mark((function r(o){var i;return _.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:if(i="",!ve()){r.next=5;break}return r.next=4,Re();case 4:i=r.sent;case 5:return r.abrupt("return",fetch("".concat(i?"/"+i:i).concat(A,"/").concat(e),{headers:Fe({},o),method:t,body:n&&JSON.stringify(n)}));case 6:case"end":return r.stop()}}),r)})));return function(t){return r.apply(this,arguments)}}()}}},Ge=Ue("GET")(),ze=(Ne="then",function(){for(var t=arguments.length,n=new Array(t),e=0;e<t;e++)n[e]=arguments[e];return n.reduce((function(t,n){return function(e){return n(e)[Ne](t)}}))}),He=function(t){return t.json()},$e=function(t){return Ge("RetrieveEntity(EntityFilters=Microsoft.Dynamics.CRM.EntityFilters'Attributes',LogicalName = '".concat(t,"',MetadataId=00000000-0000-0000-0000-000000000000,RetrieveAsIfPublished=false)"))({})},We=Ie((function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return ze(He,$e)(t,n)})),qe=function(){var t=T(_.mark((function t(n,e){var r,o,i,c,u=arguments;return _.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=u.length>2&&void 0!==u[2]?u[2]:"",t.next=3,We(n);case 3:return o=t.sent,i=o.EntityMetadata.LogicalCollectionName?o.EntityMetadata.LogicalName+"s":o.EntityMetadata.LogicalCollectionName,t.next=7,Ge("".concat(i,"(").concat(e,")").concat(r||""))();case 7:return c=t.sent,t.abrupt("return",c.json());case 9:case"end":return t.stop()}}),t)})));return function(n,e){return t.apply(this,arguments)}}(),Ve=function(t,n,e,r){try{return r?n(k(e)[0],e[1]):n(e)}catch(n){var o=t.return;throw void 0!==o&&k(o.call(t)),n}},Ke=Rt("iterator"),Je=Array.prototype,Ye=Rt("iterator"),Qe=I.getIteratorMethod=function(t){if(null!=t)return t[Ye]||t["@@iterator"]||Nn[ue(t)]},Ze=O((function(t){var n={},e={},r=t.exports=function(t,r,o,i,c){var u,a,s,f,l,p=c?function(){return t}:Qe(t),h=et(o,i,r?2:1),d=0;if("function"!=typeof p)throw TypeError(t+" is not iterable!");if(void 0===(l=p)||Nn.Array!==l&&Je[Ke]!==l){for(s=p.call(t);!(a=s.next()).done;)if((f=Ve(s,h,a.value,r))===n||f===e)return f}else for(u=yt(t.length);u>d;d++)if((f=r?h(k(a=t[d])[0],a[1]):h(t[d]))===n||f===e)return f};r.BREAK=n,r.RETURN=e})),tr=Rt("species"),nr=function(t,n){var e,r=k(t).constructor;return void 0===r||null==(e=k(r)[tr])?n:nt(e)},er=function(t,n,e){var r=void 0===e;switch(n.length){case 0:return r?t():t.call(e);case 1:return r?t(n[0]):t.call(e,n[0]);case 2:return r?t(n[0],n[1]):t.call(e,n[0],n[1]);case 3:return r?t(n[0],n[1],n[2]):t.call(e,n[0],n[1],n[2]);case 4:return r?t(n[0],n[1],n[2],n[3]):t.call(e,n[0],n[1],n[2],n[3])}return t.apply(e,n)},rr=X.process,or=X.setImmediate,ir=X.clearImmediate,cr=X.MessageChannel,ur=X.Dispatch,ar=0,sr={},fr=function(){var t=+this;if(sr.hasOwnProperty(t)){var n=sr[t];delete sr[t],n()}},lr=function(t){fr.call(t.data)};or&&ir||(or=function(t){for(var n=[],e=1;arguments.length>e;)n.push(arguments[e++]);return sr[++ar]=function(){er("function"==typeof t?t:Function(t),n)},De(ar),ar},ir=function(t){delete sr[t]},"process"==ut(rr)?De=function(t){rr.nextTick(et(fr,t,1))}:ur&&ur.now?De=function(t){ur.now(et(fr,t,1))}:cr?(Be=(Me=new cr).port2,Me.port1.onmessage=lr,De=et(Be.postMessage,Be,1)):X.addEventListener&&"function"==typeof postMessage&&!X.importScripts?(De=function(t){X.postMessage(t+"","*")},X.addEventListener("message",lr,!1)):De="onreadystatechange"in B("script")?function(t){Wt.appendChild(B("script")).onreadystatechange=function(){Wt.removeChild(this),fr.call(t)}}:function(t){setTimeout(et(fr,t,1),0)});var pr={set:or,clear:ir},hr=pr.set,dr=X.MutationObserver||X.WebKitMutationObserver,yr=X.process,vr=X.Promise,mr="process"==ut(yr);function gr(t){var n,e;this.promise=new t((function(t,r){if(void 0!==n||void 0!==e)throw TypeError("Bad Promise constructor");n=t,e=r})),this.resolve=nt(n),this.reject=nt(e)}var br={f:function(t){return new gr(t)}},wr=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}},xr=X.navigator,Sr=xr&&xr.userAgent||"",Er=Rt("species"),Or=Rt("iterator"),_r=!1;try{var Pr=[7][Or]();Pr.return=function(){_r=!0},Array.from(Pr,(function(){throw 2}))}catch(t){}var Tr,jr,Ar,Lr,Cr=pr.set,Xr=function(){var t,n,e,r=function(){var r,o;for(mr&&(r=yr.domain)&&r.exit();t;){o=t.fn,t=t.next;try{o()}catch(r){throw t?e():n=void 0,r}}n=void 0,r&&r.enter()};if(mr)e=function(){yr.nextTick(r)};else if(!dr||X.navigator&&X.navigator.standalone)if(vr&&vr.resolve){var o=vr.resolve(void 0);e=function(){o.then(r)}}else e=function(){hr.call(X,r)};else{var i=!0,c=document.createTextNode("");new dr(r).observe(c,{characterData:!0}),e=function(){c.data=i=!i}}return function(r){var o={fn:r,next:void 0};n&&(n.next=o),t||(t=o,e()),n=o}}(),Ir=X.TypeError,Rr=X.process,kr=Rr&&Rr.versions,Fr=kr&&kr.v8||"",Nr=X.Promise,Dr="process"==ue(Rr),Mr=function(){},Br=jr=br.f,Ur=!!function(){try{var t=Nr.resolve(1),n=(t.constructor={})[Rt("species")]=function(t){t(Mr,Mr)};return(Dr||"function"==typeof PromiseRejectionEvent)&&t.then(Mr)instanceof n&&0!==Fr.indexOf("6.6")&&-1===Sr.indexOf("Chrome/66")}catch(t){}}(),Gr=function(t){var n;return!(!R(t)||"function"!=typeof(n=t.then))&&n},zr=function(t,n){if(!t._n){t._n=!0;var e=t._c;Xr((function(){for(var r=t._v,o=1==t._s,i=0,c=function(n){var e,i,c,u=o?n.ok:n.fail,a=n.resolve,s=n.reject,f=n.domain;try{u?(o||(2==t._h&&Wr(t),t._h=1),!0===u?e=r:(f&&f.enter(),e=u(r),f&&(f.exit(),c=!0)),e===n.promise?s(Ir("Promise-chain cycle")):(i=Gr(e))?i.call(e,a,s):a(e)):s(r)}catch(t){f&&!c&&f.exit(),s(t)}};e.length>i;)c(e[i++]);t._c=[],t._n=!1,n&&!t._h&&Hr(t)}))}},Hr=function(t){Cr.call(X,(function(){var n,e,r,o=t._v,i=$r(t);if(i&&(n=wr((function(){Dr?Rr.emit("unhandledRejection",o,t):(e=X.onunhandledrejection)?e({promise:t,reason:o}):(r=X.console)&&r.error})),t._h=Dr||$r(t)?2:1),t._a=void 0,i&&n.e)throw n.v}))},$r=function(t){return 1!==t._h&&0===(t._a||t._c).length},Wr=function(t){Cr.call(X,(function(){var n;Dr?Rr.emit("rejectionHandled",t):(n=X.onrejectionhandled)&&n({promise:t,reason:t._v})}))},qr=function(t){var n=this;n._d||(n._d=!0,(n=n._w||n)._v=t,n._s=2,n._a||(n._a=n._c.slice()),zr(n,!0))},Vr=function(t){var n,e=this;if(!e._d){e._d=!0,e=e._w||e;try{if(e===t)throw Ir("Promise can't be resolved itself");(n=Gr(t))?Xr((function(){var r={_w:e,_d:!1};try{n.call(t,et(Vr,r,1),et(qr,r,1))}catch(t){qr.call(r,t)}})):(e._v=t,e._s=1,zr(e,!1))}catch(t){qr.call({_w:e,_d:!1},t)}}};Ur||(Nr=function(t){!function(t,n,e,r){if(!(t instanceof n)||void 0!==r&&r in t)throw TypeError(e+": incorrect invocation!")}(this,Nr,"Promise","_h"),nt(t),Tr.call(this);try{t(et(Vr,this,1),et(qr,this,1))}catch(t){qr.call(this,t)}},(Tr=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=function(t,n,e){for(var r in n)tt(t,r,n[r],e);return t}(Nr.prototype,{then:function(t,n){var e=Br(nr(this,Nr));return e.ok="function"!=typeof t||t,e.fail="function"==typeof n&&n,e.domain=Dr?Rr.domain:void 0,this._c.push(e),this._a&&this._a.push(e),this._s&&zr(this,!1),e.promise},catch:function(t){return this.then(void 0,t)}}),Ar=function(){var t=new Tr;this.promise=t,this.resolve=et(Vr,t,1),this.reject=et(qr,t,1)},br.f=Br=function(t){return t===Nr||t===Lr?new Ar(t):jr(t)}),it(it.G+it.W+it.F*!Ur,{Promise:Nr}),Nt(Nr,"Promise"),function(t){var n=X[t];N&&n&&!n[Er]&&H.f(n,Er,{configurable:!0,get:function(){return this}})}("Promise"),Lr=I.Promise,it(it.S+it.F*!Ur,"Promise",{reject:function(t){var n=Br(this);return(0,n.reject)(t),n.promise}}),it(it.S+it.F*!Ur,"Promise",{resolve:function(t){return function(t,n){if(k(t),R(n)&&n.constructor===t)return n;var e=br.f(t);return(0,e.resolve)(n),e.promise}(this,t)}}),it(it.S+it.F*!(Ur&&function(t,n){if(!n&&!_r)return!1;var e=!1;try{var r=[7],o=r[Or]();o.next=function(){return{done:e=!0}},r[Or]=function(){return o},t(r)}catch(t){}return e}((function(t){Nr.all(t).catch(Mr)}))),"Promise",{all:function(t){var n=this,e=Br(n),r=e.resolve,o=e.reject,i=wr((function(){var e=[],i=0,c=1;Ze(t,!1,(function(t){var u=i++,a=!1;e.push(void 0),c++,n.resolve(t).then((function(t){a||(a=!0,e[u]=t,--c||r(e))}),o)})),--c||r(e)}));return i.e&&o(i.v),e.promise},race:function(t){var n=this,e=Br(n),r=e.reject,o=wr((function(){Ze(t,!1,(function(t){n.resolve(t).then(e.resolve,r)}))}));return o.e&&r(o.v),e.promise}});var Kr=Ue("POST"),Jr=function(){var t=T(_.mark((function t(n,e){var r,o,i;return _.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,We(n);case 2:return r=t.sent,t.next=5,Kr(e)("/".concat(r.EntityMetadata.LogicalCollectionName))({"content-type":"application/json",Prefer:"return=representation"});case 5:return o=t.sent,t.next=8,o.json();case 8:return i=t.sent,t.abrupt("return",Promise.resolve({entityType:n,id:i[r.EntityMetadata.PrimaryIdAttribute]}));case 10:case"end":return t.stop()}}),t)})));return function(n,e){return t.apply(this,arguments)}}(),Yr=Ue("PATCH"),Qr=function(){var t=T(_.mark((function t(n,e,r){var o;return _.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,We(n);case 2:return o=t.sent,t.next=5,Yr(r)("/".concat(o.EntityMetadata.LogicalCollectionName,"(").concat(e,")"))({"content-type":"application/json"});case 5:return t.abrupt("return",Promise.resolve({entityType:n,id:e}));case 6:case"end":return t.stop()}}),t)})));return function(n,e,r){return t.apply(this,arguments)}}(),Zr=Ue("DELETE")(),to=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return function(){var e=T(_.mark((function e(r){var o;return _.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o=r.EntityMetadata,e.abrupt("return",Ge("".concat(o.LogicalCollectionName).concat(t||""))(n?{prefer:'odata.include-annotations="*",odata.maxpagesize='.concat(n)}:{}));case 2:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()},no={createRecord:Jr,deleteRecord:function(){var t=T(_.mark((function t(n,e){var r;return _.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,We(n);case 2:return r=t.sent,t.next=5,Zr("/".concat(r.EntityMetadata.LogicalCollectionName,"(").concat(e,")"))();case 5:return t.sent,t.abrupt("return",Promise.resolve({entityType:n,id:e}));case 7:case"end":return t.stop()}}),t)})));return function(n,e){return t.apply(this,arguments)}}(),updateRecord:Qr,retrieveRecord:qe,retrieveMultipleRecords:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return ze(He,to(n,e),We)(t)},online:{execute:function(t){var n=t.getMetadata().operationName;return Kr(t)(n)({"content-type":"application/json"})}}},eo=me(!0);Wn(String,"String",(function(t){this._t=String(t),this._i=0}),(function(){var t,n=this._t,e=this._i;return e>=n.length?{value:void 0,done:!0}:(t=eo(n,e),this._i+=t.length,{value:t,done:!1})}));var ro=function(){var t=T(_.mark((function t(){var n;return _.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Re();case 2:return n=t.sent,t.abrupt("return",{uniqueName:n});case 4:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}(),oo=Ie(T(_.mark((function t(){var n;return _.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Ge("/WhoAmI")();case 2:return n=t.sent,t.abrupt("return",n.json());case 4:case"end":return t.stop()}}),t)})))),io=Ie(qe),co=function(t,n){return function(e){return n(t(e))}},uo=function(){for(var t=arguments.length,n=new Array(t),e=0;e<t;e++)n[e]=arguments[e];return n.reduce(co)},ao=Math.max,so=Math.min,fo=Math.floor,lo=/\$([$&`']|\d\d?|<[^>]*>)/g,po=/\$([$&`']|\d\d?)/g;Xe("replace",2,(function(t,n,e,r){return[function(r,o){var i=t(this),c=null==r?void 0:r[n];return void 0!==c?c.call(r,i,o):e.call(String(i),r,o)},function(t,n){var i=r(e,t,this,n);if(i.done)return i.value;var c=k(t),u=String(this),a="function"==typeof n;a||(n=String(n));var s=c.global;if(s){var f=c.unicode;c.lastIndex=0}for(var l=[];;){var p=xe(c,u);if(null===p)break;if(l.push(p),!s)break;""===String(p[0])&&(c.lastIndex=be(u,yt(c.lastIndex),f))}for(var h,d="",y=0,v=0;v<l.length;v++){p=l[v];for(var m=String(p[0]),g=ao(so(ht(p.index),u.length),0),b=[],w=1;w<p.length;w++)b.push(void 0===(h=p[w])?h:String(h));var x=p.groups;if(a){var S=[m].concat(b,g,u);void 0!==x&&S.push(x);var E=String(n.apply(void 0,S))}else E=o(m,u,g,b,x,n);g>=y&&(d+=u.slice(y,g)+E,y=g+m.length)}return d+u.slice(y)}];function o(t,n,r,o,i,c){var u=r+t.length,a=o.length,s=po;return void 0!==i&&(i=zt(i),s=lo),e.call(c,s,(function(e,c){var s;switch(c.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,r);case"'":return n.slice(u);case"<":s=i[c.slice(1,-1)];break;default:var f=+c;if(0===f)return e;if(f>a){var l=fo(f/10);return 0===l?e:l<=a?void 0===o[l-1]?c.charAt(1):o[l-1]+c.charAt(1):e}s=o[f-1]}return void 0===s?"":s}))}}));var ho=function(t){return function(n){return function(e){return e.replace(t,n)}}},yo=uo(ho(/\{|\}/gi)("")),vo=function(){var t=T(_.mark((function t(){var n,e;return _.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,oo();case 2:return n=t.sent,t.next=5,io("systemuser",n.UserId,"?$expand=systemuserroles_association($select=name)&$select=systemuserid,fullname");case 5:return e=t.sent,t.abrupt("return",{userId:"{".concat(yo(n.UserId),"}"),userName:e.fullname,securityRoles:e.systemuserroles_association.map((function(t){return t.roleid}))});case 7:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}(),mo=function(){return L},go=H.f,bo=Function.prototype,wo=/^\s*function ([^ (]*)/;"name"in bo||N&&go(bo,"name",{configurable:!0,get:function(){try{return(""+this).match(wo)[1]}catch(t){return""}}});var xo=Object.is||function(t,n){return t===n?0!==t||1/t==1/n:t!=t&&n!=n};Xe("search",1,(function(t,n,e,r){return[function(e){var r=t(this),o=null==e?void 0:e[n];return void 0!==o?o.call(e,r):new RegExp(e)[n](String(r))},function(t){var n=r(e,t,this);if(n.done)return n.value;var o=k(t),i=String(this),c=o.lastIndex;xo(c,0)||(o.lastIndex=0);var u=xe(o,i);return xo(o.lastIndex,c)||(o.lastIndex=c),null===u?-1:u.index}]}));var So=uo(ho(/^\?/)("")),Eo=Rt("match"),Oo=Math.min,_o=[].push,Po="length",To=!F((function(){RegExp(4294967295,"y")}));Xe("split",2,(function(t,n,e,r){var o;return o="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1)[Po]||2!="ab".split(/(?:ab)*/)[Po]||4!=".".split(/(.?)(.?)/)[Po]||".".split(/()()/)[Po]>1||"".split(/.?/)[Po]?function(t,n){var r,o,i=String(this);if(void 0===t&&0===n)return[];if(!R(r=t)||!(void 0!==(o=r[Eo])?o:"RegExp"==ut(r)))return e.call(i,t,n);for(var c,u,a,s=[],f=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),l=0,p=void 0===n?4294967295:n>>>0,h=new RegExp(t.source,f+"g");(c=je.call(h,i))&&!((u=h.lastIndex)>l&&(s.push(i.slice(l,c.index)),c[Po]>1&&c.index<i[Po]&&_o.apply(s,c.slice(1)),a=c[0][Po],l=u,s[Po]>=p));)h.lastIndex===c.index&&h.lastIndex++;return l===i[Po]?!a&&h.test("")||s.push(""):s.push(i.slice(l)),s[Po]>p?s.slice(0,p):s}:"0".split(void 0,0)[Po]?function(t,n){return void 0===t&&0===n?[]:e.call(this,t,n)}:e,[function(e,r){var i=t(this),c=null==e?void 0:e[n];return void 0!==c?c.call(e,i,r):o.call(String(i),e,r)},function(t,n){var i=r(o,t,this,n,o!==e);if(i.done)return i.value;var c=k(t),u=String(this),a=nr(c,RegExp),s=c.unicode,f=(c.ignoreCase?"i":"")+(c.multiline?"m":"")+(c.unicode?"u":"")+(To?"y":"g"),l=new a(To?c:"^(?:"+c.source+")",f),p=void 0===n?4294967295:n>>>0;if(0===p)return[];if(0===u.length)return null===xe(l,u)?[u]:[];for(var h=0,d=0,y=[];d<u.length;){l.lastIndex=To?d:0;var v,m=xe(l,To?u:u.slice(d));if(null===m||(v=Oo(yt(l.lastIndex+(To?0:d)),u.length))===h)d=be(u,d,s);else{if(y.push(u.slice(h,d)),y.length===p)return y;for(var g=1;g<=m.length-1;g++)if(y.push(m[g]),y.length===p)return y;d=h=v}}return y.push(u.slice(h)),y}]}));var jo=function(t){return function(n){return n.split(t)}},Ao=function(t){return uo(So,jo("&"),(n=jo("="),function(t){return t.map(n)}),function(t,n){return function(e){return e.reduce(t,n)}}((function(t,n){return t[n[0]]=n[1],t}),{}))(location.search)[t]||"";var n},Lo=function(){var t=T(_.mark((function t(){var n;return _.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n=Ao("appid"),t.t1=n,!t.t1){t.next=6;break}return t.next=5,io("appmodule",n,"?$select=name");case 5:t.t1=t.sent;case 6:if(t.t0=t.t1.name,t.t0){t.next=9;break}t.t0="";case 9:return t.abrupt("return",t.t0);case 10:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}();return{ActionCollectionBase:function(){},AlertDialogStrings:function(){},ArrayEx:function(){},AttributeFormat:function(){},AttributeType:function(){},BeginSecureSessionResponseCode:function(){},BusinessProcessFlowInstanceState:function(){},BusinessProcessFlowInstanceStatus:function(){},BusinessRuleNotificationBase:function(){},ChartPaneMode:function(){},ClientName:function(){},ClientState:function(){},ClientStates:function(){},Collection:function(){},ComponentModel:function(){},ConfirmDialogStrings:function(){},Constants:function(){},ControlType:function(){},DataLoadEventArgs:function(){},DataLoadState:function(){},DateFormattingInfo:function(){},DelegateItterator:function(){},Description:function(){},Device:function(){},Diagnostics:function(){},Dialog:function(){},DialogOptions:function(){},Encoding:function(){},EntityFormOptions:function(){},EntityListPageInput:function(){},EntityMetadata:function(){},EntityRelationshipRoleType:function(){},EntityRelationshipType:function(){},ErrorDialogOptions:function(){},ErrorResponse:function(){},ExecutionContext:function(){},Flag:function(){},FormDataAttributePrivilege:function(){},FormDataAttributePrivileges:function(){},FormFactor:function(){},FormNotificationOptions:function(){},FormSaveAction:function(){},FormType:function(){},Gen:function(){},GridType:function(){},IBusinessRuleNotificationProvider:function(){},IsMockXrm:function(){return!0},IXrmCollectionItem:function(){},Interfaces:function(){},Internal:function(){},JavaScriptConsoleTraceListener:function(){},KBSearchResult:function(){},LocalizedLabel:function(){},LookupObject:function(){},LookupOptions:function(){},LookupStyle:function(){},MetricsStopwatch:function(){},Mobile:function(){},Navigation:function(){},NotificationLevel:function(){},NumberEx:function(){},Objects:function(){},Offline:function(){},OfflineErrorResponse:function(){},OpenFileMode:function(){},OpenFormSuccessResponse:function(){},OptionSetItem:function(){},OrganizationServiceProxyBridge:function(){},Page:function(){},PageBridge:function(){},PageContextBridge:function(){},PageEx:function(){},PageInput:function(){},PageType:function(){},Panel:function(){},ProcessActionSuccessResponse:function(){},ProcessResponse:function(){},ProcessState:function(){},ProcessStatus:function(){},RelationshipReference:function(){},RequiredLevel:function(){},SaveErrorResponse:function(){},SaveEventArgs:function(){},SaveMode:function(){},SaveOptions:function(){},SaveSuccessResponse:function(){},ScopedServiceDirectory:function(){},Sdk:function(){},Services:function(){},Soap:function(){},StepProgress:function(){},StepType:function(){},StringBuilderTraceListener:function(){},StringEx:function(){},SubmitMode:function(){},TabDisplayState:function(){},TabItem:function(){},TabSection:function(){},TaskFlowOptions:function(){},TaskIterrator:function(){},Tracing:function(){},UI:function(){},Utility:{closeProgressIndicator:function(){},getAllowedStatusTransitions:function(){},getEntityMetadata:We,getGlobalContext:function(){var t=T(_.mark((function t(){var n;return _.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Promise.all([ro(),vo()]);case 2:return n=t.sent,t.abrupt("return",{organizationSettings:n[0],userSettings:n[1],getClientUrl:mo,isOnPremises:ve,getCurrentAppName:Lo});case 4:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}(),getLearningPathAttributeName:function(){},getPageContext:function(){},getResourceString:function(){},invokeProcessAction:function(){},lookObjects:function(){},refreshParentGrid:function(){},showProgressIndicator:function(){}},WebApi:no,WindowOptions:function(){},XrmBusinessProcessFlow:function(){},XrmChart:function(){},XrmCollection:function(){},XrmCollectionBase:function(){},XrmCollectionDictionary:function(){},XrmControl:function(){},XrmControlACI:function(){},XrmControlAutoLookup:function(){},XrmControlBase:function(){},XrmControlButton:function(){},XrmControlDateTime:function(){},XrmControlEmailEngagementActionsControl:function(){},XrmControlEmailRecipientActivity:function(){},XrmControlFormSelector:function(){},XrmControlGrid:function(){},XrmControlIFrame:function(){},XrmControlLookup:function(){},XrmControlOptionSet:function(){},XrmControlQuickForm:function(){},XrmControlRoutedGrid:function(){},XrmControlSearchWidget:function(){},XrmControlSilverlight:function(){},XrmControlSubGrid:function(){},XrmControlText:function(){},XrmControlTimer:function(){},XrmControlWebResource:function(){},XrmControls:function(){},XrmDataControl:function(){},XrmDialog:function(){},XrmEncoding:function(){},XrmEntities:function(){},XrmEntity:function(){},XrmEntityAttribute:function(){},XrmEntityAttributeBoolean:function(){},XrmEntityAttributeDateTime:function(){},XrmEntityAttributeLookup:function(){},XrmEntityAttributeNumber:function(){},XrmEntityAttributeOptionSet:function(){},XrmEntityAttributeOptionSetBase:function(){},XrmEntityAttributeString:function(){},XrmEntityAttributes:function(){},XrmEntityRelationship:function(){},XrmFile:function(){},XrmForm:function(){},XrmFormData:function(){},XrmFormSelectorItem:function(){},XrmFormSelectorItems:function(){},XrmFormUI:function(){},XrmGlobalContext:function(){},XrmGridData:function(){},XrmGridFilter:function(){},XrmGridRow:function(){},XrmGridRows:function(){},XrmInternal:function(){},XrmNavigation:function(){},XrmNavigationItem:function(){},XrmNavigationItems:function(){},XrmNavigations:function(){},XrmOffline:function(){},XrmOpenFileOption:function(){},XrmOrganizationSettings:function(){},XrmPageContextClient:function(){},XrmPanel:function(){},XrmPerformance:function(){},XrmProcessControlData:function(){},XrmProcessControlUI:function(){},XrmProcessStage:function(){},XrmProcessStep:function(){},XrmQuickForms:function(){},XrmRelatedEntities:function(){},XrmSdkMessages:function(){},XrmServiceDirectory:function(){},XrmTab:function(){},XrmTabNavigator:function(){},XrmTabNavigatorGroup:function(){},XrmTabNavigators:function(){},XrmTabSection:function(){},XrmTabSections:function(){},XrmTabs:function(){},XrmTaskProcess:function(){},XrmTrace:function(){},XrmUserSettings:function(){},XrmUtility:function(){},XrmViewSelector:function(){},getName:function(){return"Xrm"}}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

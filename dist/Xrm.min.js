var Xrm=function(t,n,e,r,o,i,a){"use strict";a=a&&Object.prototype.hasOwnProperty.call(a,"default")?a.default:a;var u="undefined"!=typeof globalThis&&globalThis||"undefined"!=typeof self&&self||void 0!==u&&u,c="URLSearchParams"in u,s="Symbol"in u&&"iterator"in Symbol,f="FileReader"in u&&"Blob"in u&&function(){try{return new Blob,!0}catch(t){return!1}}(),l="FormData"in u,p="ArrayBuffer"in u;if(p)var h=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],d=ArrayBuffer.isView||function(t){return t&&h.indexOf(Object.prototype.toString.call(t))>-1};function y(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(t)||""===t)throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function m(t){return"string"!=typeof t&&(t=String(t)),t}function v(t){var n={next:function(){var n=t.shift();return{done:void 0===n,value:n}}};return s&&(n[Symbol.iterator]=function(){return n}),n}function b(t){this.map={},t instanceof b?t.forEach((function(t,n){this.append(n,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(n){this.append(n,t[n])}),this)}function g(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function w(t){return new Promise((function(n,e){t.onload=function(){n(t.result)},t.onerror=function(){e(t.error)}}))}function x(t){var n=new FileReader,e=w(n);return n.readAsArrayBuffer(t),e}function E(t){if(t.slice)return t.slice(0);var n=new Uint8Array(t.byteLength);return n.set(new Uint8Array(t)),n.buffer}function T(){return this.bodyUsed=!1,this._initBody=function(t){var n;this.bodyUsed=this.bodyUsed,this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:f&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:l&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:c&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():p&&f&&((n=t)&&DataView.prototype.isPrototypeOf(n))?(this._bodyArrayBuffer=E(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):p&&(ArrayBuffer.prototype.isPrototypeOf(t)||d(t))?this._bodyArrayBuffer=E(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):c&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},f&&(this.blob=function(){var t=g(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){if(this._bodyArrayBuffer){var t=g(this);return t||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer))}return this.blob().then(x)}),this.text=function(){var t,n,e,r=g(this);if(r)return r;if(this._bodyBlob)return t=this._bodyBlob,n=new FileReader,e=w(n),n.readAsText(t),e;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var n=new Uint8Array(t),e=new Array(n.length),r=0;r<n.length;r++)e[r]=String.fromCharCode(n[r]);return e.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},l&&(this.formData=function(){return this.text().then(P)}),this.json=function(){return this.text().then(JSON.parse)},this}b.prototype.append=function(t,n){t=y(t),n=m(n);var e=this.map[t];this.map[t]=e?e+", "+n:n},b.prototype.delete=function(t){delete this.map[y(t)]},b.prototype.get=function(t){return t=y(t),this.has(t)?this.map[t]:null},b.prototype.has=function(t){return this.map.hasOwnProperty(y(t))},b.prototype.set=function(t,n){this.map[y(t)]=m(n)},b.prototype.forEach=function(t,n){for(var e in this.map)this.map.hasOwnProperty(e)&&t.call(n,this.map[e],e,this)},b.prototype.keys=function(){var t=[];return this.forEach((function(n,e){t.push(e)})),v(t)},b.prototype.values=function(){var t=[];return this.forEach((function(n){t.push(n)})),v(t)},b.prototype.entries=function(){var t=[];return this.forEach((function(n,e){t.push([e,n])})),v(t)},s&&(b.prototype[Symbol.iterator]=b.prototype.entries);var A=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function S(t,n){if(!(this instanceof S))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');var e,r,o=(n=n||{}).body;if(t instanceof S){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,n.headers||(this.headers=new b(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,o||null==t._bodyInit||(o=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=n.credentials||this.credentials||"same-origin",!n.headers&&this.headers||(this.headers=new b(n.headers)),this.method=(e=n.method||this.method||"GET",r=e.toUpperCase(),A.indexOf(r)>-1?r:e),this.mode=n.mode||this.mode||null,this.signal=n.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(o),!("GET"!==this.method&&"HEAD"!==this.method||"no-store"!==n.cache&&"no-cache"!==n.cache)){var i=/([?&])_=[^&]*/;if(i.test(this.url))this.url=this.url.replace(i,"$1_="+(new Date).getTime());else{this.url+=(/\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}}function P(t){var n=new FormData;return t.trim().split("&").forEach((function(t){if(t){var e=t.split("="),r=e.shift().replace(/\+/g," "),o=e.join("=").replace(/\+/g," ");n.append(decodeURIComponent(r),decodeURIComponent(o))}})),n}function O(t,n){if(!(this instanceof O))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');n||(n={}),this.type="default",this.status=void 0===n.status?200:n.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in n?n.statusText:"",this.headers=new b(n.headers),this.url=n.url||"",this._initBody(t)}S.prototype.clone=function(){return new S(this,{body:this._bodyInit})},T.call(S.prototype),T.call(O.prototype),O.prototype.clone=function(){return new O(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new b(this.headers),url:this.url})},O.error=function(){var t=new O(null,{status:0,statusText:""});return t.type="error",t};var X=[301,302,303,307,308];O.redirect=function(t,n){if(-1===X.indexOf(n))throw new RangeError("Invalid status code");return new O(null,{status:n,headers:{location:t}})};var C=u.DOMException;try{new C}catch(t){(C=function(t,n){this.message=t,this.name=n;var e=Error(t);this.stack=e.stack}).prototype=Object.create(Error.prototype),C.prototype.constructor=C}function _(t,n){return new Promise((function(e,r){var o=new S(t,n);if(o.signal&&o.signal.aborted)return r(new C("Aborted","AbortError"));var i=new XMLHttpRequest;function a(){i.abort()}i.onload=function(){var t,n,r={status:i.status,statusText:i.statusText,headers:(t=i.getAllResponseHeaders()||"",n=new b,t.replace(/\r?\n[\t ]+/g," ").split("\r").map((function(t){return 0===t.indexOf("\n")?t.substr(1,t.length):t})).forEach((function(t){var e=t.split(":"),r=e.shift().trim();if(r){var o=e.join(":").trim();n.append(r,o)}})),n)};r.url="responseURL"in i?i.responseURL:r.headers.get("X-Request-URL");var o="response"in i?i.response:i.responseText;setTimeout((function(){e(new O(o,r))}),0)},i.onerror=function(){setTimeout((function(){r(new TypeError("Network request failed"))}),0)},i.ontimeout=function(){setTimeout((function(){r(new TypeError("Network request failed"))}),0)},i.onabort=function(){setTimeout((function(){r(new C("Aborted","AbortError"))}),0)},i.open(o.method,function(t){try{return""===t&&u.location.href?u.location.href:t}catch(n){return t}}(o.url),!0),"include"===o.credentials?i.withCredentials=!0:"omit"===o.credentials&&(i.withCredentials=!1),"responseType"in i&&(f?i.responseType="blob":p&&o.headers.get("Content-Type")&&-1!==o.headers.get("Content-Type").indexOf("application/octet-stream")&&(i.responseType="arraybuffer")),!n||"object"!=typeof n.headers||n.headers instanceof b?o.headers.forEach((function(t,n){i.setRequestHeader(n,t)})):Object.getOwnPropertyNames(n.headers).forEach((function(t){i.setRequestHeader(t,m(n.headers[t]))})),o.signal&&(o.signal.addEventListener("abort",a),i.onreadystatechange=function(){4===i.readyState&&o.signal.removeEventListener("abort",a)}),i.send(void 0===o._bodyInit?null:o._bodyInit)}))}function L(t,n){return t(n={exports:{}},n.exports),n.exports}_.polyfill=!0,u.fetch||(u.fetch=_,u.Headers=b,u.Request=S,u.Response=O);var j=L((function(t){var n=function(t){var n=Object.prototype,e=n.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function u(t,n,e){return Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}),t[n]}try{u({},"")}catch(t){u=function(t,n,e){return t[n]=e}}function c(t,n,e,r){var o=n&&n.prototype instanceof l?n:l,i=Object.create(o.prototype),a=new T(r||[]);return i._invoke=function(t,n,e){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return S()}for(e.method=o,e.arg=i;;){var a=e.delegate;if(a){var u=w(a,e);if(u){if(u===f)continue;return u}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if("suspendedStart"===r)throw r="completed",e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r="executing";var c=s(t,n,e);if("normal"===c.type){if(r=e.done?"completed":"suspendedYield",c.arg===f)continue;return{value:c.arg,done:e.done}}"throw"===c.type&&(r="completed",e.method="throw",e.arg=c.arg)}}}(t,e,a),i}function s(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var f={};function l(){}function p(){}function h(){}var d={};d[o]=function(){return this};var y=Object.getPrototypeOf,m=y&&y(y(A([])));m&&m!==n&&e.call(m,o)&&(d=m);var v=h.prototype=l.prototype=Object.create(d);function b(t){["next","throw","return"].forEach((function(n){u(t,n,(function(t){return this._invoke(n,t)}))}))}function g(t,n){var r;this._invoke=function(o,i){function a(){return new n((function(r,a){!function r(o,i,a,u){var c=s(t[o],t,i);if("throw"!==c.type){var f=c.arg,l=f.value;return l&&"object"==typeof l&&e.call(l,"__await")?n.resolve(l.__await).then((function(t){r("next",t,a,u)}),(function(t){r("throw",t,a,u)})):n.resolve(l).then((function(t){f.value=t,a(f)}),(function(t){return r("throw",t,a,u)}))}u(c.arg)}(o,i,r,a)}))}return r=r?r.then(a,a):a()}}function w(t,n){var e=t.iterator[n.method];if(void 0===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=void 0,w(t,n),"throw"===n.method))return f;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return f}var r=s(e,t.iterator,n.arg);if("throw"===r.type)return n.method="throw",n.arg=r.arg,n.delegate=null,f;var o=r.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function x(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function E(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function T(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(x,this),this.reset(!0)}function A(t){if(t){var n=t[o];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function n(){for(;++r<t.length;)if(e.call(t,r))return n.value=t[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return i.next=i}}return{next:S}}function S(){return{value:void 0,done:!0}}return p.prototype=v.constructor=h,h.constructor=p,p.displayName=u(h,a,"GeneratorFunction"),t.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===p||"GeneratorFunction"===(n.displayName||n.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,h):(t.__proto__=h,u(t,a,"GeneratorFunction")),t.prototype=Object.create(v),t},t.awrap=function(t){return{__await:t}},b(g.prototype),g.prototype[i]=function(){return this},t.AsyncIterator=g,t.async=function(n,e,r,o,i){void 0===i&&(i=Promise);var a=new g(c(n,e,r,o),i);return t.isGeneratorFunction(e)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},b(v),u(v,a,"Generator"),v[o]=function(){return this},v.toString=function(){return"[object Generator]"},t.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=A,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(E),!t)for(var n in this)"t"===n.charAt(0)&&e.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function r(e,r){return a.type="throw",a.arg=t,n.next=e,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var u=e.call(i,"catchLoc"),c=e.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(t,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&e.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),f},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),E(e),f}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var o=r.arg;E(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,e){return this.delegate={iterator:A(t),resultName:n,nextLoc:e},"next"===this.method&&(this.arg=void 0),f}},t}(t.exports);try{regeneratorRuntime=n}catch(t){Function("r","regeneratorRuntime = r")(n)}}));function I(t,n,e,r,o,i,a){try{var u=t[i](a),c=u.value}catch(t){return void e(t)}u.done?n(c):Promise.resolve(c).then(r,o)}var B=function(t){return function(){var n=this,e=arguments;return new Promise((function(r,o){var i=t.apply(n,e);function a(t){I(i,r,o,a,u,"next",t)}function u(t){I(i,r,o,a,u,"throw",t)}a(void 0)}))}},R=L((function(t){function n(e){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?t.exports=n=function(t){return typeof t}:t.exports=n=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(e)}t.exports=n})),D="".concat("object"===("undefined"==typeof process?"undefined":R(process))?"https://elegastsandbox.crm4.dynamics.com":"","/api/data/v9.0"),F="object"===("undefined"==typeof location?"undefined":R(location))&&location.origin,k=/[-a-zA-Z0-9]*?\.(crm[0-9]*?\.dynamics\.com|crm\.microsoftdynamics\.us)/;var N=function(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t},U=function(){return!k.test(location.href)},M=function(t){var n={};return B(j.mark((function e(){var r,o=arguments;return j.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=JSON.stringify(o),n[r]=n[r]||t.apply(this,o),e.abrupt("return",n[r]);case 3:case"end":return e.stop()}}),e,this)})))},G=M(B(j.mark((function t(){var n;return j.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch("/tools/systemcustomization/systemCustomization.aspx?pid=05&web=true");case 2:if(!((n=t.sent).length>0)){t.next=7;break}return t.abrupt("return",n.text().then((function(t){return t.match(/var ORG_UNIQUE_NAME = '([-a-zA-Z0-9]*)';/)[1]})));case 7:return t.abrupt("return","");case 8:case"end":return t.stop()}}),t)}))));function H(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function z(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?H(Object(e),!0).forEach((function(n){N(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):H(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}var q,$=function(t){return function(n){return function(e){return function(){var r=B(j.mark((function r(o){var i;return j.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:if(i="",!U()){r.next=5;break}return r.next=4,G();case 4:i=r.sent;case 5:return a.getAuth()&&(o||(o={}),o.Authorization="Bearer "+a.getAuth()),r.abrupt("return",fetch("".concat(i?"/"+i:i).concat(D,"/").concat(e),{headers:z({},o),method:t,body:n&&JSON.stringify(n)}));case 7:case"end":return r.stop()}}),r)})));return function(t){return r.apply(this,arguments)}}()}}},W=$("GET")(),J=(q="then",function(){for(var t=arguments.length,n=new Array(t),e=0;e<t;e++)n[e]=arguments[e];return n.reduce((function(t,n){return function(e){return n(e)[q](t)}}))}),Y=function(t){return t.json()},K=function(t){return W("RetrieveEntity(EntityFilters=Microsoft.Dynamics.CRM.EntityFilters'Attributes',LogicalName = '".concat(t,"',MetadataId=00000000-0000-0000-0000-000000000000,RetrieveAsIfPublished=false)"))({})},V=M((function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return J(Y,K)(t,n)})),Q=function(){var t=B(j.mark((function t(n,e){var r,o,i,a=arguments;return j.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=a.length>2&&void 0!==a[2]?a[2]:"",t.next=3,V(n);case 3:return o=t.sent,t.next=6,W("".concat(o.EntityMetadata.LogicalCollectionName,"(").concat(e,")").concat(r||""))();case 6:return i=t.sent,t.abrupt("return",i.json());case 8:case"end":return t.stop()}}),t)})));return function(n,e){return t.apply(this,arguments)}}(),Z=$("POST"),tt=function(){var t=B(j.mark((function t(n,e){var r,o,i;return j.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,V(n);case 2:return r=t.sent,t.next=5,Z(e)("/".concat(r.EntityMetadata.LogicalCollectionName))({"content-type":"application/json",Prefer:"return=representation"});case 5:return o=t.sent,t.next=8,o.json();case 8:return i=t.sent,t.abrupt("return",Promise.resolve({entityType:n,id:i[r.EntityMetadata.PrimaryIdAttribute]}));case 10:case"end":return t.stop()}}),t)})));return function(n,e){return t.apply(this,arguments)}}(),nt=$("PATCH"),et=function(){var t=B(j.mark((function t(n,e,r){var o;return j.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,V(n);case 2:return o=t.sent,t.next=5,nt(r)("/".concat(o.EntityMetadata.LogicalCollectionName,"(").concat(e,")"))({"content-type":"application/json"});case 5:return t.abrupt("return",Promise.resolve({entityType:n,id:e}));case 6:case"end":return t.stop()}}),t)})));return function(n,e,r){return t.apply(this,arguments)}}(),rt=$("DELETE")(),ot=function(){var t=B(j.mark((function t(n,e){var r;return j.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,V(n);case 2:return r=t.sent,t.next=5,rt("/".concat(r.EntityMetadata.LogicalCollectionName,"(").concat(e,")"))();case 5:return t.sent,t.abrupt("return",Promise.resolve({entityType:n,id:e}));case 7:case"end":return t.stop()}}),t)})));return function(n,e){return t.apply(this,arguments)}}(),it=function(t){if(t){var n="s";return"s"===t.charAt(t.length-1)&&(n="es"),t+n}return t},at=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return function(){var e=B(j.mark((function e(r){var o;return j.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o=r.EntityMetadata,e.abrupt("return",W("".concat(it(o.LogicalName)).concat(t||""))(n?{prefer:'odata.include-annotations="*",odata.maxpagesize='.concat(n)}:{}));case 2:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()},ut=function(){var t=B(j.mark((function t(n,e){var r,o;return j.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=[],1,o="--changeset_"+Math.floor(Math.random()*Date.now()),r.push("--batch_"+n),r.push("Content-Type: multipart/mixed;boundary="+o),r.push(""),e.forEach((function(t){var n="";r.push(o),r.push("Content-type: application/http"),r.push("Content-Transfer-Encoding:binary"),r.push("Content-ID: 1"),t.id&&(n="/("+t.id+")"),r.push(t.method.toUpperCase()+D+"/"+t.entity+n+" HTTP/1.1"),r.push("Content-Type: application/json"),r.push(""),r.push(JSON.stringify(t.data)),r.push(o)})),r.push(""),r.push("--batch_"+n),t.abrupt("return",Promise.resolve(r.join("\r\n")));case 10:case"end":return t.stop()}}),t)})));return function(n,e){return t.apply(this,arguments)}}(),ct={createRecord:tt,deleteRecord:ot,updateRecord:et,retrieveRecord:Q,retrieveMultipleRecords:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return J(Y,at(n,e),V)(t)},executeMultiple:function(){var t=B(j.mark((function t(n){var e,r,o;return j.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=Date.now(),t.prev=1,t.next=4,ut(e,n);case 4:return r=t.sent,t.next=7,Z(r)("$batch")({"content-type":"multipart/mixed;boundary=batch_"+e,Prefer:"odata.continue-on-error"});case 7:return o=t.sent,t.abrupt("return",Promise.resolve(o));case 11:return t.prev=11,t.t0=t.catch(1),t.abrupt("return",Promise.reject(t.t0));case 14:case"end":return t.stop()}}),t,null,[[1,11]])})));return function(n){return t.apply(this,arguments)}}(),online:{execute:function(t){var n=t.getMetadata().operationName;return Z(t)(n)({"content-type":"application/json"})}}},st=function(){var t=B(j.mark((function t(){var n;return j.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,G();case 2:return n=t.sent,t.abrupt("return",{uniqueName:n});case 4:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}(),ft=M(B(j.mark((function t(){var n;return j.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,W("/WhoAmI")();case 2:return n=t.sent,t.abrupt("return",n.json());case 4:case"end":return t.stop()}}),t)})))),lt=M(Q),pt=function(t,n){return function(e){return n(t(e))}},ht=function(){for(var t=arguments.length,n=new Array(t),e=0;e<t;e++)n[e]=arguments[e];return n.reduce(pt)},dt=function(t){return function(n){return function(e){return e.replace(t,n)}}},yt=ht(dt(/\{|\}/gi)("")),mt=function(){var t=B(j.mark((function t(){var n,e;return j.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,ft();case 2:return n=t.sent,t.next=5,lt("systemuser",n.UserId,"?$expand=systemuserroles_association($select=name)&$select=systemuserid,fullname");case 5:return e=t.sent,t.abrupt("return",{userId:"{".concat(yt(n.UserId),"}"),userName:e.fullname,securityRoles:e.systemuserroles_association.map((function(t){return t.roleid}))});case 7:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}(),vt=function(){return F},bt=ht(dt(/^\?/)("")),gt=function(t){return function(n){return n.split(t)}},wt=function(t){return ht(bt,gt("&"),(n=gt("="),function(t){return t.map(n)}),function(t,n){return function(e){return e.reduce(t,n)}}((function(t,n){return t[n[0]]=n[1],t}),{}))(location.search)[t]||"";var n},xt=function(){var t=B(j.mark((function t(){var n;return j.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n=wt("appid"),t.t1=n,!t.t1){t.next=6;break}return t.next=5,lt("appmodule",n,"?$select=name");case 5:t.t1=t.sent;case 6:if(t.t0=t.t1.name,t.t0){t.next=9;break}t.t0="";case 9:return t.abrupt("return",t.t0);case 10:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}(),Et={closeProgressIndicator:function(){},getAllowedStatusTransitions:function(){},getEntityMetadata:V,getGlobalContext:function(){var t=B(j.mark((function t(){var n;return j.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Promise.all([st(),mt()]);case 2:return n=t.sent,t.abrupt("return",{organizationSettings:n[0],userSettings:n[1],getClientUrl:vt,isOnPremises:U,getCurrentAppName:xt});case 4:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}(),getLearningPathAttributeName:function(){},getPageContext:function(){},getResourceString:function(){},invokeProcessAction:function(){},lookObjects:function(){},refreshParentGrid:function(){},showProgressIndicator:function(){}};return{AUTH_KEY:null,ActionCollectionBase:function(){},AlertDialogStrings:function(){},ArrayEx:function(){},AttributeFormat:function(){},AttributeType:function(){},BeginSecureSessionResponseCode:function(){},BusinessProcessFlowInstanceState:function(){},BusinessProcessFlowInstanceStatus:function(){},BusinessRuleNotificationBase:function(){},ChartPaneMode:function(){},ClientName:function(){},ClientState:function(){},ClientStates:function(){},Collection:function(){},ComponentModel:function(){},ConfirmDialogStrings:function(){},Constants:function(){},ControlType:function(){},DataLoadEventArgs:function(){},DataLoadState:function(){},DateFormattingInfo:function(){},DelegateItterator:function(){},Description:function(){},Device:function(){},Diagnostics:function(){},Dialog:function(){},DialogOptions:function(){},Encoding:function(){},EntityFormOptions:function(){},EntityListPageInput:function(){},EntityMetadata:function(){},EntityRelationshipRoleType:function(){},EntityRelationshipType:function(){},ErrorDialogOptions:function(){},ErrorResponse:function(){},ExecutionContext:function(){},Flag:function(){},FormDataAttributePrivilege:function(){},FormDataAttributePrivileges:function(){},FormFactor:function(){},FormNotificationOptions:function(){},FormSaveAction:function(){},FormType:function(){},Gen:function(){},GridType:function(){},IBusinessRuleNotificationProvider:function(){},IsMockXrm:function(){return!0},IXrmCollectionItem:function(){},Interfaces:function(){},Internal:function(){},JavaScriptConsoleTraceListener:function(){},KBSearchResult:function(){},LocalizedLabel:function(){},LookupObject:function(){},LookupOptions:function(){},LookupStyle:function(){},MetricsStopwatch:function(){},Mobile:function(){},Navigation:{openForm:function(){var t=B(j.mark((function t(n){var e,r;return j.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e=F+"/main.aspx?pagetype=entityrecord",r="_blank",n.entityName&&(e+="&etn="+n.entityName),n.entityId&&(e+="&id="+n.entityId),n.formId&&(e+="&formid="+n.formId),n.openInNewWindow||(r=null),window.open(e,r);case 9:case"end":return t.stop()}}),t)})));return function(n){return t.apply(this,arguments)}}()},NotificationLevel:function(){},NumberEx:function(){},Objects:function(){},Offline:function(){},OfflineErrorResponse:function(){},OpenFileMode:function(){},OpenFormSuccessResponse:function(){},OptionSetItem:function(){},OrganizationServiceProxyBridge:function(){},Page:function(){},PageBridge:function(){},PageContextBridge:function(){},PageEx:function(){},PageInput:function(){},PageType:function(){},Panel:function(){},ProcessActionSuccessResponse:function(){},ProcessResponse:function(){},ProcessState:function(){},ProcessStatus:function(){},RelationshipReference:function(){},RequiredLevel:function(){},SaveErrorResponse:function(){},SaveEventArgs:function(){},SaveMode:function(){},SaveOptions:function(){},SaveSuccessResponse:function(){},ScopedServiceDirectory:function(){},Sdk:function(){},Services:function(){},Soap:function(){},StepProgress:function(){},StepType:function(){},StringBuilderTraceListener:function(){},StringEx:function(){},SubmitMode:function(){},TabDisplayState:function(){},TabItem:function(){},TabSection:function(){},TaskFlowOptions:function(){},TaskIterrator:function(){},Tracing:function(){},UI:function(){},Utility:Et,WebApi:ct,WindowOptions:function(){},XrmBusinessProcessFlow:function(){},XrmChart:function(){},XrmCollection:function(){},XrmCollectionBase:function(){},XrmCollectionDictionary:function(){},XrmControl:function(){},XrmControlACI:function(){},XrmControlAutoLookup:function(){},XrmControlBase:function(){},XrmControlButton:function(){},XrmControlDateTime:function(){},XrmControlEmailEngagementActionsControl:function(){},XrmControlEmailRecipientActivity:function(){},XrmControlFormSelector:function(){},XrmControlGrid:function(){},XrmControlIFrame:function(){},XrmControlLookup:function(){},XrmControlOptionSet:function(){},XrmControlQuickForm:function(){},XrmControlRoutedGrid:function(){},XrmControlSearchWidget:function(){},XrmControlSilverlight:function(){},XrmControlSubGrid:function(){},XrmControlText:function(){},XrmControlTimer:function(){},XrmControlWebResource:function(){},XrmControls:function(){},XrmDataControl:function(){},XrmDialog:function(){},XrmEncoding:function(){},XrmEntities:function(){},XrmEntity:function(){},XrmEntityAttribute:function(){},XrmEntityAttributeBoolean:function(){},XrmEntityAttributeDateTime:function(){},XrmEntityAttributeLookup:function(){},XrmEntityAttributeNumber:function(){},XrmEntityAttributeOptionSet:function(){},XrmEntityAttributeOptionSetBase:function(){},XrmEntityAttributeString:function(){},XrmEntityAttributes:function(){},XrmEntityRelationship:function(){},XrmFile:function(){},XrmForm:function(){},XrmFormData:function(){},XrmFormSelectorItem:function(){},XrmFormSelectorItems:function(){},XrmFormUI:function(){},XrmGlobalContext:function(){},XrmGridData:function(){},XrmGridFilter:function(){},XrmGridRow:function(){},XrmGridRows:function(){},XrmInternal:function(){},XrmNavigation:function(){},XrmNavigationItem:function(){},XrmNavigationItems:function(){},XrmNavigations:function(){},XrmOffline:function(){},XrmOpenFileOption:function(){},XrmOrganizationSettings:function(){},XrmPageContextClient:function(){},XrmPanel:function(){},XrmPerformance:function(){},XrmProcessControlData:function(){},XrmProcessControlUI:function(){},XrmProcessStage:function(){},XrmProcessStep:function(){},XrmQuickForms:function(){},XrmRelatedEntities:function(){},XrmSdkMessages:function(){},XrmServiceDirectory:function(){},XrmTab:function(){},XrmTabNavigator:function(){},XrmTabNavigatorGroup:function(){},XrmTabNavigators:function(){},XrmTabSection:function(){},XrmTabSections:function(){},XrmTabs:function(){},XrmTaskProcess:function(){},XrmTrace:function(){},XrmUserSettings:function(){},XrmUtility:function(){},XrmViewSelector:function(){},getName:function(){return"Xrm"},setAuth:function(t){globalThis.AUTH_KEY=t},getAuth:function(){return globalThis.AUTH_KEY}}}(0,0,0,0,0,0,xrm$1);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

var Xrm=function(t,n,e,r,o,i){"use strict";function c(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}function u(t,n){return t(n={exports:{}},n.exports),n.exports}i=i&&Object.prototype.hasOwnProperty.call(i,"default")?i.default:i;var a=c(u((function(t){function n(t,n,e,r,o,i,c){try{var u=t[i](c),a=u.value}catch(t){return void e(t)}u.done?n(a):Promise.resolve(a).then(r,o)}t.exports=function(t){return function(){var e=this,r=arguments;return new Promise((function(o,i){var c=t.apply(e,r);function u(t){n(c,o,i,u,a,"next",t)}function a(t){n(c,o,i,u,a,"throw",t)}u(void 0)}))}},t.exports.__esModule=!0,t.exports.default=t.exports}))),s=u((function(t){var n=function(t){var n=Object.prototype,e=n.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",c=r.toStringTag||"@@toStringTag";function u(t,n,e){return Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}),t[n]}try{u({},"")}catch(t){u=function(t,n,e){return t[n]=e}}function a(t,n,e,r){var o=n&&n.prototype instanceof l?n:l,i=Object.create(o.prototype),c=new S(r||[]);return i._invoke=function(t,n,e){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return P()}for(e.method=o,e.arg=i;;){var c=e.delegate;if(c){var u=x(c,e);if(u){if(u===f)continue;return u}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if("suspendedStart"===r)throw r="completed",e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r="executing";var a=s(t,n,e);if("normal"===a.type){if(r=e.done?"completed":"suspendedYield",a.arg===f)continue;return{value:a.arg,done:e.done}}"throw"===a.type&&(r="completed",e.method="throw",e.arg=a.arg)}}}(t,e,c),i}function s(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}t.wrap=a;var f={};function l(){}function p(){}function m(){}var h={};u(h,o,(function(){return this}));var d=Object.getPrototypeOf,y=d&&d(d(E([])));y&&y!==n&&e.call(y,o)&&(h=y);var v=m.prototype=l.prototype=Object.create(h);function g(t){["next","throw","return"].forEach((function(n){u(t,n,(function(t){return this._invoke(n,t)}))}))}function b(t,n){var r;this._invoke=function(o,i){function c(){return new n((function(r,c){!function r(o,i,c,u){var a=s(t[o],t,i);if("throw"!==a.type){var f=a.arg,l=f.value;return l&&"object"==typeof l&&e.call(l,"__await")?n.resolve(l.__await).then((function(t){r("next",t,c,u)}),(function(t){r("throw",t,c,u)})):n.resolve(l).then((function(t){f.value=t,c(f)}),(function(t){return r("throw",t,c,u)}))}u(a.arg)}(o,i,r,c)}))}return r=r?r.then(c,c):c()}}function x(t,n){var e=t.iterator[n.method];if(void 0===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=void 0,x(t,n),"throw"===n.method))return f;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return f}var r=s(e,t.iterator,n.arg);if("throw"===r.type)return n.method="throw",n.arg=r.arg,n.delegate=null,f;var o=r.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function w(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function X(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function S(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(w,this),this.reset(!0)}function E(t){if(t){var n=t[o];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function n(){for(;++r<t.length;)if(e.call(t,r))return n.value=t[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return i.next=i}}return{next:P}}function P(){return{value:void 0,done:!0}}return p.prototype=m,u(v,"constructor",m),u(m,"constructor",p),p.displayName=u(m,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===p||"GeneratorFunction"===(n.displayName||n.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,u(t,c,"GeneratorFunction")),t.prototype=Object.create(v),t},t.awrap=function(t){return{__await:t}},g(b.prototype),u(b.prototype,i,(function(){return this})),t.AsyncIterator=b,t.async=function(n,e,r,o,i){void 0===i&&(i=Promise);var c=new b(a(n,e,r,o),i);return t.isGeneratorFunction(e)?c:c.next().then((function(t){return t.done?t.value:c.next()}))},g(v),u(v,c,"Generator"),u(v,o,(function(){return this})),u(v,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=E,S.prototype={constructor:S,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(X),!t)for(var n in this)"t"===n.charAt(0)&&e.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function r(e,r){return c.type="throw",c.arg=t,n.next=e,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],c=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var u=e.call(i,"catchLoc"),a=e.call(i,"finallyLoc");if(u&&a){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!a)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(t,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&e.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var c=i?i.completion:{};return c.type=t,c.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(c)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),f},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),X(e),f}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var o=r.arg;X(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,e){return this.delegate={iterator:E(t),resultName:n,nextLoc:e},"next"===this.method&&(this.arg=void 0),f}},t}(t.exports);try{regeneratorRuntime=n}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=n:Function("r","regeneratorRuntime = r")(n)}})),f=c(u((function(t){function n(e){return t.exports=n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t.exports.__esModule=!0,t.exports.default=t.exports,n(e)}t.exports=n,t.exports.__esModule=!0,t.exports.default=t.exports}))),l="".concat("object"===("undefined"==typeof process?"undefined":f(process))?"https://elegastsandbox.crm4.dynamics.com":"","/api/data/v9.0"),p="object"===("undefined"==typeof location?"undefined":f(location))&&location.origin,m=/[-a-zA-Z0-9]*?\.(crm[0-9]*?\.dynamics\.com|crm\.microsoftdynamics\.us)/,h=c(u((function(t){t.exports=function(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t},t.exports.__esModule=!0,t.exports.default=t.exports}))),d=function(){return!m.test(location.href)},y=function(t){var n={};return a(s.mark((function e(){var r,o=arguments;return s.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=JSON.stringify(o),n[r]=n[r]||t.apply(this,o),e.abrupt("return",n[r]);case 3:case"end":return e.stop()}}),e,this)})))},v=y(a(s.mark((function t(){var n;return s.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch("/tools/systemcustomization/systemCustomization.aspx?pid=05&web=true");case 2:if(!((n=t.sent).length>0)){t.next=7;break}return t.abrupt("return",n.text().then((function(t){return t.match(/var ORG_UNIQUE_NAME = '([-a-zA-Z0-9]*)';/)[1]})));case 7:return t.abrupt("return","");case 8:case"end":return t.stop()}}),t)}))));function g(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function b(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?g(Object(e),!0).forEach((function(n){h(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):g(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}var x,w=function(t){return function(n){return function(e){return function(){var r=a(s.mark((function r(o){var c,u;return s.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:if(c="",u=n&&JSON.stringify(n),!d()){r.next=6;break}return r.next=5,v();case 5:c=r.sent;case 6:return i.getAuth()&&(o||(o={}),o.Authorization="Bearer "+i.getAuth()),"$batch"===e&&(u=n),r.abrupt("return",fetch("".concat(c?"/"+c:c).concat(l,"/").concat(e),{headers:b({},o),method:t,body:u}));case 9:case"end":return r.stop()}}),r)})));return function(t){return r.apply(this,arguments)}}()}}},X=w("GET")(),S=(x="then",function(){for(var t=arguments.length,n=new Array(t),e=0;e<t;e++)n[e]=arguments[e];return n.reduce((function(t,n){return function(e){return n(e)[x](t)}}))}),E=function(t){return t.json()},P=function(t){return X("RetrieveEntity(EntityFilters=Microsoft.Dynamics.CRM.EntityFilters'Attributes',LogicalName = '".concat(t,"',MetadataId=00000000-0000-0000-0000-000000000000,RetrieveAsIfPublished=false)"))({})},C=y((function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return S(E,P)(t,n)})),O=function(){var t=a(s.mark((function t(n,e){var r,o,i,c=arguments;return s.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=c.length>2&&void 0!==c[2]?c[2]:"",t.next=3,C(n);case 3:return o=t.sent,t.next=6,X("".concat(o.EntityMetadata.LogicalCollectionName,"(").concat(e,")").concat(r||""))();case 6:return i=t.sent,t.abrupt("return",i.json());case 8:case"end":return t.stop()}}),t)})));return function(n,e){return t.apply(this,arguments)}}(),A=w("POST"),T=function(){var t=a(s.mark((function t(n,e){var r,o,i;return s.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,C(n);case 2:return r=t.sent,t.next=5,A(e)("/".concat(r.EntityMetadata.LogicalCollectionName))({"content-type":"application/json",Prefer:"return=representation"});case 5:return o=t.sent,t.next=8,o.json();case 8:return i=t.sent,t.abrupt("return",Promise.resolve({entityType:n,id:i[r.EntityMetadata.PrimaryIdAttribute]}));case 10:case"end":return t.stop()}}),t)})));return function(n,e){return t.apply(this,arguments)}}(),L=w("PATCH"),k=function(){var t=a(s.mark((function t(n,e,r){var o;return s.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,C(n);case 2:return o=t.sent,t.next=5,L(r)("/".concat(o.EntityMetadata.LogicalCollectionName,"(").concat(e,")"))({"content-type":"application/json"});case 5:return t.abrupt("return",Promise.resolve({entityType:n,id:e}));case 6:case"end":return t.stop()}}),t)})));return function(n,e,r){return t.apply(this,arguments)}}(),I=w("DELETE")(),N=function(){var t=a(s.mark((function t(n,e){var r;return s.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,C(n);case 2:return r=t.sent,t.next=5,I("/".concat(r.EntityMetadata.LogicalCollectionName,"(").concat(e,")"))();case 5:return t.sent,t.abrupt("return",Promise.resolve({entityType:n,id:e}));case 7:case"end":return t.stop()}}),t)})));return function(n,e){return t.apply(this,arguments)}}(),j=function(t){if(t){var n="s";return"s"===t.charAt(t.length-1)&&(n="es"),"savedquery"===t&&(t="savedquerie"),t+n}return t},R=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return function(){var e=a(s.mark((function e(r){var o;return s.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o=r.EntityMetadata,e.abrupt("return",X("".concat(j(o.LogicalName)).concat(t||""))(n?{prefer:'odata.include-annotations="*",odata.maxpagesize='.concat(n)}:{}));case 2:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()},F=function(){var t=a(s.mark((function t(n,e){var r;return s.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=[],e.forEach((function(t){var e="";r.push("--batch_"+n),r.push("Content-type: application/http"),r.push("Content-Transfer-Encoding:binary"),t.id&&(e="("+t.id+")"),r.push(""),r.push(t.method.toUpperCase()+" "+l+"/"+t.entity+e+" HTTP/1.1"),r.push("MSCRM.SuppressDuplicateDetection: true"),r.push("If-match: *"),r.push("AutoDisassociate: true"),r.push("Content-Type: application/json"),r.push('Prefer: odata.include-annotations="*"'),r.push("Clienthost: Browser"),r.push(""),r.push(JSON.stringify(t.data))})),r.push("--batch_"+n+"--"),t.abrupt("return",Promise.resolve(r.join("\r\n")));case 4:case"end":return t.stop()}}),t)})));return function(n,e){return t.apply(this,arguments)}}(),D={createRecord:T,deleteRecord:N,updateRecord:k,retrieveRecord:O,retrieveMultipleRecords:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return S(E,R(n,e),C)(t)},executeMultiple:function(){var t=a(s.mark((function t(n){var e,r,o;return s.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=Date.now(),t.prev=1,t.next=4,F(e,n);case 4:return r=t.sent,t.next=7,A(r)("$batch")({Accept:"application/json","content-type":"multipart/mixed;boundary=batch_"+e});case 7:return o=t.sent,t.abrupt("return",Promise.resolve(o));case 11:return t.prev=11,t.t0=t.catch(1),t.abrupt("return",Promise.reject(t.t0));case 14:case"end":return t.stop()}}),t,null,[[1,11]])})));return function(n){return t.apply(this,arguments)}}(),online:{execute:function(t){var n=t.getMetadata().operationName;return A(t)(n)({"content-type":"application/json"})}}},_=function(){var t=a(s.mark((function t(){var n;return s.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,v();case 2:return n=t.sent,t.abrupt("return",{uniqueName:n});case 4:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}(),M=y(a(s.mark((function t(){var n;return s.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,X("/WhoAmI")();case 2:return n=t.sent,t.abrupt("return",n.json());case 4:case"end":return t.stop()}}),t)})))),G=y(O),B=function(t,n){return function(e){return n(t(e))}},U=function(){for(var t=arguments.length,n=new Array(t),e=0;e<t;e++)n[e]=arguments[e];return n.reduce(B)},z=function(t){return function(n){return function(e){return e.replace(t,n)}}},$=U(z(/\{|\}/gi)("")),W=function(){var t=a(s.mark((function t(){var n,e;return s.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,M();case 2:return n=t.sent,t.next=5,G("systemuser",n.UserId,"?$expand=systemuserroles_association($select=name)&$select=systemuserid,fullname");case 5:return e=t.sent,t.abrupt("return",{userId:"{".concat($(n.UserId),"}"),userName:e.fullname,securityRoles:e.systemuserroles_association.map((function(t){return t.roleid}))});case 7:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}(),H=function(){return p},Y=U(z(/^\?/)("")),q=function(t){return function(n){return n.split(t)}},J=function(t){return U(Y,q("&"),(n=q("="),function(t){return t.map(n)}),function(t,n){return function(e){return e.reduce(t,n)}}((function(t,n){return t[n[0]]=n[1],t}),{}))(location.search)[t]||"";var n},K=function(){var t=a(s.mark((function t(){var n;return s.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n=J("appid"),t.t1=n,!t.t1){t.next=6;break}return t.next=5,G("appmodule",n,"?$select=name");case 5:t.t1=t.sent;case 6:if(t.t0=t.t1.name,t.t0){t.next=9;break}t.t0="";case 9:return t.abrupt("return",t.t0);case 10:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}(),Q={closeProgressIndicator:function(){},getAllowedStatusTransitions:function(){},getEntityMetadata:C,getGlobalContext:function(){var t=a(s.mark((function t(){var n;return s.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Promise.all([_(),W()]);case 2:return n=t.sent,t.abrupt("return",{organizationSettings:n[0],userSettings:n[1],getClientUrl:H,isOnPremises:d,getCurrentAppName:K});case 4:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}(),getLearningPathAttributeName:function(){},getPageContext:function(){},getResourceString:function(){},invokeProcessAction:function(){},lookObjects:function(){},refreshParentGrid:function(){},showProgressIndicator:function(){}};return{AUTH_KEY:null,ActionCollectionBase:function(){},AlertDialogStrings:function(){},ArrayEx:function(){},AttributeFormat:function(){},AttributeType:function(){},BeginSecureSessionResponseCode:function(){},BusinessProcessFlowInstanceState:function(){},BusinessProcessFlowInstanceStatus:function(){},BusinessRuleNotificationBase:function(){},ChartPaneMode:function(){},ClientName:function(){},ClientState:function(){},ClientStates:function(){},Collection:function(){},ComponentModel:function(){},ConfirmDialogStrings:function(){},Constants:function(){},ControlType:function(){},DataLoadEventArgs:function(){},DataLoadState:function(){},DateFormattingInfo:function(){},DelegateItterator:function(){},Description:function(){},Device:function(){},Diagnostics:function(){},Dialog:function(){},DialogOptions:function(){},Encoding:function(){},EntityFormOptions:function(){},EntityListPageInput:function(){},EntityMetadata:function(){},EntityRelationshipRoleType:function(){},EntityRelationshipType:function(){},ErrorDialogOptions:function(){},ErrorResponse:function(){},ExecutionContext:function(){},Flag:function(){},FormDataAttributePrivilege:function(){},FormDataAttributePrivileges:function(){},FormFactor:function(){},FormNotificationOptions:function(){},FormSaveAction:function(){},FormType:function(){},Gen:function(){},GetAttributes:function(t){return X("EntityDefinitions(LogicalName='".concat(t,"')/Attributes/"))({})},GridType:function(){},IBusinessRuleNotificationProvider:function(){},IsMockXrm:function(){return!0},IXrmCollectionItem:function(){},Interfaces:function(){},Internal:function(){},JavaScriptConsoleTraceListener:function(){},KBSearchResult:function(){},LocalizedLabel:function(){},LookupObject:function(){},LookupOptions:function(){},LookupStyle:function(){},MetricsStopwatch:function(){},Mobile:function(){},Navigation:{openForm:function(){var t=a(s.mark((function t(n){var e,r;return s.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e=p+"/main.aspx?pagetype=entityrecord",r="_blank",n.entityName&&(e+="&etn="+n.entityName),n.entityId&&(e+="&id="+n.entityId),n.formId&&(e+="&formid="+n.formId),n.openInNewWindow||(r=null),window.open(e,r);case 9:case"end":return t.stop()}}),t)})));return function(n){return t.apply(this,arguments)}}()},NotificationLevel:function(){},NumberEx:function(){},Objects:function(){},Offline:function(){},OfflineErrorResponse:function(){},OpenFileMode:function(){},OpenFormSuccessResponse:function(){},OptionSetItem:function(){},OrganizationServiceProxyBridge:function(){},Page:function(){},PageBridge:function(){},PageContextBridge:function(){},PageEx:function(){},PageInput:function(){},PageType:function(){},Panel:function(){},ProcessActionSuccessResponse:function(){},ProcessResponse:function(){},ProcessState:function(){},ProcessStatus:function(){},RelationshipReference:function(){},RequiredLevel:function(){},SaveErrorResponse:function(){},SaveEventArgs:function(){},SaveMode:function(){},SaveOptions:function(){},SaveSuccessResponse:function(){},ScopedServiceDirectory:function(){},Sdk:function(){},Services:function(){},Soap:function(){},StepProgress:function(){},StepType:function(){},StringBuilderTraceListener:function(){},StringEx:function(){},SubmitMode:function(){},TabDisplayState:function(){},TabItem:function(){},TabSection:function(){},TaskFlowOptions:function(){},TaskIterrator:function(){},Tracing:function(){},UI:function(){},Utility:Q,WebApi:D,WindowOptions:function(){},XrmBusinessProcessFlow:function(){},XrmChart:function(){},XrmCollection:function(){},XrmCollectionBase:function(){},XrmCollectionDictionary:function(){},XrmControl:function(){},XrmControlACI:function(){},XrmControlAutoLookup:function(){},XrmControlBase:function(){},XrmControlButton:function(){},XrmControlDateTime:function(){},XrmControlEmailEngagementActionsControl:function(){},XrmControlEmailRecipientActivity:function(){},XrmControlFormSelector:function(){},XrmControlGrid:function(){},XrmControlIFrame:function(){},XrmControlLookup:function(){},XrmControlOptionSet:function(){},XrmControlQuickForm:function(){},XrmControlRoutedGrid:function(){},XrmControlSearchWidget:function(){},XrmControlSilverlight:function(){},XrmControlSubGrid:function(){},XrmControlText:function(){},XrmControlTimer:function(){},XrmControlWebResource:function(){},XrmControls:function(){},XrmDataControl:function(){},XrmDialog:function(){},XrmEncoding:function(){},XrmEntities:function(){},XrmEntity:function(){},XrmEntityAttribute:function(){},XrmEntityAttributeBoolean:function(){},XrmEntityAttributeDateTime:function(){},XrmEntityAttributeLookup:function(){},XrmEntityAttributeNumber:function(){},XrmEntityAttributeOptionSet:function(){},XrmEntityAttributeOptionSetBase:function(){},XrmEntityAttributeString:function(){},XrmEntityAttributes:function(){},XrmEntityRelationship:function(){},XrmFile:function(){},XrmForm:function(){},XrmFormData:function(){},XrmFormSelectorItem:function(){},XrmFormSelectorItems:function(){},XrmFormUI:function(){},XrmGlobalContext:function(){},XrmGridData:function(){},XrmGridFilter:function(){},XrmGridRow:function(){},XrmGridRows:function(){},XrmInternal:function(){},XrmNavigation:function(){},XrmNavigationItem:function(){},XrmNavigationItems:function(){},XrmNavigations:function(){},XrmOffline:function(){},XrmOpenFileOption:function(){},XrmOrganizationSettings:function(){},XrmPageContextClient:function(){},XrmPanel:function(){},XrmPerformance:function(){},XrmProcessControlData:function(){},XrmProcessControlUI:function(){},XrmProcessStage:function(){},XrmProcessStep:function(){},XrmQuickForms:function(){},XrmRelatedEntities:function(){},XrmSdkMessages:function(){},XrmServiceDirectory:function(){},XrmTab:function(){},XrmTabNavigator:function(){},XrmTabNavigatorGroup:function(){},XrmTabNavigators:function(){},XrmTabSection:function(){},XrmTabSections:function(){},XrmTabs:function(){},XrmTaskProcess:function(){},XrmTrace:function(){},XrmUserSettings:function(){},XrmUtility:function(){},XrmViewSelector:function(){},getName:function(){return"Xrm"},setAuth:function(t){globalThis.AUTH_KEY=t},getAuth:function(){return globalThis.AUTH_KEY}}}(0,0,0,0,0,xrm$1);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
